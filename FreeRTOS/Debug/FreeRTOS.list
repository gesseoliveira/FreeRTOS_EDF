
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a30  08005a30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005a30  08005a30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a30  08005a30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a30  08005a30  00015a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a34  08005a34  00015a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000cdb0  20000010  08005a44  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000cdc0  08005a44  0002cdc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010779  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001de0  00000000  00000000  000307b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  00032598  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fd14  00000000  00000000  00033bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae28  00000000  00000000  000538c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cda60  00000000  00000000  0005e6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012c14c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff0  00000000  00000000  0012c1c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005820 	.word	0x08005820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005820 	.word	0x08005820

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	da0b      	bge.n	8000a80 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <NVIC_SetPriority+0x4c>)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 030f 	and.w	r3, r3, #15
 8000a74:	3b04      	subs	r3, #4
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a7e:	e009      	b.n	8000a94 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <NVIC_SetPriority+0x50>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab8:	d301      	bcc.n	8000abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00f      	b.n	8000ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <SysTick_Config+0x40>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f7ff ffc2 	bl	8000a54 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <SysTick_Config+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <SysTick_Config+0x40>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <Sys_Enable_Peripherals_Clock>:
 * @brief Enable the SYSCFG, COMP, VREFBUF clock and Power interface clock
 * @param  None
 * @retval None
 */
void Sys_Enable_Peripherals_Clock(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  // Configure the main internal regulator output voltage
  MODIFY_REG(PWR->CR, PWR_CR_VOS, PWR_CR_VOS);
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <Sys_Enable_Peripherals_Clock+0x34>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <Sys_Enable_Peripherals_Clock+0x34>)
 8000af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afa:	6013      	str	r3, [r2, #0]
  // System configuration controller clock enable
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <Sys_Enable_Peripherals_Clock+0x38>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <Sys_Enable_Peripherals_Clock+0x38>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	6453      	str	r3, [r2, #68]	; 0x44
  // Power interface clock enable
  SET_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN);
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <Sys_Enable_Peripherals_Clock+0x38>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <Sys_Enable_Peripherals_Clock+0x38>)
 8000b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f7ff ff79 	bl	8000a0c <NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40007000 	.word	0x40007000
 8000b24:	40023800 	.word	0x40023800

08000b28 <Sys_Configure_Clock_168MHz>:
 * @brief Configure the system clock to 168MHz
 * @param  None
 * @retval None
 */
void Sys_Configure_Clock_168MHz(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* Flash settings (see RM0090 rev9, p80) */
  FLASH->ACR = FLASH_ACR_LATENCY_5WS               /* 6 CPU cycle wait */
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <Sys_Configure_Clock_168MHz+0x84>)
 8000b2e:	f240 7205 	movw	r2, #1797	; 0x705
 8000b32:	601a      	str	r2, [r3, #0]
   * Max SYSCLK: 168MHz
   * Max AHB:  SYSCLK
   * Max APB1: SYSCLK/4 = 48MHz
   * Max APB2: SYSCLK/2 = 86MHz
   * + enable sys clock output 2 with clock divider = 4 */
  RCC->CFGR =   0                           /* Clock output 2 is SYSCLK (RCC_CFGR_MCO2) */
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <Sys_Configure_Clock_168MHz+0x8c>)
 8000b38:	609a      	str	r2, [r3, #8]
      | ( 0x6 << 27)                  /* Clock output divider */
      | RCC_CFGR_PPRE2_DIV2           /* APB2 prescaler */
      | RCC_CFGR_PPRE1_DIV4;          /* APB2 prescaler */

  /* Clock control register */
  RCC->CR = RCC_CR_HSEON;         /* Enable external oscillator */
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b40:	601a      	str	r2, [r3, #0]

  /* Wait for locked external oscillator */
  while((RCC->CR & RCC_CR_HSERDY) != RCC_CR_HSERDY);
 8000b42:	bf00      	nop
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b50:	d1f8      	bne.n	8000b44 <Sys_Configure_Clock_168MHz+0x1c>

  /* PLL config */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLSRC_HSE                /* PLL source */
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b54:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <Sys_Configure_Clock_168MHz+0x90>)
 8000b56:	605a      	str	r2, [r3, #4]
   * PLL out:  168MHz (div 2)
   * PLL usb:  48MHz (div 7)
   */

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a14      	ldr	r2, [pc, #80]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b62:	6013      	str	r3, [r2, #0]


  /* Wait for locked PLL */
  while((RCC->CR & RCC_CR_PLLRDY) != RCC_CR_PLLRDY);
 8000b64:	bf00      	nop
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b72:	d1f8      	bne.n	8000b66 <Sys_Configure_Clock_168MHz+0x3e>

  /* select system clock */
  RCC->CFGR &= ~RCC_CFGR_SW; /* clear */
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b7a:	f023 0303 	bic.w	r3, r3, #3
 8000b7e:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;   /* SYSCLK is PLL */
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	6093      	str	r3, [r2, #8]

  /* Wait for SYSCLK to be PPL */
  while((RCC->CFGR & RCC_CFGR_SW_PLL) != RCC_CFGR_SW_PLL);
 8000b8c:	bf00      	nop
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <Sys_Configure_Clock_168MHz+0x88>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d1f9      	bne.n	8000b8e <Sys_Configure_Clock_168MHz+0x66>


//for(uint32_t k = 0 ; k < 60000 ; k++)
{}
  SystemCoreClock = 168000000; //System Clock set to 168MHz
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <Sys_Configure_Clock_168MHz+0x94>)
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <Sys_Configure_Clock_168MHz+0x98>)
 8000b9e:	601a      	str	r2, [r3, #0]

  SysTick_Config(168000000 / 1000);
 8000ba0:	4808      	ldr	r0, [pc, #32]	; (8000bc4 <Sys_Configure_Clock_168MHz+0x9c>)
 8000ba2:	f7ff ff81 	bl	8000aa8 <SysTick_Config>
//  SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);   /* Configures the SysTick clock source to HCLK*/
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023c00 	.word	0x40023c00
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	30009400 	.word	0x30009400
 8000bb8:	07402a04 	.word	0x07402a04
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	0a037a00 	.word	0x0a037a00
 8000bc4:	00029040 	.word	0x00029040

08000bc8 <GPIO_Init>:
 *         This parameter can be one of the following values:
 *             @arg ANSWERED_REQUEST: All ok, time is being counted
 *             @arg Else: Some error happened.
 */
ReturnCode_t GPIO_Init(uint8_t ID, GPIO_Parameters_t Parameter)
{
 8000bc8:	b490      	push	{r4, r7}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  ReturnCode_t  ReturnValue = ANSWERED_REQUEST;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	81fb      	strh	r3, [r7, #14]

  if(ID < GPIO_MAX_AVAILABLE_ID)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b1f      	cmp	r3, #31
 8000bdc:	f200 8501 	bhi.w	80015e2 <GPIO_Init+0xa1a>
  {
    if(GPIO_List[ID].Initialized == FALSE)
 8000be0:	79fa      	ldrb	r2, [r7, #7]
 8000be2:	4978      	ldr	r1, [pc, #480]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000be4:	4613      	mov	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	4413      	add	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	440b      	add	r3, r1
 8000bee:	330a      	adds	r3, #10
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 84f1 	bne.w	80015da <GPIO_Init+0xa12>
    {
      if(GPIO_List[ID].GPIO_Pin <= 15)
 8000bf8:	79fa      	ldrb	r2, [r7, #7]
 8000bfa:	4972      	ldr	r1, [pc, #456]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	440b      	add	r3, r1
 8000c06:	3304      	adds	r3, #4
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2b0f      	cmp	r3, #15
 8000c0c:	f200 84e1 	bhi.w	80015d2 <GPIO_Init+0xa0a>
      {
        GPIO_List[ID].GPIO_Pin        = Parameter.GPIO_Pin;
 8000c10:	787b      	ldrb	r3, [r7, #1]
 8000c12:	79fa      	ldrb	r2, [r7, #7]
 8000c14:	4618      	mov	r0, r3
 8000c16:	496b      	ldr	r1, [pc, #428]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000c18:	4613      	mov	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	3304      	adds	r3, #4
 8000c24:	6018      	str	r0, [r3, #0]
        GPIO_List[ID].GPIO_Speed      = Parameter.GPIO_Speed;
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	78f8      	ldrb	r0, [r7, #3]
 8000c2a:	4966      	ldr	r1, [pc, #408]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	3309      	adds	r3, #9
 8000c38:	4602      	mov	r2, r0
 8000c3a:	701a      	strb	r2, [r3, #0]
        GPIO_List[ID].GPIO_Direction  = Parameter.GPIO_Direction;
 8000c3c:	79fa      	ldrb	r2, [r7, #7]
 8000c3e:	78b8      	ldrb	r0, [r7, #2]
 8000c40:	4960      	ldr	r1, [pc, #384]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000c42:	4613      	mov	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	3308      	adds	r3, #8
 8000c4e:	4602      	mov	r2, r0
 8000c50:	701a      	strb	r2, [r3, #0]

        switch(Parameter.GPIO_Port)
 8000c52:	783b      	ldrb	r3, [r7, #0]
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	d863      	bhi.n	8000d20 <GPIO_Init+0x158>
 8000c58:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <GPIO_Init+0x98>)
 8000c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c5e:	bf00      	nop
 8000c60:	08000c81 	.word	0x08000c81
 8000c64:	08000c95 	.word	0x08000c95
 8000c68:	08000ca9 	.word	0x08000ca9
 8000c6c:	08000cbd 	.word	0x08000cbd
 8000c70:	08000cd1 	.word	0x08000cd1
 8000c74:	08000ce5 	.word	0x08000ce5
 8000c78:	08000cf9 	.word	0x08000cf9
 8000c7c:	08000d0d 	.word	0x08000d0d
        {
        case  GPIO_PORT_A:
          GPIO_List[ID].GPIO_Port  = GPIOA;
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	4950      	ldr	r1, [pc, #320]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	4a4e      	ldr	r2, [pc, #312]	; (8000dc8 <GPIO_Init+0x200>)
 8000c90:	601a      	str	r2, [r3, #0]
          break;
 8000c92:	e045      	b.n	8000d20 <GPIO_Init+0x158>

        case  GPIO_PORT_B:
          GPIO_List[ID].GPIO_Port  = GPIOB;
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	494b      	ldr	r1, [pc, #300]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	4a4a      	ldr	r2, [pc, #296]	; (8000dcc <GPIO_Init+0x204>)
 8000ca4:	601a      	str	r2, [r3, #0]
          break;
 8000ca6:	e03b      	b.n	8000d20 <GPIO_Init+0x158>

        case  GPIO_PORT_C:
          GPIO_List[ID].GPIO_Port  = GPIOC;
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	4946      	ldr	r1, [pc, #280]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	440b      	add	r3, r1
 8000cb6:	4a46      	ldr	r2, [pc, #280]	; (8000dd0 <GPIO_Init+0x208>)
 8000cb8:	601a      	str	r2, [r3, #0]
          break;
 8000cba:	e031      	b.n	8000d20 <GPIO_Init+0x158>

        case  GPIO_PORT_D:
          GPIO_List[ID].GPIO_Port  = GPIOD;
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	4941      	ldr	r1, [pc, #260]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	4a42      	ldr	r2, [pc, #264]	; (8000dd4 <GPIO_Init+0x20c>)
 8000ccc:	601a      	str	r2, [r3, #0]
          break;
 8000cce:	e027      	b.n	8000d20 <GPIO_Init+0x158>

        case  GPIO_PORT_E:
          GPIO_List[ID].GPIO_Port  = GPIOE;
 8000cd0:	79fa      	ldrb	r2, [r7, #7]
 8000cd2:	493c      	ldr	r1, [pc, #240]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	4a3e      	ldr	r2, [pc, #248]	; (8000dd8 <GPIO_Init+0x210>)
 8000ce0:	601a      	str	r2, [r3, #0]
          break;
 8000ce2:	e01d      	b.n	8000d20 <GPIO_Init+0x158>

        case  GPIO_PORT_F:
          GPIO_List[ID].GPIO_Port  = GPIOF;
 8000ce4:	79fa      	ldrb	r2, [r7, #7]
 8000ce6:	4937      	ldr	r1, [pc, #220]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <GPIO_Init+0x214>)
 8000cf4:	601a      	str	r2, [r3, #0]
          break;
 8000cf6:	e013      	b.n	8000d20 <GPIO_Init+0x158>

        case  GPIO_PORT_G:
          GPIO_List[ID].GPIO_Port  = GPIOG;
 8000cf8:	79fa      	ldrb	r2, [r7, #7]
 8000cfa:	4932      	ldr	r1, [pc, #200]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	440b      	add	r3, r1
 8000d06:	4a36      	ldr	r2, [pc, #216]	; (8000de0 <GPIO_Init+0x218>)
 8000d08:	601a      	str	r2, [r3, #0]
          break;
 8000d0a:	e009      	b.n	8000d20 <GPIO_Init+0x158>

        case  GPIO_PORT_H:
          GPIO_List[ID].GPIO_Port  = GPIOH;
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	492d      	ldr	r1, [pc, #180]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000d10:	4613      	mov	r3, r2
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	4a32      	ldr	r2, [pc, #200]	; (8000de4 <GPIO_Init+0x21c>)
 8000d1c:	601a      	str	r2, [r3, #0]
          break;
 8000d1e:	bf00      	nop
        }

        GPIOA_CLK_ENABLE();
 8000d20:	4b31      	ldr	r3, [pc, #196]	; (8000de8 <GPIO_Init+0x220>)
 8000d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d24:	4a30      	ldr	r2, [pc, #192]	; (8000de8 <GPIO_Init+0x220>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6313      	str	r3, [r2, #48]	; 0x30
        GPIOB_CLK_ENABLE();
 8000d2c:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <GPIO_Init+0x220>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a2d      	ldr	r2, [pc, #180]	; (8000de8 <GPIO_Init+0x220>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
        GPIOC_CLK_ENABLE();
 8000d38:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <GPIO_Init+0x220>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a2a      	ldr	r2, [pc, #168]	; (8000de8 <GPIO_Init+0x220>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
        GPIOD_CLK_ENABLE();
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <GPIO_Init+0x220>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a27      	ldr	r2, [pc, #156]	; (8000de8 <GPIO_Init+0x220>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
        GPIOE_CLK_ENABLE();
 8000d50:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <GPIO_Init+0x220>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a24      	ldr	r2, [pc, #144]	; (8000de8 <GPIO_Init+0x220>)
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
        GPIOF_CLK_ENABLE();
 8000d5c:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <GPIO_Init+0x220>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a21      	ldr	r2, [pc, #132]	; (8000de8 <GPIO_Init+0x220>)
 8000d62:	f043 0320 	orr.w	r3, r3, #32
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
        GPIOG_CLK_ENABLE();
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <GPIO_Init+0x220>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <GPIO_Init+0x220>)
 8000d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
        GPIOH_CLK_ENABLE();
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <GPIO_Init+0x220>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <GPIO_Init+0x220>)
 8000d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7e:	6313      	str	r3, [r2, #48]	; 0x30
        GPIOI_CLK_ENABLE();
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <GPIO_Init+0x220>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d84:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <GPIO_Init+0x220>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6313      	str	r3, [r2, #48]	; 0x30

        switch (GPIO_List[ID].GPIO_Direction)
 8000d8c:	79fa      	ldrb	r2, [r7, #7]
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <GPIO_Init+0x1fc>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	440b      	add	r3, r1
 8000d9a:	3308      	adds	r3, #8
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b05      	cmp	r3, #5
 8000da0:	f200 82d6 	bhi.w	8001350 <GPIO_Init+0x788>
 8000da4:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <GPIO_Init+0x1e4>)
 8000da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000daa:	bf00      	nop
 8000dac:	08000ded 	.word	0x08000ded
 8000db0:	08000f01 	.word	0x08000f01
 8000db4:	08001019 	.word	0x08001019
 8000db8:	0800112f 	.word	0x0800112f
 8000dbc:	080011fb 	.word	0x080011fb
 8000dc0:	080012c9 	.word	0x080012c9
 8000dc4:	2000002c 	.word	0x2000002c
 8000dc8:	40020000 	.word	0x40020000
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020800 	.word	0x40020800
 8000dd4:	40020c00 	.word	0x40020c00
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40021400 	.word	0x40021400
 8000de0:	40021800 	.word	0x40021800
 8000de4:	40021c00 	.word	0x40021c00
 8000de8:	40023800 	.word	0x40023800
        {
        case GPIO_MODE_IN_PULL_UP:
          // Set the MODER Reg to input mode 0x00
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ( GPIO_List[ID].GPIO_Pin * 2));
 8000dec:	79fa      	ldrb	r2, [r7, #7]
 8000dee:	4989      	ldr	r1, [pc, #548]	; (8001014 <GPIO_Init+0x44c>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	4984      	ldr	r1, [pc, #528]	; (8001014 <GPIO_Init+0x44c>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2201      	movs	r2, #1
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43d9      	mvns	r1, r3
 8000e1a:	79fa      	ldrb	r2, [r7, #7]
 8000e1c:	4c7d      	ldr	r4, [pc, #500]	; (8001014 <GPIO_Init+0x44c>)
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4423      	add	r3, r4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	ea00 0201 	and.w	r2, r0, r1
 8000e2e:	601a      	str	r2, [r3, #0]
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 8000e30:	79fa      	ldrb	r2, [r7, #7]
 8000e32:	4978      	ldr	r1, [pc, #480]	; (8001014 <GPIO_Init+0x44c>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	79fa      	ldrb	r2, [r7, #7]
 8000e44:	4973      	ldr	r1, [pc, #460]	; (8001014 <GPIO_Init+0x44c>)
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	440b      	add	r3, r1
 8000e50:	3304      	adds	r3, #4
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	3301      	adds	r3, #1
 8000e58:	2201      	movs	r2, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43d9      	mvns	r1, r3
 8000e60:	79fa      	ldrb	r2, [r7, #7]
 8000e62:	4c6c      	ldr	r4, [pc, #432]	; (8001014 <GPIO_Init+0x44c>)
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4423      	add	r3, r4
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	ea00 0201 	and.w	r2, r0, r1
 8000e74:	601a      	str	r2, [r3, #0]
          // Set the PUPDR Reg to Pull-up 0x01
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->PUPDR, ( GPIO_List[ID].GPIO_Pin * 2));
 8000e76:	79fa      	ldrb	r2, [r7, #7]
 8000e78:	4966      	ldr	r1, [pc, #408]	; (8001014 <GPIO_Init+0x44c>)
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	440b      	add	r3, r1
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68d8      	ldr	r0, [r3, #12]
 8000e88:	79fa      	ldrb	r2, [r7, #7]
 8000e8a:	4962      	ldr	r1, [pc, #392]	; (8001014 <GPIO_Init+0x44c>)
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4413      	add	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	3304      	adds	r3, #4
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	fa02 f103 	lsl.w	r1, r2, r3
 8000ea2:	79fa      	ldrb	r2, [r7, #7]
 8000ea4:	4c5b      	ldr	r4, [pc, #364]	; (8001014 <GPIO_Init+0x44c>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4423      	add	r3, r4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	ea40 0201 	orr.w	r2, r0, r1
 8000eb6:	60da      	str	r2, [r3, #12]
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->PUPDR, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 8000eb8:	79fa      	ldrb	r2, [r7, #7]
 8000eba:	4956      	ldr	r1, [pc, #344]	; (8001014 <GPIO_Init+0x44c>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	68d8      	ldr	r0, [r3, #12]
 8000eca:	79fa      	ldrb	r2, [r7, #7]
 8000ecc:	4951      	ldr	r1, [pc, #324]	; (8001014 <GPIO_Init+0x44c>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3304      	adds	r3, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	3301      	adds	r3, #1
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	79fa      	ldrb	r2, [r7, #7]
 8000eea:	4c4a      	ldr	r4, [pc, #296]	; (8001014 <GPIO_Init+0x44c>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4423      	add	r3, r4
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	ea00 0201 	and.w	r2, r0, r1
 8000efc:	60da      	str	r2, [r3, #12]

          break;
 8000efe:	e22b      	b.n	8001358 <GPIO_Init+0x790>
        case GPIO_MODE_IN_PULL_DOWN:
          // Set the MODER Reg to input mode 0x00
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ( GPIO_List[ID].GPIO_Pin * 2));
 8000f00:	79fa      	ldrb	r2, [r7, #7]
 8000f02:	4944      	ldr	r1, [pc, #272]	; (8001014 <GPIO_Init+0x44c>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6818      	ldr	r0, [r3, #0]
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	493f      	ldr	r1, [pc, #252]	; (8001014 <GPIO_Init+0x44c>)
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	3304      	adds	r3, #4
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2201      	movs	r2, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43d9      	mvns	r1, r3
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	4c38      	ldr	r4, [pc, #224]	; (8001014 <GPIO_Init+0x44c>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4423      	add	r3, r4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	ea00 0201 	and.w	r2, r0, r1
 8000f42:	601a      	str	r2, [r3, #0]
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	4933      	ldr	r1, [pc, #204]	; (8001014 <GPIO_Init+0x44c>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	440b      	add	r3, r1
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6818      	ldr	r0, [r3, #0]
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	492e      	ldr	r1, [pc, #184]	; (8001014 <GPIO_Init+0x44c>)
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	4413      	add	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	440b      	add	r3, r1
 8000f64:	3304      	adds	r3, #4
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	4c27      	ldr	r4, [pc, #156]	; (8001014 <GPIO_Init+0x44c>)
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4423      	add	r3, r4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	ea00 0201 	and.w	r2, r0, r1
 8000f88:	601a      	str	r2, [r3, #0]
          // Set the PUPDR Reg to Pull-down 0x10
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->PUPDR, ( GPIO_List[ID].GPIO_Pin * 2));
 8000f8a:	79fa      	ldrb	r2, [r7, #7]
 8000f8c:	4921      	ldr	r1, [pc, #132]	; (8001014 <GPIO_Init+0x44c>)
 8000f8e:	4613      	mov	r3, r2
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	68d8      	ldr	r0, [r3, #12]
 8000f9c:	79fa      	ldrb	r2, [r7, #7]
 8000f9e:	491d      	ldr	r1, [pc, #116]	; (8001014 <GPIO_Init+0x44c>)
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	4413      	add	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	440b      	add	r3, r1
 8000faa:	3304      	adds	r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	79fa      	ldrb	r2, [r7, #7]
 8000fba:	4c16      	ldr	r4, [pc, #88]	; (8001014 <GPIO_Init+0x44c>)
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4423      	add	r3, r4
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	ea00 0201 	and.w	r2, r0, r1
 8000fcc:	60da      	str	r2, [r3, #12]
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->PUPDR, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 8000fce:	79fa      	ldrb	r2, [r7, #7]
 8000fd0:	4910      	ldr	r1, [pc, #64]	; (8001014 <GPIO_Init+0x44c>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68d8      	ldr	r0, [r3, #12]
 8000fe0:	79fa      	ldrb	r2, [r7, #7]
 8000fe2:	490c      	ldr	r1, [pc, #48]	; (8001014 <GPIO_Init+0x44c>)
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3304      	adds	r3, #4
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	fa02 f103 	lsl.w	r1, r2, r3
 8000ffc:	79fa      	ldrb	r2, [r7, #7]
 8000ffe:	4c05      	ldr	r4, [pc, #20]	; (8001014 <GPIO_Init+0x44c>)
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4423      	add	r3, r4
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	ea40 0201 	orr.w	r2, r0, r1
 8001010:	60da      	str	r2, [r3, #12]

          break;
 8001012:	e1a1      	b.n	8001358 <GPIO_Init+0x790>
 8001014:	2000002c 	.word	0x2000002c
        case GPIO_MODE_IN_NO_PULL:
          // Set the MODER Reg to input mode 0x00
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ( GPIO_List[ID].GPIO_Pin * 2));
 8001018:	79fa      	ldrb	r2, [r7, #7]
 800101a:	49aa      	ldr	r1, [pc, #680]	; (80012c4 <GPIO_Init+0x6fc>)
 800101c:	4613      	mov	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	49a5      	ldr	r1, [pc, #660]	; (80012c4 <GPIO_Init+0x6fc>)
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	3304      	adds	r3, #4
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2201      	movs	r2, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43d9      	mvns	r1, r3
 8001046:	79fa      	ldrb	r2, [r7, #7]
 8001048:	4c9e      	ldr	r4, [pc, #632]	; (80012c4 <GPIO_Init+0x6fc>)
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4423      	add	r3, r4
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	ea00 0201 	and.w	r2, r0, r1
 800105a:	601a      	str	r2, [r3, #0]
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 800105c:	79fa      	ldrb	r2, [r7, #7]
 800105e:	4999      	ldr	r1, [pc, #612]	; (80012c4 <GPIO_Init+0x6fc>)
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	4994      	ldr	r1, [pc, #592]	; (80012c4 <GPIO_Init+0x6fc>)
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	440b      	add	r3, r1
 800107c:	3304      	adds	r3, #4
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	3301      	adds	r3, #1
 8001084:	2201      	movs	r2, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	79fa      	ldrb	r2, [r7, #7]
 800108e:	4c8d      	ldr	r4, [pc, #564]	; (80012c4 <GPIO_Init+0x6fc>)
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4423      	add	r3, r4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	ea00 0201 	and.w	r2, r0, r1
 80010a0:	601a      	str	r2, [r3, #0]
          // Set the PUPDR Reg to no Pull-up or Pull-down 0x00
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->PUPDR, ( GPIO_List[ID].GPIO_Pin * 2));
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	4987      	ldr	r1, [pc, #540]	; (80012c4 <GPIO_Init+0x6fc>)
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68d8      	ldr	r0, [r3, #12]
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	4983      	ldr	r1, [pc, #524]	; (80012c4 <GPIO_Init+0x6fc>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	3304      	adds	r3, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2201      	movs	r2, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	4c7c      	ldr	r4, [pc, #496]	; (80012c4 <GPIO_Init+0x6fc>)
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4423      	add	r3, r4
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	ea00 0201 	and.w	r2, r0, r1
 80010e4:	60da      	str	r2, [r3, #12]
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->PUPDR, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	4976      	ldr	r1, [pc, #472]	; (80012c4 <GPIO_Init+0x6fc>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68d8      	ldr	r0, [r3, #12]
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	4972      	ldr	r1, [pc, #456]	; (80012c4 <GPIO_Init+0x6fc>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	3304      	adds	r3, #4
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	3301      	adds	r3, #1
 800110e:	2201      	movs	r2, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43d9      	mvns	r1, r3
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	4c6a      	ldr	r4, [pc, #424]	; (80012c4 <GPIO_Init+0x6fc>)
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4423      	add	r3, r4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	ea00 0201 	and.w	r2, r0, r1
 800112a:	60da      	str	r2, [r3, #12]
          break;
 800112c:	e114      	b.n	8001358 <GPIO_Init+0x790>
        case GPIO_MODE_OUT_PP:
          // Set the MODER Reg to Output mode 0x00
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ( GPIO_List[ID].GPIO_Pin * 2));
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	4964      	ldr	r1, [pc, #400]	; (80012c4 <GPIO_Init+0x6fc>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	79fa      	ldrb	r2, [r7, #7]
 8001142:	4960      	ldr	r1, [pc, #384]	; (80012c4 <GPIO_Init+0x6fc>)
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	3304      	adds	r3, #4
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2201      	movs	r2, #1
 8001156:	fa02 f103 	lsl.w	r1, r2, r3
 800115a:	79fa      	ldrb	r2, [r7, #7]
 800115c:	4c59      	ldr	r4, [pc, #356]	; (80012c4 <GPIO_Init+0x6fc>)
 800115e:	4613      	mov	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	4413      	add	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4423      	add	r3, r4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	ea40 0201 	orr.w	r2, r0, r1
 800116e:	601a      	str	r2, [r3, #0]
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 8001170:	79fa      	ldrb	r2, [r7, #7]
 8001172:	4954      	ldr	r1, [pc, #336]	; (80012c4 <GPIO_Init+0x6fc>)
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	494f      	ldr	r1, [pc, #316]	; (80012c4 <GPIO_Init+0x6fc>)
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3304      	adds	r3, #4
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	3301      	adds	r3, #1
 8001198:	2201      	movs	r2, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	79fa      	ldrb	r2, [r7, #7]
 80011a2:	4c48      	ldr	r4, [pc, #288]	; (80012c4 <GPIO_Init+0x6fc>)
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4423      	add	r3, r4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	ea00 0201 	and.w	r2, r0, r1
 80011b4:	601a      	str	r2, [r3, #0]
          // Set the OTYPER Reg to Output Push-Pull mode 0x0
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->OTYPER, GPIO_List[ID].GPIO_Pin );
 80011b6:	79fa      	ldrb	r2, [r7, #7]
 80011b8:	4942      	ldr	r1, [pc, #264]	; (80012c4 <GPIO_Init+0x6fc>)
 80011ba:	4613      	mov	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6858      	ldr	r0, [r3, #4]
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	493e      	ldr	r1, [pc, #248]	; (80012c4 <GPIO_Init+0x6fc>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	3304      	adds	r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2201      	movs	r2, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43d9      	mvns	r1, r3
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	4c37      	ldr	r4, [pc, #220]	; (80012c4 <GPIO_Init+0x6fc>)
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4423      	add	r3, r4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	ea00 0201 	and.w	r2, r0, r1
 80011f6:	605a      	str	r2, [r3, #4]
          break;
 80011f8:	e0ae      	b.n	8001358 <GPIO_Init+0x790>
        case GPIO_MODE_OUT_OD:
          // Set the MODER Reg to Output mode 0x00
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ( GPIO_List[ID].GPIO_Pin * 2));
 80011fa:	79fa      	ldrb	r2, [r7, #7]
 80011fc:	4931      	ldr	r1, [pc, #196]	; (80012c4 <GPIO_Init+0x6fc>)
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	79fa      	ldrb	r2, [r7, #7]
 800120e:	492d      	ldr	r1, [pc, #180]	; (80012c4 <GPIO_Init+0x6fc>)
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	440b      	add	r3, r1
 800121a:	3304      	adds	r3, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2201      	movs	r2, #1
 8001222:	fa02 f103 	lsl.w	r1, r2, r3
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	4c26      	ldr	r4, [pc, #152]	; (80012c4 <GPIO_Init+0x6fc>)
 800122a:	4613      	mov	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4423      	add	r3, r4
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	ea40 0201 	orr.w	r2, r0, r1
 800123a:	601a      	str	r2, [r3, #0]
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	4921      	ldr	r1, [pc, #132]	; (80012c4 <GPIO_Init+0x6fc>)
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	491c      	ldr	r1, [pc, #112]	; (80012c4 <GPIO_Init+0x6fc>)
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	3304      	adds	r3, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	3301      	adds	r3, #1
 8001264:	2201      	movs	r2, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	79fa      	ldrb	r2, [r7, #7]
 800126e:	4c15      	ldr	r4, [pc, #84]	; (80012c4 <GPIO_Init+0x6fc>)
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4423      	add	r3, r4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	ea00 0201 	and.w	r2, r0, r1
 8001280:	601a      	str	r2, [r3, #0]
          // Set the OTYPER Reg to Output Open-Drain mode 0x1
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->OTYPER, GPIO_List[ID].GPIO_Pin );
 8001282:	79fa      	ldrb	r2, [r7, #7]
 8001284:	490f      	ldr	r1, [pc, #60]	; (80012c4 <GPIO_Init+0x6fc>)
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6858      	ldr	r0, [r3, #4]
 8001294:	79fa      	ldrb	r2, [r7, #7]
 8001296:	490b      	ldr	r1, [pc, #44]	; (80012c4 <GPIO_Init+0x6fc>)
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	440b      	add	r3, r1
 80012a2:	3304      	adds	r3, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2201      	movs	r2, #1
 80012a8:	fa02 f103 	lsl.w	r1, r2, r3
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	4c05      	ldr	r4, [pc, #20]	; (80012c4 <GPIO_Init+0x6fc>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4423      	add	r3, r4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	ea40 0201 	orr.w	r2, r0, r1
 80012c0:	605a      	str	r2, [r3, #4]
          break;
 80012c2:	e049      	b.n	8001358 <GPIO_Init+0x790>
 80012c4:	2000002c 	.word	0x2000002c
        case GPIO_MODE_ANA:
          // Set the MODER Reg to analog mode 0x11
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ( GPIO_List[ID].GPIO_Pin * 2));
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	49b9      	ldr	r1, [pc, #740]	; (80015b0 <GPIO_Init+0x9e8>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	79fa      	ldrb	r2, [r7, #7]
 80012dc:	49b4      	ldr	r1, [pc, #720]	; (80015b0 <GPIO_Init+0x9e8>)
 80012de:	4613      	mov	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	4413      	add	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	440b      	add	r3, r1
 80012e8:	3304      	adds	r3, #4
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2201      	movs	r2, #1
 80012f0:	fa02 f103 	lsl.w	r1, r2, r3
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	4cae      	ldr	r4, [pc, #696]	; (80015b0 <GPIO_Init+0x9e8>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4423      	add	r3, r4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	ea40 0201 	orr.w	r2, r0, r1
 8001308:	601a      	str	r2, [r3, #0]
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->MODER, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	49a8      	ldr	r1, [pc, #672]	; (80015b0 <GPIO_Init+0x9e8>)
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	440b      	add	r3, r1
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	49a4      	ldr	r1, [pc, #656]	; (80015b0 <GPIO_Init+0x9e8>)
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	3304      	adds	r3, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	3301      	adds	r3, #1
 8001332:	2201      	movs	r2, #1
 8001334:	fa02 f103 	lsl.w	r1, r2, r3
 8001338:	79fa      	ldrb	r2, [r7, #7]
 800133a:	4c9d      	ldr	r4, [pc, #628]	; (80015b0 <GPIO_Init+0x9e8>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4423      	add	r3, r4
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ea40 0201 	orr.w	r2, r0, r1
 800134c:	601a      	str	r2, [r3, #0]
          break;
 800134e:	e003      	b.n	8001358 <GPIO_Init+0x790>
        default:
          ReturnValue = ERR_PARAM_MODE;
 8001350:	f248 0381 	movw	r3, #32897	; 0x8081
 8001354:	81fb      	strh	r3, [r7, #14]
          break;
 8001356:	bf00      	nop
        }

        switch (GPIO_List[ID].GPIO_Speed)
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	4995      	ldr	r1, [pc, #596]	; (80015b0 <GPIO_Init+0x9e8>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3309      	adds	r3, #9
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b03      	cmp	r3, #3
 800136c:	f200 8122 	bhi.w	80015b4 <GPIO_Init+0x9ec>
 8001370:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <GPIO_Init+0x7b0>)
 8001372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001376:	bf00      	nop
 8001378:	08001389 	.word	0x08001389
 800137c:	08001415 	.word	0x08001415
 8001380:	0800149f 	.word	0x0800149f
 8001384:	08001529 	.word	0x08001529
        {
        case GPIO_SPEED_PIN_SLOW:
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->OSPEEDR, ( GPIO_List[ID].GPIO_Pin * 2));
 8001388:	79fa      	ldrb	r2, [r7, #7]
 800138a:	4989      	ldr	r1, [pc, #548]	; (80015b0 <GPIO_Init+0x9e8>)
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6898      	ldr	r0, [r3, #8]
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	4984      	ldr	r1, [pc, #528]	; (80015b0 <GPIO_Init+0x9e8>)
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	3304      	adds	r3, #4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2201      	movs	r2, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43d9      	mvns	r1, r3
 80013b6:	79fa      	ldrb	r2, [r7, #7]
 80013b8:	4c7d      	ldr	r4, [pc, #500]	; (80015b0 <GPIO_Init+0x9e8>)
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4423      	add	r3, r4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	ea00 0201 	and.w	r2, r0, r1
 80013ca:	609a      	str	r2, [r3, #8]
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->OSPEEDR, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 80013cc:	79fa      	ldrb	r2, [r7, #7]
 80013ce:	4978      	ldr	r1, [pc, #480]	; (80015b0 <GPIO_Init+0x9e8>)
 80013d0:	4613      	mov	r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6898      	ldr	r0, [r3, #8]
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	4973      	ldr	r1, [pc, #460]	; (80015b0 <GPIO_Init+0x9e8>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	3304      	adds	r3, #4
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	3301      	adds	r3, #1
 80013f4:	2201      	movs	r2, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	79fa      	ldrb	r2, [r7, #7]
 80013fe:	4c6c      	ldr	r4, [pc, #432]	; (80015b0 <GPIO_Init+0x9e8>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4423      	add	r3, r4
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	ea00 0201 	and.w	r2, r0, r1
 8001410:	609a      	str	r2, [r3, #8]
          break;
 8001412:	e0d3      	b.n	80015bc <GPIO_Init+0x9f4>
        case GPIO_SPEED_PIN_MEDIUM:
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->OSPEEDR, ( GPIO_List[ID].GPIO_Pin * 2));
 8001414:	79fa      	ldrb	r2, [r7, #7]
 8001416:	4966      	ldr	r1, [pc, #408]	; (80015b0 <GPIO_Init+0x9e8>)
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6898      	ldr	r0, [r3, #8]
 8001426:	79fa      	ldrb	r2, [r7, #7]
 8001428:	4961      	ldr	r1, [pc, #388]	; (80015b0 <GPIO_Init+0x9e8>)
 800142a:	4613      	mov	r3, r2
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	3304      	adds	r3, #4
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2201      	movs	r2, #1
 800143c:	fa02 f103 	lsl.w	r1, r2, r3
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	4c5b      	ldr	r4, [pc, #364]	; (80015b0 <GPIO_Init+0x9e8>)
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4423      	add	r3, r4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	ea40 0201 	orr.w	r2, r0, r1
 8001454:	609a      	str	r2, [r3, #8]
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->OSPEEDR, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 8001456:	79fa      	ldrb	r2, [r7, #7]
 8001458:	4955      	ldr	r1, [pc, #340]	; (80015b0 <GPIO_Init+0x9e8>)
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6898      	ldr	r0, [r3, #8]
 8001468:	79fa      	ldrb	r2, [r7, #7]
 800146a:	4951      	ldr	r1, [pc, #324]	; (80015b0 <GPIO_Init+0x9e8>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3304      	adds	r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	3301      	adds	r3, #1
 800147e:	2201      	movs	r2, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43d9      	mvns	r1, r3
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	4c49      	ldr	r4, [pc, #292]	; (80015b0 <GPIO_Init+0x9e8>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4423      	add	r3, r4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	ea00 0201 	and.w	r2, r0, r1
 800149a:	609a      	str	r2, [r3, #8]
          break;
 800149c:	e08e      	b.n	80015bc <GPIO_Init+0x9f4>
        case GPIO_SPEED_PIN_HIGH:
          GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->OSPEEDR, ( GPIO_List[ID].GPIO_Pin * 2));
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	4943      	ldr	r1, [pc, #268]	; (80015b0 <GPIO_Init+0x9e8>)
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6898      	ldr	r0, [r3, #8]
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	493f      	ldr	r1, [pc, #252]	; (80015b0 <GPIO_Init+0x9e8>)
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3304      	adds	r3, #4
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2201      	movs	r2, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	79fa      	ldrb	r2, [r7, #7]
 80014ce:	4c38      	ldr	r4, [pc, #224]	; (80015b0 <GPIO_Init+0x9e8>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4423      	add	r3, r4
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	ea00 0201 	and.w	r2, r0, r1
 80014e0:	609a      	str	r2, [r3, #8]
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->OSPEEDR, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	4932      	ldr	r1, [pc, #200]	; (80015b0 <GPIO_Init+0x9e8>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6898      	ldr	r0, [r3, #8]
 80014f4:	79fa      	ldrb	r2, [r7, #7]
 80014f6:	492e      	ldr	r1, [pc, #184]	; (80015b0 <GPIO_Init+0x9e8>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	3304      	adds	r3, #4
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	3301      	adds	r3, #1
 800150a:	2201      	movs	r2, #1
 800150c:	fa02 f103 	lsl.w	r1, r2, r3
 8001510:	79fa      	ldrb	r2, [r7, #7]
 8001512:	4c27      	ldr	r4, [pc, #156]	; (80015b0 <GPIO_Init+0x9e8>)
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4423      	add	r3, r4
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	ea40 0201 	orr.w	r2, r0, r1
 8001524:	609a      	str	r2, [r3, #8]
          break;
 8001526:	e049      	b.n	80015bc <GPIO_Init+0x9f4>
        case GPIO_SPEED_PIN_VERY_HIGH:
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->OSPEEDR, ( GPIO_List[ID].GPIO_Pin * 2));
 8001528:	79fa      	ldrb	r2, [r7, #7]
 800152a:	4921      	ldr	r1, [pc, #132]	; (80015b0 <GPIO_Init+0x9e8>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6898      	ldr	r0, [r3, #8]
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	491c      	ldr	r1, [pc, #112]	; (80015b0 <GPIO_Init+0x9e8>)
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	3304      	adds	r3, #4
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2201      	movs	r2, #1
 8001550:	fa02 f103 	lsl.w	r1, r2, r3
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	4c16      	ldr	r4, [pc, #88]	; (80015b0 <GPIO_Init+0x9e8>)
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4423      	add	r3, r4
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	ea40 0201 	orr.w	r2, r0, r1
 8001568:	609a      	str	r2, [r3, #8]
          GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->OSPEEDR, ((GPIO_List[ID].GPIO_Pin * 2) + 1));
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	4910      	ldr	r1, [pc, #64]	; (80015b0 <GPIO_Init+0x9e8>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6898      	ldr	r0, [r3, #8]
 800157c:	79fa      	ldrb	r2, [r7, #7]
 800157e:	490c      	ldr	r1, [pc, #48]	; (80015b0 <GPIO_Init+0x9e8>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3304      	adds	r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	3301      	adds	r3, #1
 8001592:	2201      	movs	r2, #1
 8001594:	fa02 f103 	lsl.w	r1, r2, r3
 8001598:	79fa      	ldrb	r2, [r7, #7]
 800159a:	4c05      	ldr	r4, [pc, #20]	; (80015b0 <GPIO_Init+0x9e8>)
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4423      	add	r3, r4
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	ea40 0201 	orr.w	r2, r0, r1
 80015ac:	609a      	str	r2, [r3, #8]
          break;
 80015ae:	e005      	b.n	80015bc <GPIO_Init+0x9f4>
 80015b0:	2000002c 	.word	0x2000002c
        default:
          ReturnValue = ERR_PARAM_MODE;
 80015b4:	f248 0381 	movw	r3, #32897	; 0x8081
 80015b8:	81fb      	strh	r3, [r7, #14]
          break;
 80015ba:	bf00      	nop
        }
        GPIO_List[ID].Initialized = TRUE;
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	490d      	ldr	r1, [pc, #52]	; (80015f4 <GPIO_Init+0xa2c>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	330a      	adds	r3, #10
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	e00a      	b.n	80015e8 <GPIO_Init+0xa20>
      }
      else
      {
        ReturnValue = ERR_PARAM_LENGTH;
 80015d2:	f248 038c 	movw	r3, #32908	; 0x808c
 80015d6:	81fb      	strh	r3, [r7, #14]
 80015d8:	e006      	b.n	80015e8 <GPIO_Init+0xa20>
      }
    }
    else
    {
      ReturnValue = ERR_ENABLED;
 80015da:	f248 0306 	movw	r3, #32774	; 0x8006
 80015de:	81fb      	strh	r3, [r7, #14]
 80015e0:	e002      	b.n	80015e8 <GPIO_Init+0xa20>
    }
  }
  else
  {
    ReturnValue = ERR_PARAM_ID;
 80015e2:	f248 0392 	movw	r3, #32914	; 0x8092
 80015e6:	81fb      	strh	r3, [r7, #14]
  }
  return ReturnValue;
 80015e8:	89fb      	ldrh	r3, [r7, #14]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc90      	pop	{r4, r7}
 80015f2:	4770      	bx	lr
 80015f4:	2000002c 	.word	0x2000002c

080015f8 <GPIO_SetOutput>:
 *         This parameter can be one of the following values:
 *             @arg ANSWERED_REQUEST: All ok, time is being counted
 *             @arg Else: Some error happened.
 */
ReturnCode_t GPIO_SetOutput(uint8_t ID)
{
 80015f8:	b490      	push	{r4, r7}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  ReturnCode_t ReturnValue= ANSWERED_REQUEST;
 8001602:	2300      	movs	r3, #0
 8001604:	81fb      	strh	r3, [r7, #14]
  if(ID < GPIO_MAX_AVAILABLE_ID)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b1f      	cmp	r3, #31
 800160a:	d82f      	bhi.n	800166c <GPIO_SetOutput+0x74>
  {
    if(GPIO_List[ID].GPIO_Pin <= 15)
 800160c:	79fa      	ldrb	r2, [r7, #7]
 800160e:	491c      	ldr	r1, [pc, #112]	; (8001680 <GPIO_SetOutput+0x88>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3304      	adds	r3, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	d820      	bhi.n	8001664 <GPIO_SetOutput+0x6c>
      GPIO_SET_REG_BIT(GPIO_List[ID].GPIO_Port->ODR, GPIO_List[ID].GPIO_Pin);
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	4916      	ldr	r1, [pc, #88]	; (8001680 <GPIO_SetOutput+0x88>)
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	440b      	add	r3, r1
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6958      	ldr	r0, [r3, #20]
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	4912      	ldr	r1, [pc, #72]	; (8001680 <GPIO_SetOutput+0x88>)
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	3304      	adds	r3, #4
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2201      	movs	r2, #1
 8001648:	fa02 f103 	lsl.w	r1, r2, r3
 800164c:	79fa      	ldrb	r2, [r7, #7]
 800164e:	4c0c      	ldr	r4, [pc, #48]	; (8001680 <GPIO_SetOutput+0x88>)
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4423      	add	r3, r4
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	ea40 0201 	orr.w	r2, r0, r1
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	e006      	b.n	8001672 <GPIO_SetOutput+0x7a>
    else
      ReturnValue = ERR_PARAM_LENGTH;
 8001664:	f248 038c 	movw	r3, #32908	; 0x808c
 8001668:	81fb      	strh	r3, [r7, #14]
 800166a:	e002      	b.n	8001672 <GPIO_SetOutput+0x7a>
  }
  else
  {
    ReturnValue = ERR_PARAM_ID;
 800166c:	f248 0392 	movw	r3, #32914	; 0x8092
 8001670:	81fb      	strh	r3, [r7, #14]
  }
  return ReturnValue;
 8001672:	89fb      	ldrh	r3, [r7, #14]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bc90      	pop	{r4, r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	2000002c 	.word	0x2000002c

08001684 <GPIO_ClearOutput>:
 *         This parameter can be one of the following values:
 *             @arg ANSWERED_REQUEST: All ok, pin's level has been cleared.
 *             @arg Else: Some error happened.
 */
ReturnCode_t GPIO_ClearOutput(uint8_t ID)
{ 
 8001684:	b490      	push	{r4, r7}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  ReturnCode_t ReturnValue= ANSWERED_REQUEST;
 800168e:	2300      	movs	r3, #0
 8001690:	81fb      	strh	r3, [r7, #14]
  if(ID < GPIO_MAX_AVAILABLE_ID)
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b1f      	cmp	r3, #31
 8001696:	d830      	bhi.n	80016fa <GPIO_ClearOutput+0x76>
  {
    if(GPIO_List[ID].GPIO_Pin <= 15)
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	491c      	ldr	r1, [pc, #112]	; (800170c <GPIO_ClearOutput+0x88>)
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	3304      	adds	r3, #4
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	d821      	bhi.n	80016f2 <GPIO_ClearOutput+0x6e>
      GPIO_CLR_REG_BIT(GPIO_List[ID].GPIO_Port->ODR, GPIO_List[ID].GPIO_Pin);
 80016ae:	79fa      	ldrb	r2, [r7, #7]
 80016b0:	4916      	ldr	r1, [pc, #88]	; (800170c <GPIO_ClearOutput+0x88>)
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6958      	ldr	r0, [r3, #20]
 80016c0:	79fa      	ldrb	r2, [r7, #7]
 80016c2:	4912      	ldr	r1, [pc, #72]	; (800170c <GPIO_ClearOutput+0x88>)
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	3304      	adds	r3, #4
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43d9      	mvns	r1, r3
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	4c0b      	ldr	r4, [pc, #44]	; (800170c <GPIO_ClearOutput+0x88>)
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4423      	add	r3, r4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	ea00 0201 	and.w	r2, r0, r1
 80016ee:	615a      	str	r2, [r3, #20]
 80016f0:	e006      	b.n	8001700 <GPIO_ClearOutput+0x7c>
    else
      ReturnValue = ERR_PARAM_LENGTH;
 80016f2:	f248 038c 	movw	r3, #32908	; 0x808c
 80016f6:	81fb      	strh	r3, [r7, #14]
 80016f8:	e002      	b.n	8001700 <GPIO_ClearOutput+0x7c>
  }
  else
  {
    ReturnValue = ERR_PARAM_ID;
 80016fa:	f248 0392 	movw	r3, #32914	; 0x8092
 80016fe:	81fb      	strh	r3, [r7, #14]
  }
  return ReturnValue;
 8001700:	89fb      	ldrh	r3, [r7, #14]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bc90      	pop	{r4, r7}
 800170a:	4770      	bx	lr
 800170c:	2000002c 	.word	0x2000002c

08001710 <GPIO_ToggleOutput>:
 *         This parameter can be one of the following values:
 *             @arg ANSWERED_REQUEST: All ok, pin's level has been toggled.
 *             @arg Else: Some error happened.
 */
ReturnCode_t  GPIO_ToggleOutput(uint8_t ID)
{
 8001710:	b490      	push	{r4, r7}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  ReturnCode_t ReturnValue= ANSWERED_REQUEST;
 800171a:	2300      	movs	r3, #0
 800171c:	81fb      	strh	r3, [r7, #14]
  if(ID < GPIO_MAX_AVAILABLE_ID)
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b1f      	cmp	r3, #31
 8001722:	d82f      	bhi.n	8001784 <GPIO_ToggleOutput+0x74>
  {
    if(GPIO_List[ID].GPIO_Pin <= 15)
 8001724:	79fa      	ldrb	r2, [r7, #7]
 8001726:	491c      	ldr	r1, [pc, #112]	; (8001798 <GPIO_ToggleOutput+0x88>)
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3304      	adds	r3, #4
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	d820      	bhi.n	800177c <GPIO_ToggleOutput+0x6c>
      GPIO_TGL_REG_BIT(GPIO_List[ID].GPIO_Port->ODR, GPIO_List[ID].GPIO_Pin);
 800173a:	79fa      	ldrb	r2, [r7, #7]
 800173c:	4916      	ldr	r1, [pc, #88]	; (8001798 <GPIO_ToggleOutput+0x88>)
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	440b      	add	r3, r1
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6958      	ldr	r0, [r3, #20]
 800174c:	79fa      	ldrb	r2, [r7, #7]
 800174e:	4912      	ldr	r1, [pc, #72]	; (8001798 <GPIO_ToggleOutput+0x88>)
 8001750:	4613      	mov	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3304      	adds	r3, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	fa02 f103 	lsl.w	r1, r2, r3
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	4c0c      	ldr	r4, [pc, #48]	; (8001798 <GPIO_ToggleOutput+0x88>)
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4423      	add	r3, r4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	ea80 0201 	eor.w	r2, r0, r1
 8001778:	615a      	str	r2, [r3, #20]
 800177a:	e006      	b.n	800178a <GPIO_ToggleOutput+0x7a>
    else
      ReturnValue = ERR_PARAM_LENGTH;
 800177c:	f248 038c 	movw	r3, #32908	; 0x808c
 8001780:	81fb      	strh	r3, [r7, #14]
 8001782:	e002      	b.n	800178a <GPIO_ToggleOutput+0x7a>
  }
  else
  {
    ReturnValue = ERR_PARAM_ID;
 8001784:	f248 0392 	movw	r3, #32914	; 0x8092
 8001788:	81fb      	strh	r3, [r7, #14]
  }
  return ReturnValue;
 800178a:	89fb      	ldrh	r3, [r7, #14]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bc90      	pop	{r4, r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	2000002c 	.word	0x2000002c

0800179c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4a08      	ldr	r2, [pc, #32]	; (80017d0 <HAL_PWR_EnterSLEEPMode+0x34>)
 80017ae:	f023 0304 	bic.w	r3, r3, #4
 80017b2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d101      	bne.n	80017be <HAL_PWR_EnterSLEEPMode+0x22>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 80017ba:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 80017bc:	e002      	b.n	80017c4 <HAL_PWR_EnterSLEEPMode+0x28>
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
 80017be:	bf40      	sev
  __ASM volatile ("wfe");
 80017c0:	bf20      	wfe
 80017c2:	bf20      	wfe
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f103 0208 	add.w	r2, r3, #8
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f103 0208 	add.w	r2, r3, #8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f103 0208 	add.w	r2, r3, #8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001876:	b480      	push	{r7}
 8001878:	b085      	sub	sp, #20
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6892      	ldr	r2, [r2, #8]
 800188c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6852      	ldr	r2, [r2, #4]
 8001896:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d103      	bne.n	80018aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <NVIC_SetPriority>:
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da0b      	bge.n	80018f8 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	490c      	ldr	r1, [pc, #48]	; (8001918 <NVIC_SetPriority+0x4c>)
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	3b04      	subs	r3, #4
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	761a      	strb	r2, [r3, #24]
}
 80018f6:	e009      	b.n	800190c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <NVIC_SetPriority+0x50>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00
 800191c:	e000e100 	.word	0xe000e100

08001920 <SysTick_Config>:
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ffc2 	bl	80018cc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <xTaskCreate>:
        const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
        const configSTACK_DEPTH_TYPE usStackDepth,
        void * const pvParameters,
        UBaseType_t uxPriority,
        TaskHandle_t * const pxCreatedTask )
    {
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af04      	add	r7, sp, #16
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	4613      	mov	r3, r2
 8001972:	80fb      	strh	r3, [r7, #6]
#else /* portSTACK_GROWTH */
      {
        StackType_t *pxStack;

        /* Allocate space for the stack used by the task being created. */
        pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4618      	mov	r0, r3
 800197a:	f002 f845 	bl	8003a08 <pvPortMalloc>
 800197e:	6178      	str	r0, [r7, #20]

        if( pxStack != NULL )
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00e      	beq.n	80019a4 <xTaskCreate+0x40>
        {
          /* Allocate space for the TCB. */
          pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001986:	207c      	movs	r0, #124	; 0x7c
 8001988:	f002 f83e 	bl	8003a08 <pvPortMalloc>
 800198c:	61f8      	str	r0, [r7, #28]

          if( pxNewTCB != NULL )
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <xTaskCreate+0x38>
          {
            /* Store the stack location in the TCB. */
            pxNewTCB->pxStack = pxStack;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	651a      	str	r2, [r3, #80]	; 0x50
 800199a:	e005      	b.n	80019a8 <xTaskCreate+0x44>
          }
          else
          {
            /* The stack cannot be used as the TCB was not created.  Free
					it again. */
            vPortFree( pxStack );
 800199c:	6978      	ldr	r0, [r7, #20]
 800199e:	f002 f8f5 	bl	8003b8c <vPortFree>
 80019a2:	e001      	b.n	80019a8 <xTaskCreate+0x44>
          }
        }
        else
        {
          pxNewTCB = NULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61fb      	str	r3, [r7, #28]
        }
      }
#endif /* portSTACK_GROWTH */

      if( pxNewTCB != NULL )
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d013      	beq.n	80019d6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
          pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
        }
#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

        prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	2300      	movs	r3, #0
 80019b2:	9303      	str	r3, [sp, #12]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	9302      	str	r3, [sp, #8]
 80019b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 f80e 	bl	80019e6 <prvInitialiseNewTask>
        prvAddNewTaskToReadyList( pxNewTCB );
 80019ca:	69f8      	ldr	r0, [r7, #28]
 80019cc:	f000 f892 	bl	8001af4 <prvAddNewTaskToReadyList>
        xReturn = pdPASS;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	e002      	b.n	80019dc <xTaskCreate+0x78>
      }
      else
      {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	61bb      	str	r3, [r7, #24]
      }

      return xReturn;
 80019dc:	69bb      	ldr	r3, [r7, #24]
    }
 80019de:	4618      	mov	r0, r3
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <prvInitialiseNewTask>:
        void * const pvParameters,
        UBaseType_t uxPriority,
        TaskHandle_t * const pxCreatedTask,
        TCB_t *pxNewTCB,
        const MemoryRegion_t * const xRegions )
    {
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b088      	sub	sp, #32
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
#if( portSTACK_GROWTH < 0 )
      {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019fe:	3b01      	subs	r3, #1
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	f023 0307 	bic.w	r3, r3, #7
 8001a0c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d009      	beq.n	8001a2c <prvInitialiseNewTask+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1c:	f383 8811 	msr	BASEPRI, r3
 8001a20:	f3bf 8f6f 	isb	sy
 8001a24:	f3bf 8f4f 	dsb	sy
 8001a28:	617b      	str	r3, [r7, #20]
 8001a2a:	e7fe      	b.n	8001a2a <prvInitialiseNewTask+0x44>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
      }
#endif /* portSTACK_GROWTH */

      /* Store the task name in the TCB. */
      if( pcName != NULL )
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01f      	beq.n	8001a72 <prvInitialiseNewTask+0x8c>
      {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	e012      	b.n	8001a5e <prvInitialiseNewTask+0x78>
        {
          pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	7819      	ldrb	r1, [r3, #0]
 8001a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4413      	add	r3, r2
 8001a46:	3354      	adds	r3, #84	; 0x54
 8001a48:	460a      	mov	r2, r1
 8001a4a:	701a      	strb	r2, [r3, #0]

          /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
          if( pcName[ x ] == ( char ) 0x00 )
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <prvInitialiseNewTask+0x80>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	2b13      	cmp	r3, #19
 8001a62:	d9e9      	bls.n	8001a38 <prvInitialiseNewTask+0x52>
 8001a64:	e000      	b.n	8001a68 <prvInitialiseNewTask+0x82>
          {
            break;
 8001a66:	bf00      	nop
          }
        }

        /* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8001a70:	e003      	b.n	8001a7a <prvInitialiseNewTask+0x94>
      }
      else
      {
        /* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      }

      /* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
      if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7c:	2b1d      	cmp	r3, #29
 8001a7e:	d901      	bls.n	8001a84 <prvInitialiseNewTask+0x9e>
      {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a80:	231d      	movs	r3, #29
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
      else
      {
        mtCOVERAGE_TEST_MARKER();
      }

      pxNewTCB->uxPriority = uxPriority;
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a88:	64da      	str	r2, [r3, #76]	; 0x4c
#if ( configUSE_MUTEXES == 1 )
      {
        pxNewTCB->uxBasePriority = uxPriority;
 8001a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a8e:	669a      	str	r2, [r3, #104]	; 0x68
        pxNewTCB->uxMutexesHeld = 0;
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	2200      	movs	r2, #0
 8001a94:	66da      	str	r2, [r3, #108]	; 0x6c
      }
#endif /* configUSE_MUTEXES */

      vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a98:	3324      	adds	r3, #36	; 0x24
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff feba 	bl	8001814 <vListInitialiseItem>
      vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa2:	3338      	adds	r3, #56	; 0x38
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff feb5 	bl	8001814 <vListInitialiseItem>

      /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
      listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Event lists are always in priority order. */
      listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	f1c3 021e 	rsb	r2, r3, #30
 8001ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38
      listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001abe:	645a      	str	r2, [r3, #68]	; 0x44
      }
#endif

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
      {
        pxNewTCB->ulNotifiedValue = 0;
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	671a      	str	r2, [r3, #112]	; 0x70
        pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
          }
#endif /* portSTACK_GROWTH */
        }
#else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
          pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	69b8      	ldr	r0, [r7, #24]
 8001ad4:	f001 fd4a 	bl	800356c <pxPortInitialiseStack>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	601a      	str	r2, [r3, #0]
        }
#endif /* portHAS_STACK_OVERFLOW_CHECKING */
      }
#endif /* portUSING_MPU_WRAPPERS */

      if( pxCreatedTask != NULL )
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <prvInitialiseNewTask+0x104>
      {
        /* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ae8:	601a      	str	r2, [r3, #0]
      }
      else
      {
        mtCOVERAGE_TEST_MARKER();
      }
    }
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <prvAddNewTaskToReadyList>:
    /*-----------------------------------------------------------*/

    static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
    {
 8001af4:	b5b0      	push	{r4, r5, r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	6078      	str	r0, [r7, #4]
      /* Ensure interrupts don't access the task lists while the lists are being
	updated. */
      taskENTER_CRITICAL();
 8001afc:	f001 fe6e 	bl	80037dc <vPortEnterCritical>
      {
        uxCurrentNumberOfTasks++;
 8001b00:	4b39      	ldr	r3, [pc, #228]	; (8001be8 <prvAddNewTaskToReadyList+0xf4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a38      	ldr	r2, [pc, #224]	; (8001be8 <prvAddNewTaskToReadyList+0xf4>)
 8001b08:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <prvAddNewTaskToReadyList+0xf8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <prvAddNewTaskToReadyList+0x32>
        {
          /* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
          pxCurrentTCB = pxNewTCB;
 8001b12:	4a36      	ldr	r2, [pc, #216]	; (8001bec <prvAddNewTaskToReadyList+0xf8>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6013      	str	r3, [r2, #0]

          if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b18:	4b33      	ldr	r3, [pc, #204]	; (8001be8 <prvAddNewTaskToReadyList+0xf4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d110      	bne.n	8001b42 <prvAddNewTaskToReadyList+0x4e>
          {
            /* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
            prvInitialiseTaskLists();
 8001b20:	f000 fcca 	bl	80024b8 <prvInitialiseTaskLists>
 8001b24:	e00d      	b.n	8001b42 <prvAddNewTaskToReadyList+0x4e>
        else
        {
          /* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
          if( xSchedulerRunning == pdFALSE )
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <prvAddNewTaskToReadyList+0xfc>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <prvAddNewTaskToReadyList+0x4e>
          {
            if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <prvAddNewTaskToReadyList+0xf8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d802      	bhi.n	8001b42 <prvAddNewTaskToReadyList+0x4e>
            {
              pxCurrentTCB = pxNewTCB;
 8001b3c:	4a2b      	ldr	r2, [pc, #172]	; (8001bec <prvAddNewTaskToReadyList+0xf8>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
          {
            mtCOVERAGE_TEST_MARKER();
          }
        }

        uxTaskNumber++;
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <prvAddNewTaskToReadyList+0x100>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <prvAddNewTaskToReadyList+0x100>)
 8001b4a:	6013      	str	r3, [r2, #0]
        {
          /* Add a counter into the TCB for tracing only. */
          pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
#endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d016      	beq.n	8001b80 <prvAddNewTaskToReadyList+0x8c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f003 f947 	bl	8004de8 <SEGGER_SYSVIEW_OnTaskCreate>
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461c      	mov	r4, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b76:	1ae3      	subs	r3, r4, r3
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	f003 fbde 	bl	800533c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 f9b8 	bl	8004ef8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <prvAddNewTaskToReadyList+0x104>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	4a18      	ldr	r2, [pc, #96]	; (8001bf8 <prvAddNewTaskToReadyList+0x104>)
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <prvAddNewTaskToReadyList+0x108>)
 8001ba8:	441a      	add	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3324      	adds	r3, #36	; 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	f7ff fe3c 	bl	800182e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
      }
      taskEXIT_CRITICAL();
 8001bb6:	f001 fe3f 	bl	8003838 <vPortExitCritical>

      if( xSchedulerRunning != pdFALSE )
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <prvAddNewTaskToReadyList+0xfc>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00e      	beq.n	8001be0 <prvAddNewTaskToReadyList+0xec>
      {
        /* If the created task is of a higher priority than the current task
		then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <prvAddNewTaskToReadyList+0xf8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d207      	bcs.n	8001be0 <prvAddNewTaskToReadyList+0xec>
        {
          taskYIELD_IF_USING_PREEMPTION();
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <prvAddNewTaskToReadyList+0x10c>)
 8001bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f3bf 8f4f 	dsb	sy
 8001bdc:	f3bf 8f6f 	isb	sy
      }
      else
      {
        mtCOVERAGE_TEST_MARKER();
      }
    }
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}
 8001be8:	20000498 	.word	0x20000498
 8001bec:	200001cc 	.word	0x200001cc
 8001bf0:	200004a4 	.word	0x200004a4
 8001bf4:	200004b0 	.word	0x200004b0
 8001bf8:	200004a0 	.word	0x200004a0
 8001bfc:	200001d0 	.word	0x200001d0
 8001c00:	e000ed04 	.word	0xe000ed04

08001c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
    /*-----------------------------------------------------------*/

    void vTaskStartScheduler( void )
    {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af02      	add	r7, sp, #8
        }
      }
#else
      {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate(	prvIdleTask,
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <vTaskStartScheduler+0xc0>)
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	2282      	movs	r2, #130	; 0x82
 8001c16:	492c      	ldr	r1, [pc, #176]	; (8001cc8 <vTaskStartScheduler+0xc4>)
 8001c18:	482c      	ldr	r0, [pc, #176]	; (8001ccc <vTaskStartScheduler+0xc8>)
 8001c1a:	f7ff fea3 	bl	8001964 <xTaskCreate>
 8001c1e:	60f8      	str	r0, [r7, #12]
          mtCOVERAGE_TEST_MARKER();
        }
      }
#endif /* configUSE_TIMERS */

      if( xReturn == pdPASS )
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d13c      	bne.n	8001ca0 <vTaskStartScheduler+0x9c>
 8001c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2a:	f383 8811 	msr	BASEPRI, r3
 8001c2e:	f3bf 8f6f 	isb	sy
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
          _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
        }
#endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <vTaskStartScheduler+0xcc>)
 8001c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <vTaskStartScheduler+0xd0>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c46:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <vTaskStartScheduler+0xd4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        if(EsTaskCreated == 0)
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <vTaskStartScheduler+0xd8>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10b      	bne.n	8001c6c <vTaskStartScheduler+0x68>
        {
        	pxCurrentTCB = idle_remv( ListReady );
 8001c54:	4822      	ldr	r0, [pc, #136]	; (8001ce0 <vTaskStartScheduler+0xdc>)
 8001c56:	f000 ff89 	bl	8002b6c <idle_remv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <vTaskStartScheduler+0xe0>)
 8001c5e:	601a      	str	r2, [r3, #0]

        	Ms_currentTaskIndex = pxCurrentTCB->MsID;
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <vTaskStartScheduler+0xe0>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	7f5a      	ldrb	r2, [r3, #29]
 8001c66:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <vTaskStartScheduler+0xe4>)
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	e008      	b.n	8001c7e <vTaskStartScheduler+0x7a>
        }
        else
        {
        	pxCurrentTCB = MsTcbEsTask;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <vTaskStartScheduler+0xe8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <vTaskStartScheduler+0xe0>)
 8001c72:	6013      	str	r3, [r2, #0]
        	Ms_currentTaskIndex = pxCurrentTCB->MsID;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <vTaskStartScheduler+0xe0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	7f5a      	ldrb	r2, [r3, #29]
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <vTaskStartScheduler+0xe4>)
 8001c7c:	701a      	strb	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <vTaskStartScheduler+0xe0>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <vTaskStartScheduler+0xc0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d102      	bne.n	8001c90 <vTaskStartScheduler+0x8c>
 8001c8a:	f003 f891 	bl	8004db0 <SEGGER_SYSVIEW_OnIdle>
 8001c8e:	e004      	b.n	8001c9a <vTaskStartScheduler+0x96>
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <vTaskStartScheduler+0xe0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 f8eb 	bl	8004e70 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001c9a:	f001 fcf1 	bl	8003680 <xPortStartScheduler>
      }

      /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
      ( void ) xIdleTaskHandle;
    }
 8001c9e:	e00d      	b.n	8001cbc <vTaskStartScheduler+0xb8>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca6:	d109      	bne.n	8001cbc <vTaskStartScheduler+0xb8>
 8001ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	e7fe      	b.n	8001cba <vTaskStartScheduler+0xb6>
    }
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200004b8 	.word	0x200004b8
 8001cc8:	08005838 	.word	0x08005838
 8001ccc:	08002485 	.word	0x08002485
 8001cd0:	200004b4 	.word	0x200004b4
 8001cd4:	200004a4 	.word	0x200004a4
 8001cd8:	2000049c 	.word	0x2000049c
 8001cdc:	2000cbe8 	.word	0x2000cbe8
 8001ce0:	2000c738 	.word	0x2000c738
 8001ce4:	200001cc 	.word	0x200001cc
 8001ce8:	2000c734 	.word	0x2000c734
 8001cec:	2000cbf8 	.word	0x2000cbf8

08001cf0 <vTaskSuspendAll>:
      vPortEndScheduler();
    }
    /*----------------------------------------------------------*/

    void vTaskSuspendAll( void )
    {
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
      /* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
      ++uxSchedulerSuspended;
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <vTaskSuspendAll+0x18>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <vTaskSuspendAll+0x18>)
 8001cfc:	6013      	str	r3, [r2, #0]
      portMEMORY_BARRIER();
    }
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	200004bc 	.word	0x200004bc

08001d0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
    /*----------------------------------------------------------*/

    BaseType_t xTaskResumeAll( void )
    {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
      TCB_t *pxTCB = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
      BaseType_t xAlreadyYielded = pdFALSE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]

      /* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
      configASSERT( uxSchedulerSuspended );
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <xTaskResumeAll+0x11c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <xTaskResumeAll+0x2a>
 8001d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	f3bf 8f4f 	dsb	sy
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	e7fe      	b.n	8001d34 <xTaskResumeAll+0x28>
      /* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
      taskENTER_CRITICAL();
 8001d36:	f001 fd51 	bl	80037dc <vPortEnterCritical>
      {
        --uxSchedulerSuspended;
 8001d3a:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <xTaskResumeAll+0x11c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	4a39      	ldr	r2, [pc, #228]	; (8001e28 <xTaskResumeAll+0x11c>)
 8001d42:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d44:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <xTaskResumeAll+0x11c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d165      	bne.n	8001e18 <xTaskResumeAll+0x10c>
        {
          if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d4c:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <xTaskResumeAll+0x120>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d061      	beq.n	8001e18 <xTaskResumeAll+0x10c>
          {
            /* Move any readied tasks from the pending list into the
				appropriate ready list. */
            while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d54:	e032      	b.n	8001dbc <xTaskResumeAll+0xb0>
            {
              pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d56:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <xTaskResumeAll+0x124>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60fb      	str	r3, [r7, #12]
              ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3338      	adds	r3, #56	; 0x38
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fd87 	bl	8001876 <uxListRemove>
              ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3324      	adds	r3, #36	; 0x24
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fd82 	bl	8001876 <uxListRemove>
              prvAddTaskToReadyList( pxTCB );
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 f8bf 	bl	8004ef8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7e:	2201      	movs	r2, #1
 8001d80:	409a      	lsls	r2, r3
 8001d82:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <xTaskResumeAll+0x128>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <xTaskResumeAll+0x128>)
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <xTaskResumeAll+0x12c>)
 8001d9a:	441a      	add	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3324      	adds	r3, #36	; 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f7ff fd43 	bl	800182e <vListInsertEnd>

              /* If the moved task has a priority higher than the current
					task then a yield must be performed. */
              if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dac:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <xTaskResumeAll+0x130>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d302      	bcc.n	8001dbc <xTaskResumeAll+0xb0>
              {
                xYieldPending = pdTRUE;
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <xTaskResumeAll+0x134>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
            while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <xTaskResumeAll+0x124>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1c8      	bne.n	8001d56 <xTaskResumeAll+0x4a>
              {
                mtCOVERAGE_TEST_MARKER();
              }
            }

            if( pxTCB != NULL )
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
              prvResetNextTaskUnblockTime();
 8001dca:	f000 fbf1 	bl	80025b0 <prvResetNextTaskUnblockTime>
            /* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
            {
              UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <xTaskResumeAll+0x138>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	607b      	str	r3, [r7, #4]

              if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <xTaskResumeAll+0xf0>
              {
                do
                {
                  if( xTaskIncrementTick() != pdFALSE )
 8001dda:	f000 f8c1 	bl	8001f60 <xTaskIncrementTick>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <xTaskResumeAll+0xde>
                  {
                    xYieldPending = pdTRUE;
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <xTaskResumeAll+0x134>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
                  }
                  else
                  {
                    mtCOVERAGE_TEST_MARKER();
                  }
                  --uxPendedCounts;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	607b      	str	r3, [r7, #4]
                } while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f1      	bne.n	8001dda <xTaskResumeAll+0xce>

                uxPendedTicks = 0;
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <xTaskResumeAll+0x138>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
              {
                mtCOVERAGE_TEST_MARKER();
              }
            }

            if( xYieldPending != pdFALSE )
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <xTaskResumeAll+0x134>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <xTaskResumeAll+0x10c>
            {
#if( configUSE_PREEMPTION != 0 )
              {
                xAlreadyYielded = pdTRUE;
 8001e04:	2301      	movs	r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
              }
#endif
              taskYIELD_IF_USING_PREEMPTION();
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <xTaskResumeAll+0x13c>)
 8001e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	f3bf 8f6f 	isb	sy
        else
        {
          mtCOVERAGE_TEST_MARKER();
        }
      }
      taskEXIT_CRITICAL();
 8001e18:	f001 fd0e 	bl	8003838 <vPortExitCritical>

      return xAlreadyYielded;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    }
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200004bc 	.word	0x200004bc
 8001e2c:	20000498 	.word	0x20000498
 8001e30:	20000458 	.word	0x20000458
 8001e34:	200004a0 	.word	0x200004a0
 8001e38:	200001d0 	.word	0x200001d0
 8001e3c:	200001cc 	.word	0x200001cc
 8001e40:	200004ac 	.word	0x200004ac
 8001e44:	200004a8 	.word	0x200004a8
 8001e48:	e000ed04 	.word	0xe000ed04

08001e4c <xTaskGetTickCountFromISR>:
      return xTicks;
    }
    /*-----------------------------------------------------------*/

    TickType_t xTaskGetTickCountFromISR( void )
    {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
      portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e52:	f001 fd9b 	bl	800398c <vPortValidateInterruptPriority>

      uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001e56:	2300      	movs	r3, #0
 8001e58:	607b      	str	r3, [r7, #4]
      {
        xReturn = xTickCount;
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <xTaskGetTickCountFromISR+0x20>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	603b      	str	r3, [r7, #0]
      }
      portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

      return xReturn;
 8001e60:	683b      	ldr	r3, [r7, #0]
    }
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000049c 	.word	0x2000049c

08001e70 <healthCheck>:
    float tot;
    float Acum_ReleaseJob, t_ReleaseJob;
    uint32_t ReleaseJobCounter = 0;

    void healthCheck(void)
    {
 8001e70:	b490      	push	{r4, r7}
 8001e72:	af00      	add	r7, sp, #0
      indexTime_exec_Tick++;
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <healthCheck+0xc8>)
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <healthCheck+0xc8>)
 8001e7e:	801a      	strh	r2, [r3, #0]

      if(indexTime_exec_Tick>=10000)
 8001e80:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <healthCheck+0xc8>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d91f      	bls.n	8001ecc <healthCheck+0x5c>
      {
        indexTime_exec_Tick =0;
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <healthCheck+0xc8>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	801a      	strh	r2, [r3, #0]

        tot =  Acumtime_exec_CS + Avarege_exec_Tick;
 8001e92:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <healthCheck+0xcc>)
 8001e94:	ed93 7a00 	vldr	s14, [r3]
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <healthCheck+0xd0>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <healthCheck+0xd4>)
 8001ea4:	edc3 7a00 	vstr	s15, [r3]
        tot = tot/1000;
 8001ea8:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <healthCheck+0xd4>)
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f48 <healthCheck+0xd8>
 8001eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <healthCheck+0xd4>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
        Acumtime_exec_CS = 0;
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <healthCheck+0xcc>)
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

        Avarege_exec_Tick = 0;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <healthCheck+0xd0>)
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
      }

      /*algorithm Fault  !!!!*/
        if(pxCurrentTCB->MsID == 255 && bitmap != 0)
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <healthCheck+0xdc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	7f5b      	ldrb	r3, [r3, #29]
 8001ed2:	2bff      	cmp	r3, #255	; 0xff
 8001ed4:	d108      	bne.n	8001ee8 <healthCheck+0x78>
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <healthCheck+0xe0>)
 8001ed8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001edc:	4323      	orrs	r3, r4
 8001ede:	d003      	beq.n	8001ee8 <healthCheck+0x78>
        {
          pxCurrentTCB->MsID=255;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <healthCheck+0xdc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	22ff      	movs	r2, #255	; 0xff
 8001ee6:	775a      	strb	r2, [r3, #29]
        }

        if ( pxCurrentTCB->MsAbsDeadLine <  xTickCount && pxCurrentTCB->MsID !=0  )
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <healthCheck+0xdc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <healthCheck+0xe4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d209      	bcs.n	8001f0a <healthCheck+0x9a>
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <healthCheck+0xdc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	7f5b      	ldrb	r3, [r3, #29]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <healthCheck+0x9a>
        {
          pxCurrentTCB->MsMissedDeadLine++;
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <healthCheck+0xdc>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	3201      	adds	r2, #1
 8001f08:	619a      	str	r2, [r3, #24]
        }

        if (xTickCount >= bp)
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <healthCheck+0xe4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <healthCheck+0xe8>)
 8001f16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f1a:	42a2      	cmp	r2, r4
 8001f1c:	bf08      	it	eq
 8001f1e:	4299      	cmpeq	r1, r3
 8001f20:	d306      	bcc.n	8001f30 <healthCheck+0xc0>
          bp =0;
 8001f22:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <healthCheck+0xe8>)
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	f04f 0400 	mov.w	r4, #0
 8001f2c:	e9c2 3400 	strd	r3, r4, [r2]
    }
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc90      	pop	{r4, r7}
 8001f36:	4770      	bx	lr
 8001f38:	200001c4 	.word	0x200001c4
 8001f3c:	200001bc 	.word	0x200001bc
 8001f40:	2000b520 	.word	0x2000b520
 8001f44:	2000cc08 	.word	0x2000cc08
 8001f48:	447a0000 	.word	0x447a0000
 8001f4c:	200001cc 	.word	0x200001cc
 8001f50:	200001b0 	.word	0x200001b0
 8001f54:	2000049c 	.word	0x2000049c
 8001f58:	2000aec8 	.word	0x2000aec8
 8001f5c:	00000000 	.word	0x00000000

08001f60 <xTaskIncrementTick>:

    BaseType_t xTaskIncrementTick( void )
    {
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
      BaseType_t xSwitchRequired = pdFALSE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]

      uint8_t  preemptedTask = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	72fb      	strb	r3, [r7, #11]

      TCB_t *TcbTemp, *TcbTemp_noRel ;

      START_EXECUTION_TIME_MEASUREMENT();
 8001f6e:	4b94      	ldr	r3, [pc, #592]	; (80021c0 <xTaskIncrementTick+0x260>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a93      	ldr	r2, [pc, #588]	; (80021c0 <xTaskIncrementTick+0x260>)
 8001f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b92      	ldr	r3, [pc, #584]	; (80021c4 <xTaskIncrementTick+0x264>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a91      	ldr	r2, [pc, #580]	; (80021c4 <xTaskIncrementTick+0x264>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6013      	str	r3, [r2, #0]

      t_exec_Tick      = GET_EXEC_TIME_US();
 8001f86:	4b90      	ldr	r3, [pc, #576]	; (80021c8 <xTaskIncrementTick+0x268>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f92:	4b8e      	ldr	r3, [pc, #568]	; (80021cc <xTaskIncrementTick+0x26c>)
 8001f94:	edc3 7a00 	vstr	s15, [r3]

      if( ReconfigTimer )
 8001f98:	4b8d      	ldr	r3, [pc, #564]	; (80021d0 <xTaskIncrementTick+0x270>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <xTaskIncrementTick+0x54>
      {
    	  ReconfigTimer = 0;
 8001fa0:	4b8b      	ldr	r3, [pc, #556]	; (80021d0 <xTaskIncrementTick+0x270>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
    	  Sys_Enable_Peripherals_Clock();
 8001fa6:	f7fe fda1 	bl	8000aec <Sys_Enable_Peripherals_Clock>
    	  Sys_Configure_Clock_168MHz();
 8001faa:	f7fe fdbd 	bl	8000b28 <Sys_Configure_Clock_168MHz>
    	  SysTick_Config(configCPU_CLOCK_HZ / (1000) );
 8001fae:	4889      	ldr	r0, [pc, #548]	; (80021d4 <xTaskIncrementTick+0x274>)
 8001fb0:	f7ff fcb6 	bl	8001920 <SysTick_Config>


      /* Called by the portable layer each time a tick interrupt occurs.
      Increments the tick then checks to see if the new tick value will cause any
      tasks to be unblocked. */
      xTickCount++;
 8001fb4:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <xTaskIncrementTick+0x278>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	4a87      	ldr	r2, [pc, #540]	; (80021d8 <xTaskIncrementTick+0x278>)
 8001fbc:	6013      	str	r3, [r2, #0]
      GPIO_ClearOutput(0);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7ff fb60 	bl	8001684 <GPIO_ClearOutput>
//      GPIO_ClearOutput(1);

      /* Verify if EDF keep running successfully*/
      healthCheck();
 8001fc4:	f7ff ff54 	bl	8001e70 <healthCheck>

      if( xTickCount >= MsTcbEsTask->MsNextWakeTime )
 8001fc8:	4b84      	ldr	r3, [pc, #528]	; (80021dc <xTaskIncrementTick+0x27c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	4b82      	ldr	r3, [pc, #520]	; (80021d8 <xTaskIncrementTick+0x278>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d82b      	bhi.n	800202e <xTaskIncrementTick+0xce>
      {
    	  MsTcbEsTask->MsAbsDeadLine   =  MsTcbEsTask->MsNextWakeTime +MsTcbEsTask->MsRelDeadLine ;
 8001fd6:	4b81      	ldr	r3, [pc, #516]	; (80021dc <xTaskIncrementTick+0x27c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6959      	ldr	r1, [r3, #20]
 8001fdc:	4b7f      	ldr	r3, [pc, #508]	; (80021dc <xTaskIncrementTick+0x27c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	4b7e      	ldr	r3, [pc, #504]	; (80021dc <xTaskIncrementTick+0x27c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	440a      	add	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]
    	  MsTcbEsTask->MsNextWakeTime +=  MsTcbEsTask->MsPeriod;
 8001fea:	4b7c      	ldr	r3, [pc, #496]	; (80021dc <xTaskIncrementTick+0x27c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6959      	ldr	r1, [r3, #20]
 8001ff0:	4b7a      	ldr	r3, [pc, #488]	; (80021dc <xTaskIncrementTick+0x27c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	4b79      	ldr	r3, [pc, #484]	; (80021dc <xTaskIncrementTick+0x27c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	440a      	add	r2, r1
 8001ffc:	615a      	str	r2, [r3, #20]

    	  if(pxCurrentTCB->MsID !=0)
 8001ffe:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <xTaskIncrementTick+0x280>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	7f5b      	ldrb	r3, [r3, #29]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <xTaskIncrementTick+0xc6>
    	  {
			  rel_prmp(ListReady  , pxCurrentTCB);
 8002008:	4b75      	ldr	r3, [pc, #468]	; (80021e0 <xTaskIncrementTick+0x280>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	4875      	ldr	r0, [pc, #468]	; (80021e4 <xTaskIncrementTick+0x284>)
 8002010:	f000 fd68 	bl	8002ae4 <rel_prmp>

			  TcbToPxCurrent = MsTcbEsTask;
 8002014:	4b71      	ldr	r3, [pc, #452]	; (80021dc <xTaskIncrementTick+0x27c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a73      	ldr	r2, [pc, #460]	; (80021e8 <xTaskIncrementTick+0x288>)
 800201a:	6013      	str	r3, [r2, #0]

			  SwitchContexOp = TIMER_PREEMPTION;
 800201c:	4b73      	ldr	r3, [pc, #460]	; (80021ec <xTaskIncrementTick+0x28c>)
 800201e:	2202      	movs	r2, #2
 8002020:	701a      	strb	r2, [r3, #0]

			  xSwitchRequired=pdTRUE;
 8002022:	2301      	movs	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
    	  }
    	  EsTask_Idle = ES_TASK_NORMAL_MODE;
 8002026:	4b72      	ldr	r3, [pc, #456]	; (80021f0 <xTaskIncrementTick+0x290>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e139      	b.n	80022a2 <xTaskIncrementTick+0x342>
      }

      else
      {
    	  if( EsTask_Idle == ES_TASK_IDLE_MODE)
 800202e:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <xTaskIncrementTick+0x290>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d12a      	bne.n	800208c <xTaskIncrementTick+0x12c>
    	  {
        	  if(  ( xTickCount >= ListNotReady.Head->MsNextWakeTime ) && (ListNotReady.Qnt)  )
 8002036:	4b6f      	ldr	r3, [pc, #444]	; (80021f4 <xTaskIncrementTick+0x294>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	4b66      	ldr	r3, [pc, #408]	; (80021d8 <xTaskIncrementTick+0x278>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	f200 812e 	bhi.w	80022a2 <xTaskIncrementTick+0x342>
 8002046:	4b6b      	ldr	r3, [pc, #428]	; (80021f4 <xTaskIncrementTick+0x294>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8129 	beq.w	80022a2 <xTaskIncrementTick+0x342>
        	  {
        		  EsTask_Idle = 0;
 8002050:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <xTaskIncrementTick+0x290>)
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]

        		  /*Get head element in NotReadyList                               */
        		  TcbTemp = NOT_READY_LIST_REMOVE_HEAD( &ListNotReady  );
 8002056:	4867      	ldr	r0, [pc, #412]	; (80021f4 <xTaskIncrementTick+0x294>)
 8002058:	f001 f910 	bl	800327c <NOT_READY_LIST_REMOVE_HEAD>
 800205c:	6038      	str	r0, [r7, #0]

        		  TcbTemp->MsAbsDeadLine  =  TcbTemp->MsNextWakeTime +TcbTemp->MsRelDeadLine ;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	695a      	ldr	r2, [r3, #20]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	441a      	add	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	609a      	str	r2, [r3, #8]
        		  TcbTemp->MsNextWakeTime +=  TcbTemp->MsPeriod;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	441a      	add	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	615a      	str	r2, [r3, #20]

				  /******************************************************************************
				   *                            rel_prmp();
				   *                            note: energy task preemption !
				   *****************************************************************************/
				  TcbToPxCurrent = TcbTemp;
 800207a:	4a5b      	ldr	r2, [pc, #364]	; (80021e8 <xTaskIncrementTick+0x288>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6013      	str	r3, [r2, #0]

				  SwitchContexOp  = TIMER_PREEMPTION;
 8002080:	4b5a      	ldr	r3, [pc, #360]	; (80021ec <xTaskIncrementTick+0x28c>)
 8002082:	2202      	movs	r2, #2
 8002084:	701a      	strb	r2, [r3, #0]
				  xSwitchRequired = pdTRUE;
 8002086:	2301      	movs	r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	e10a      	b.n	80022a2 <xTaskIncrementTick+0x342>
        	  }
    	  }


    	  else
    	  if(  ( xTickCount >= ListNotReady.Head->MsNextWakeTime ) && (ListNotReady.Qnt)  )
 800208c:	4b59      	ldr	r3, [pc, #356]	; (80021f4 <xTaskIncrementTick+0x294>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <xTaskIncrementTick+0x278>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	f200 8103 	bhi.w	80022a2 <xTaskIncrementTick+0x342>
 800209c:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <xTaskIncrementTick+0x294>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80fe 	beq.w	80022a2 <xTaskIncrementTick+0x342>
    	  {
    		  /*Perform Scan over "NotReadyList" to find tasks that their release time has arrived */
    		  while(  xTickCount >= ListNotReady.Head->MsNextWakeTime  )
 80020a6:	e0f4      	b.n	8002292 <xTaskIncrementTick+0x332>
    		  {
    			  ReleaseJobCounter++;
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <xTaskIncrementTick+0x298>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <xTaskIncrementTick+0x298>)
 80020b0:	6013      	str	r3, [r2, #0]

    			  if (!preemptedTask)
 80020b2:	7afb      	ldrb	r3, [r7, #11]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f040 80a5 	bne.w	8002204 <xTaskIncrementTick+0x2a4>
    			  {
    				  t_ReleaseJob     = GET_EXEC_TIME_US();
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <xTaskIncrementTick+0x268>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	ee07 3a90 	vmov	s15, r3
 80020c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c6:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <xTaskIncrementTick+0x29c>)
 80020c8:	edc3 7a00 	vstr	s15, [r3]

    				  /*Get head element in NotReadyList                               */
    				  TcbTemp = NOT_READY_LIST_REMOVE_HEAD( &ListNotReady  );
 80020cc:	4849      	ldr	r0, [pc, #292]	; (80021f4 <xTaskIncrementTick+0x294>)
 80020ce:	f001 f8d5 	bl	800327c <NOT_READY_LIST_REMOVE_HEAD>
 80020d2:	6038      	str	r0, [r7, #0]

    				  t_ReleaseJob =  0.00595*(GET_EXEC_TIME_US() - t_ReleaseJob );
 80020d4:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <xTaskIncrementTick+0x268>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020e0:	4b46      	ldr	r3, [pc, #280]	; (80021fc <xTaskIncrementTick+0x29c>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ea:	ee17 0a90 	vmov	r0, s15
 80020ee:	f7fe f9d3 	bl	8000498 <__aeabi_f2d>
 80020f2:	a331      	add	r3, pc, #196	; (adr r3, 80021b8 <xTaskIncrementTick+0x258>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	f7fe fa26 	bl	8000548 <__aeabi_dmul>
 80020fc:	4603      	mov	r3, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	4618      	mov	r0, r3
 8002102:	4621      	mov	r1, r4
 8002104:	f7fe fc32 	bl	800096c <__aeabi_d2f>
 8002108:	4602      	mov	r2, r0
 800210a:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <xTaskIncrementTick+0x29c>)
 800210c:	601a      	str	r2, [r3, #0]

    				  Acum_ReleaseJob += t_ReleaseJob;
 800210e:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <xTaskIncrementTick+0x2a0>)
 8002110:	ed93 7a00 	vldr	s14, [r3]
 8002114:	4b39      	ldr	r3, [pc, #228]	; (80021fc <xTaskIncrementTick+0x29c>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211e:	4b38      	ldr	r3, [pc, #224]	; (8002200 <xTaskIncrementTick+0x2a0>)
 8002120:	edc3 7a00 	vstr	s15, [r3]


    				  /*Update job parameters                                          */
    				  //            TcbTemp->MsAbsDeadLine  +=  TcbTemp->MsRelDeadLine;
    				  //          TcbTemp->MsNextWakeTime +=  TcbTemp->MsPeriod;
    				  TcbTemp->MsAbsDeadLine  =  TcbTemp->MsNextWakeTime +TcbTemp->MsRelDeadLine ;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	441a      	add	r2, r3
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	609a      	str	r2, [r3, #8]
    				  TcbTemp->MsNextWakeTime +=  TcbTemp->MsPeriod;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	441a      	add	r2, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	615a      	str	r2, [r3, #20]


    				  /*Check if newly job have high priority then current job in running state*/
    				  if(TcbTemp->MsAbsDeadLine < pxCurrentTCB->MsAbsDeadLine && preemptedTask==0)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <xTaskIncrementTick+0x280>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	429a      	cmp	r2, r3
 800214c:	d22f      	bcs.n	80021ae <xTaskIncrementTick+0x24e>
 800214e:	7afb      	ldrb	r3, [r7, #11]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d12c      	bne.n	80021ae <xTaskIncrementTick+0x24e>
    				  {
    					  /*Set flag that demonstrate preemption has occurred in last
    					   * iterration */
    					  preemptedTask = 1;
 8002154:	2301      	movs	r3, #1
 8002156:	72fb      	strb	r3, [r7, #11]
    					  /*
    					   * This check is needs to avoid concurrency interrupts, because when task end its job
    					   * the idle remove event is called and in this moment the tick interrupt can be called too.
    					   * That situation is dangerous to system execution.
    					   * */
    					  if( SwitchContexOp == END_JOB )
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <xTaskIncrementTick+0x28c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d112      	bne.n	8002186 <xTaskIncrementTick+0x226>
    					  {
    						  /* if has a pendent end job context switch, the scheduler have to verify how
    						   * job has higher priority */

    						  /*How job has higher priority? END_JOB event (TcbToPxCurrent) or release newly job (tcbTemp) */
    						  if(TcbTemp->MsAbsDeadLine < TcbToPxCurrent->MsAbsDeadLine)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <xTaskIncrementTick+0x288>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	d21c      	bcs.n	80021a8 <xTaskIncrementTick+0x248>
    						  {
    							  /******************************************************************************
    							   *                            rel_prmp();
    							   *                            note: "normal" job is running !
    							   *****************************************************************************/
    							  rel_prmp(ListReady  , TcbToPxCurrent);
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <xTaskIncrementTick+0x288>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4619      	mov	r1, r3
 8002174:	481b      	ldr	r0, [pc, #108]	; (80021e4 <xTaskIncrementTick+0x284>)
 8002176:	f000 fcb5 	bl	8002ae4 <rel_prmp>

    							  TcbToPxCurrent = TcbTemp;
 800217a:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <xTaskIncrementTick+0x288>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6013      	str	r3, [r2, #0]

    							  xSwitchRequired = pdTRUE;
 8002180:	2301      	movs	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	e010      	b.n	80021a8 <xTaskIncrementTick+0x248>
    						  /******************************************************************************
    						   *                            rel_prmp();
    						   *                            note: Idle is running !
    						   *****************************************************************************/

    						  if(pxCurrentTCB->MsID != 0 )
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <xTaskIncrementTick+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	7f5b      	ldrb	r3, [r3, #29]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <xTaskIncrementTick+0x23c>
    							  rel_prmp(ListReady  , pxCurrentTCB);
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <xTaskIncrementTick+0x280>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	4813      	ldr	r0, [pc, #76]	; (80021e4 <xTaskIncrementTick+0x284>)
 8002198:	f000 fca4 	bl	8002ae4 <rel_prmp>

    						  TcbToPxCurrent = TcbTemp;
 800219c:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <xTaskIncrementTick+0x288>)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6013      	str	r3, [r2, #0]

    						  SwitchContexOp = TIMER_PREEMPTION;
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <xTaskIncrementTick+0x28c>)
 80021a4:	2202      	movs	r2, #2
 80021a6:	701a      	strb	r2, [r3, #0]
    					  }
    					  xSwitchRequired=pdTRUE;
 80021a8:	2301      	movs	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e071      	b.n	8002292 <xTaskIncrementTick+0x332>
    				  {
    					  /******************************************************************************
    					   *                            rel_no_prmp();
    					   *
    					   *****************************************************************************/
    					  rel_no_prmp(ListReady, TcbTemp);
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <xTaskIncrementTick+0x284>)
 80021b2:	f000 fd0b 	bl	8002bcc <rel_no_prmp>
 80021b6:	e06c      	b.n	8002292 <xTaskIncrementTick+0x332>
 80021b8:	f6944674 	.word	0xf6944674
 80021bc:	3f785f06 	.word	0x3f785f06
 80021c0:	e000edfc 	.word	0xe000edfc
 80021c4:	e0001000 	.word	0xe0001000
 80021c8:	e0001004 	.word	0xe0001004
 80021cc:	200001c0 	.word	0x200001c0
 80021d0:	200001cb 	.word	0x200001cb
 80021d4:	00029040 	.word	0x00029040
 80021d8:	2000049c 	.word	0x2000049c
 80021dc:	2000cbf8 	.word	0x2000cbf8
 80021e0:	200001cc 	.word	0x200001cc
 80021e4:	2000c738 	.word	0x2000c738
 80021e8:	2000cc10 	.word	0x2000cc10
 80021ec:	200001c8 	.word	0x200001c8
 80021f0:	200001ca 	.word	0x200001ca
 80021f4:	2000cbfc 	.word	0x2000cbfc
 80021f8:	200004c0 	.word	0x200004c0
 80021fc:	2000aed0 	.word	0x2000aed0
 8002200:	2000aedc 	.word	0x2000aedc
    				  /******************************************************************************
    				   *                            rel_no_prmp();
    				   *
    				   *****************************************************************************/

    				  t_ReleaseJob     = GET_EXEC_TIME_US();
 8002204:	4b40      	ldr	r3, [pc, #256]	; (8002308 <xTaskIncrementTick+0x3a8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002210:	4b3e      	ldr	r3, [pc, #248]	; (800230c <xTaskIncrementTick+0x3ac>)
 8002212:	edc3 7a00 	vstr	s15, [r3]

    				  /*Get head element in NotReadyList                               */
    				  TcbTemp_noRel = NOT_READY_LIST_REMOVE_HEAD( &ListNotReady  );
 8002216:	483e      	ldr	r0, [pc, #248]	; (8002310 <xTaskIncrementTick+0x3b0>)
 8002218:	f001 f830 	bl	800327c <NOT_READY_LIST_REMOVE_HEAD>
 800221c:	6078      	str	r0, [r7, #4]

    				  t_ReleaseJob =  0.00595*(GET_EXEC_TIME_US() - t_ReleaseJob );
 800221e:	4b3a      	ldr	r3, [pc, #232]	; (8002308 <xTaskIncrementTick+0x3a8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800222a:	4b38      	ldr	r3, [pc, #224]	; (800230c <xTaskIncrementTick+0x3ac>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002234:	ee17 0a90 	vmov	r0, s15
 8002238:	f7fe f92e 	bl	8000498 <__aeabi_f2d>
 800223c:	a330      	add	r3, pc, #192	; (adr r3, 8002300 <xTaskIncrementTick+0x3a0>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	f7fe f981 	bl	8000548 <__aeabi_dmul>
 8002246:	4603      	mov	r3, r0
 8002248:	460c      	mov	r4, r1
 800224a:	4618      	mov	r0, r3
 800224c:	4621      	mov	r1, r4
 800224e:	f7fe fb8d 	bl	800096c <__aeabi_d2f>
 8002252:	4602      	mov	r2, r0
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <xTaskIncrementTick+0x3ac>)
 8002256:	601a      	str	r2, [r3, #0]

    				  Acum_ReleaseJob += t_ReleaseJob;
 8002258:	4b2e      	ldr	r3, [pc, #184]	; (8002314 <xTaskIncrementTick+0x3b4>)
 800225a:	ed93 7a00 	vldr	s14, [r3]
 800225e:	4b2b      	ldr	r3, [pc, #172]	; (800230c <xTaskIncrementTick+0x3ac>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <xTaskIncrementTick+0x3b4>)
 800226a:	edc3 7a00 	vstr	s15, [r3]

    				  //            TcbTemp_noRel->MsAbsDeadLine +=  TcbTemp_noRel->MsRelDeadLine;
    				  //
    				  //            TcbTemp_noRel->MsNextWakeTime += TcbTemp_noRel->MsPeriod;

    				  TcbTemp_noRel->MsAbsDeadLine  =  TcbTemp_noRel->MsNextWakeTime +TcbTemp_noRel->MsRelDeadLine ;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	441a      	add	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
    				  TcbTemp_noRel->MsNextWakeTime +=  TcbTemp_noRel->MsPeriod;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	441a      	add	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	615a      	str	r2, [r3, #20]


    				  rel_no_prmp(ListReady, TcbTemp_noRel);
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4822      	ldr	r0, [pc, #136]	; (8002318 <xTaskIncrementTick+0x3b8>)
 800228e:	f000 fc9d 	bl	8002bcc <rel_no_prmp>
    		  while(  xTickCount >= ListNotReady.Head->MsNextWakeTime  )
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <xTaskIncrementTick+0x3b0>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <xTaskIncrementTick+0x3bc>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	f67f af03 	bls.w	80020a8 <xTaskIncrementTick+0x148>
    			  }
    		  }
    	  }
      }
      t_exec_Tick =  0.00595*(GET_EXEC_TIME_US() - t_exec_Tick );
 80022a2:	4b19      	ldr	r3, [pc, #100]	; (8002308 <xTaskIncrementTick+0x3a8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <xTaskIncrementTick+0x3c0>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b8:	ee17 0a90 	vmov	r0, s15
 80022bc:	f7fe f8ec 	bl	8000498 <__aeabi_f2d>
 80022c0:	a30f      	add	r3, pc, #60	; (adr r3, 8002300 <xTaskIncrementTick+0x3a0>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f7fe f93f 	bl	8000548 <__aeabi_dmul>
 80022ca:	4603      	mov	r3, r0
 80022cc:	460c      	mov	r4, r1
 80022ce:	4618      	mov	r0, r3
 80022d0:	4621      	mov	r1, r4
 80022d2:	f7fe fb4b 	bl	800096c <__aeabi_d2f>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <xTaskIncrementTick+0x3c0>)
 80022da:	601a      	str	r2, [r3, #0]

      Avarege_exec_Tick += t_exec_Tick;
 80022dc:	4b11      	ldr	r3, [pc, #68]	; (8002324 <xTaskIncrementTick+0x3c4>)
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <xTaskIncrementTick+0x3c0>)
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ec:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <xTaskIncrementTick+0x3c4>)
 80022ee:	edc3 7a00 	vstr	s15, [r3]

      return xSwitchRequired;
 80022f2:	68fb      	ldr	r3, [r7, #12]

    }
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	f3af 8000 	nop.w
 8002300:	f6944674 	.word	0xf6944674
 8002304:	3f785f06 	.word	0x3f785f06
 8002308:	e0001004 	.word	0xe0001004
 800230c:	2000aed0 	.word	0x2000aed0
 8002310:	2000cbfc 	.word	0x2000cbfc
 8002314:	2000aedc 	.word	0x2000aedc
 8002318:	2000c738 	.word	0x2000c738
 800231c:	2000049c 	.word	0x2000049c
 8002320:	200001c0 	.word	0x200001c0
 8002324:	2000b520 	.word	0x2000b520

08002328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
    /*-----------------------------------------------------------*/

    void vTaskSwitchContext( void )
    {
 8002328:	b598      	push	{r3, r4, r7, lr}
 800232a:	af00      	add	r7, sp, #0
      QntCs++;
 800232c:	4b48      	ldr	r3, [pc, #288]	; (8002450 <vTaskSwitchContext+0x128>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	3301      	adds	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	4b46      	ldr	r3, [pc, #280]	; (8002450 <vTaskSwitchContext+0x128>)
 8002336:	801a      	strh	r2, [r3, #0]
      GPIO_ClearOutput(0);
 8002338:	2000      	movs	r0, #0
 800233a:	f7ff f9a3 	bl	8001684 <GPIO_ClearOutput>
      if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800233e:	4b45      	ldr	r3, [pc, #276]	; (8002454 <vTaskSwitchContext+0x12c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <vTaskSwitchContext+0x26>
      {
        /* The scheduler is currently suspended - do not allow a context
switch. */
        xYieldPending = pdTRUE;
 8002346:	4b44      	ldr	r3, [pc, #272]	; (8002458 <vTaskSwitchContext+0x130>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
          _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
        }
#endif /* configUSE_NEWLIB_REENTRANT */
      }
    }
 800234c:	e074      	b.n	8002438 <vTaskSwitchContext+0x110>
        xYieldPending = pdFALSE;
 800234e:	4b42      	ldr	r3, [pc, #264]	; (8002458 <vTaskSwitchContext+0x130>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
        if(SwitchContexOp == TIMER_PREEMPTION )
 8002354:	4b41      	ldr	r3, [pc, #260]	; (800245c <vTaskSwitchContext+0x134>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d117      	bne.n	800238c <vTaskSwitchContext+0x64>
           pxCurrentTCB = TcbToPxCurrent;
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <vTaskSwitchContext+0x138>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a40      	ldr	r2, [pc, #256]	; (8002464 <vTaskSwitchContext+0x13c>)
 8002362:	6013      	str	r3, [r2, #0]
           Acumtime_exec_CS += 0.7;
 8002364:	4b40      	ldr	r3, [pc, #256]	; (8002468 <vTaskSwitchContext+0x140>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f895 	bl	8000498 <__aeabi_f2d>
 800236e:	a334      	add	r3, pc, #208	; (adr r3, 8002440 <vTaskSwitchContext+0x118>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fd ff32 	bl	80001dc <__adddf3>
 8002378:	4603      	mov	r3, r0
 800237a:	460c      	mov	r4, r1
 800237c:	4618      	mov	r0, r3
 800237e:	4621      	mov	r1, r4
 8002380:	f7fe faf4 	bl	800096c <__aeabi_d2f>
 8002384:	4602      	mov	r2, r0
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <vTaskSwitchContext+0x140>)
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	e03f      	b.n	800240c <vTaskSwitchContext+0xe4>
        else if (SwitchContexOp == END_JOB )
 800238c:	4b33      	ldr	r3, [pc, #204]	; (800245c <vTaskSwitchContext+0x134>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d13b      	bne.n	800240c <vTaskSwitchContext+0xe4>
          if(TcbToPxCurrent != NULL)
 8002394:	4b32      	ldr	r3, [pc, #200]	; (8002460 <vTaskSwitchContext+0x138>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d004      	beq.n	80023a6 <vTaskSwitchContext+0x7e>
            pxCurrentTCB = TcbToPxCurrent;
 800239c:	4b30      	ldr	r3, [pc, #192]	; (8002460 <vTaskSwitchContext+0x138>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a30      	ldr	r2, [pc, #192]	; (8002464 <vTaskSwitchContext+0x13c>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e00a      	b.n	80023bc <vTaskSwitchContext+0x94>
        	  EsTask_Idle = ES_TASK_IDLE_MODE;
 80023a6:	4b31      	ldr	r3, [pc, #196]	; (800246c <vTaskSwitchContext+0x144>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
        	  TcbToPxCurrent = MsTcbEsTask;
 80023ac:	4b30      	ldr	r3, [pc, #192]	; (8002470 <vTaskSwitchContext+0x148>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2b      	ldr	r2, [pc, #172]	; (8002460 <vTaskSwitchContext+0x138>)
 80023b2:	6013      	str	r3, [r2, #0]
        	  pxCurrentTCB = TcbToPxCurrent;
 80023b4:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <vTaskSwitchContext+0x138>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <vTaskSwitchContext+0x13c>)
 80023ba:	6013      	str	r3, [r2, #0]
          time_exec_CS = 0.00595*(GET_EXEC_TIME_US() - time_exec_CS )  ;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <vTaskSwitchContext+0x14c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <vTaskSwitchContext+0x150>)
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023d2:	ee17 0a90 	vmov	r0, s15
 80023d6:	f7fe f85f 	bl	8000498 <__aeabi_f2d>
 80023da:	a31b      	add	r3, pc, #108	; (adr r3, 8002448 <vTaskSwitchContext+0x120>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	f7fe f8b2 	bl	8000548 <__aeabi_dmul>
 80023e4:	4603      	mov	r3, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	4618      	mov	r0, r3
 80023ea:	4621      	mov	r1, r4
 80023ec:	f7fe fabe 	bl	800096c <__aeabi_d2f>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <vTaskSwitchContext+0x150>)
 80023f4:	601a      	str	r2, [r3, #0]
          Acumtime_exec_CS +=time_exec_CS;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <vTaskSwitchContext+0x140>)
 80023f8:	ed93 7a00 	vldr	s14, [r3]
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <vTaskSwitchContext+0x150>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <vTaskSwitchContext+0x140>)
 8002408:	edc3 7a00 	vstr	s15, [r3]
        SwitchContexOp      = NONE;
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <vTaskSwitchContext+0x134>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
        Ms_currentTaskIndex = pxCurrentTCB->MsID;
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <vTaskSwitchContext+0x13c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	7f5a      	ldrb	r2, [r3, #29]
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <vTaskSwitchContext+0x154>)
 800241a:	701a      	strb	r2, [r3, #0]
        traceTASK_SWITCHED_IN();
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <vTaskSwitchContext+0x13c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <vTaskSwitchContext+0x158>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d102      	bne.n	800242e <vTaskSwitchContext+0x106>
 8002428:	f002 fcc2 	bl	8004db0 <SEGGER_SYSVIEW_OnIdle>
    }
 800242c:	e004      	b.n	8002438 <vTaskSwitchContext+0x110>
        traceTASK_SWITCHED_IN();
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <vTaskSwitchContext+0x13c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fd1c 	bl	8004e70 <SEGGER_SYSVIEW_OnTaskStartExec>
    }
 8002438:	bf00      	nop
 800243a:	bd98      	pop	{r3, r4, r7, pc}
 800243c:	f3af 8000 	nop.w
 8002440:	66666666 	.word	0x66666666
 8002444:	3fe66666 	.word	0x3fe66666
 8002448:	f6944674 	.word	0xf6944674
 800244c:	3f785f06 	.word	0x3f785f06
 8002450:	200001c6 	.word	0x200001c6
 8002454:	200004bc 	.word	0x200004bc
 8002458:	200004ac 	.word	0x200004ac
 800245c:	200001c8 	.word	0x200001c8
 8002460:	2000cc10 	.word	0x2000cc10
 8002464:	200001cc 	.word	0x200001cc
 8002468:	200001bc 	.word	0x200001bc
 800246c:	200001ca 	.word	0x200001ca
 8002470:	2000cbf8 	.word	0x2000cbf8
 8002474:	e0001004 	.word	0xe0001004
 8002478:	200001b8 	.word	0x200001b8
 800247c:	2000c734 	.word	0x2000c734
 8002480:	200004b8 	.word	0x200004b8

08002484 <prvIdleTask>:
     *
     * void prvIdleTask( void *pvParameters );
     *
     */
    static portTASK_FUNCTION( prvIdleTask, pvParameters )
				    {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]

      for( ;; )
      {
        /* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800248c:	f000 f854 	bl	8002538 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
          if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <prvIdleTask+0x2c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d907      	bls.n	80024a8 <prvIdleTask+0x24>
          {
            taskYIELD();
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <prvIdleTask+0x30>)
 800249a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	f3bf 8f6f 	isb	sy
          /* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
          vApplicationIdleHook();
 80024a8:	f002 ffd2 	bl	8005450 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80024ac:	e7ee      	b.n	800248c <prvIdleTask+0x8>
 80024ae:	bf00      	nop
 80024b0:	200001d0 	.word	0x200001d0
 80024b4:	e000ed04 	.word	0xe000ed04

080024b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
    /*-----------------------------------------------------------*/

    static void prvInitialiseTaskLists( void )
    {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
      UBaseType_t uxPriority;

      for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	e00c      	b.n	80024de <prvInitialiseTaskLists+0x26>
      {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <prvInitialiseTaskLists+0x60>)
 80024d0:	4413      	add	r3, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f97e 	bl	80017d4 <vListInitialise>
      for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b1d      	cmp	r3, #29
 80024e2:	d9ef      	bls.n	80024c4 <prvInitialiseTaskLists+0xc>
      }

      vListInitialise( &xDelayedTaskList1 );
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <prvInitialiseTaskLists+0x64>)
 80024e6:	f7ff f975 	bl	80017d4 <vListInitialise>
      vListInitialise( &xDelayedTaskList2 );
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <prvInitialiseTaskLists+0x68>)
 80024ec:	f7ff f972 	bl	80017d4 <vListInitialise>
      vListInitialise( &xPendingReadyList );
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <prvInitialiseTaskLists+0x6c>)
 80024f2:	f7ff f96f 	bl	80017d4 <vListInitialise>

#if ( INCLUDE_vTaskDelete == 1 )
      {
        vListInitialise( &xTasksWaitingTermination );
 80024f6:	480c      	ldr	r0, [pc, #48]	; (8002528 <prvInitialiseTaskLists+0x70>)
 80024f8:	f7ff f96c 	bl	80017d4 <vListInitialise>
      }
#endif /* INCLUDE_vTaskDelete */

#if ( INCLUDE_vTaskSuspend == 1 )
      {
        vListInitialise( &xSuspendedTaskList );
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <prvInitialiseTaskLists+0x74>)
 80024fe:	f7ff f969 	bl	80017d4 <vListInitialise>
      }
#endif /* INCLUDE_vTaskSuspend */

      /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
      pxDelayedTaskList = &xDelayedTaskList1;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <prvInitialiseTaskLists+0x78>)
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <prvInitialiseTaskLists+0x64>)
 8002506:	601a      	str	r2, [r3, #0]
      pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <prvInitialiseTaskLists+0x7c>)
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <prvInitialiseTaskLists+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
    }
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200001d0 	.word	0x200001d0
 800251c:	20000428 	.word	0x20000428
 8002520:	2000043c 	.word	0x2000043c
 8002524:	20000458 	.word	0x20000458
 8002528:	2000046c 	.word	0x2000046c
 800252c:	20000484 	.word	0x20000484
 8002530:	20000450 	.word	0x20000450
 8002534:	20000454 	.word	0x20000454

08002538 <prvCheckTasksWaitingTermination>:
    /*-----------------------------------------------------------*/

    static void prvCheckTasksWaitingTermination( void )
    {
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
      {
        TCB_t *pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800253e:	e019      	b.n	8002574 <prvCheckTasksWaitingTermination+0x3c>
        {
          taskENTER_CRITICAL();
 8002540:	f001 f94c 	bl	80037dc <vPortEnterCritical>
          {
            pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <prvCheckTasksWaitingTermination+0x4c>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	607b      	str	r3, [r7, #4]
            ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3324      	adds	r3, #36	; 0x24
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff f990 	bl	8001876 <uxListRemove>
            --uxCurrentNumberOfTasks;
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <prvCheckTasksWaitingTermination+0x50>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <prvCheckTasksWaitingTermination+0x50>)
 800255e:	6013      	str	r3, [r2, #0]
            --uxDeletedTasksWaitingCleanUp;
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <prvCheckTasksWaitingTermination+0x54>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3b01      	subs	r3, #1
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <prvCheckTasksWaitingTermination+0x54>)
 8002568:	6013      	str	r3, [r2, #0]
          }
          taskEXIT_CRITICAL();
 800256a:	f001 f965 	bl	8003838 <vPortExitCritical>

          prvDeleteTCB( pxTCB );
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f80e 	bl	8002590 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <prvCheckTasksWaitingTermination+0x54>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e1      	bne.n	8002540 <prvCheckTasksWaitingTermination+0x8>
        }
      }
#endif /* INCLUDE_vTaskDelete */
    }
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000046c 	.word	0x2000046c
 8002588:	20000498 	.word	0x20000498
 800258c:	20000480 	.word	0x20000480

08002590 <prvDeleteTCB>:
    /*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t *pxTCB )
    {
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
      {
        /* The task can only have been allocated dynamically - free both
			the stack and TCB. */
        vPortFree( pxTCB->pxStack );
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259c:	4618      	mov	r0, r3
 800259e:	f001 faf5 	bl	8003b8c <vPortFree>
        vPortFree( pxTCB );
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f001 faf2 	bl	8003b8c <vPortFree>
          configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
          mtCOVERAGE_TEST_MARKER();
        }
      }
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
    /*-----------------------------------------------------------*/

    static void prvResetNextTaskUnblockTime( void )
    {
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
      TCB_t *pxTCB;

      if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <prvResetNextTaskUnblockTime+0x38>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <prvResetNextTaskUnblockTime+0x1a>
      {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80025c0:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <prvResetNextTaskUnblockTime+0x3c>)
 80025c2:	f04f 32ff 	mov.w	r2, #4294967295
 80025c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
        ( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
      }
    }
 80025c8:	e008      	b.n	80025dc <prvResetNextTaskUnblockTime+0x2c>
        ( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <prvResetNextTaskUnblockTime+0x38>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	607b      	str	r3, [r7, #4]
        xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <prvResetNextTaskUnblockTime+0x3c>)
 80025da:	6013      	str	r3, [r2, #0]
    }
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	20000450 	.word	0x20000450
 80025ec:	200004b4 	.word	0x200004b4

080025f0 <MsFreeRTOS_CreateTask>:

      uint32_t    MsPeriod                        ,
      uint32_t    MsRelDeadLine                   ,  /*Relative deadline*/
      uint32_t    MsWcet                             /*Worst case execution time of task */
    )
    {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af04      	add	r7, sp, #16
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	4613      	mov	r3, r2
 80025fe:	80fb      	strh	r3, [r7, #6]
				  the TCB then the stack. */

      StackType_t *pxStack;

      /* Allocate space for the stack used by the task being created. */
      pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4618      	mov	r0, r3
 8002606:	f001 f9ff 	bl	8003a08 <pvPortMalloc>
 800260a:	6178      	str	r0, [r7, #20]

      if( pxStack != NULL )
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00e      	beq.n	8002630 <MsFreeRTOS_CreateTask+0x40>
      {
        /* Allocate space for the TCB. */
        pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002612:	207c      	movs	r0, #124	; 0x7c
 8002614:	f001 f9f8 	bl	8003a08 <pvPortMalloc>
 8002618:	61f8      	str	r0, [r7, #28]

        if( pxNewTCB != NULL )
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <MsFreeRTOS_CreateTask+0x38>
        {
          /* Store the stack location in the TCB. */
          pxNewTCB->pxStack = pxStack;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	651a      	str	r2, [r3, #80]	; 0x50
 8002626:	e005      	b.n	8002634 <MsFreeRTOS_CreateTask+0x44>
        }
        else
        {
          /* The stack cannot be used as the TCB was not created.  Free
				     it again. */
          vPortFree( pxStack );
 8002628:	6978      	ldr	r0, [r7, #20]
 800262a:	f001 faaf 	bl	8003b8c <vPortFree>
 800262e:	e001      	b.n	8002634 <MsFreeRTOS_CreateTask+0x44>
        }
      }
      else
      {
        pxNewTCB = NULL;
 8002630:	2300      	movs	r3, #0
 8002632:	61fb      	str	r3, [r7, #28]
      }


      if( pxNewTCB != NULL )
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d03c      	beq.n	80026b4 <MsFreeRTOS_CreateTask+0xc4>
      {
        prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800263a:	88fa      	ldrh	r2, [r7, #6]
 800263c:	2300      	movs	r3, #0
 800263e:	9303      	str	r3, [sp, #12]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	9302      	str	r3, [sp, #8]
 8002644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff f9c8 	bl	80019e6 <prvInitialiseNewTask>
        prvAddNewTaskToReadyList( pxNewTCB );
 8002656:	69f8      	ldr	r0, [r7, #28]
 8002658:	f7ff fa4c 	bl	8001af4 <prvAddNewTaskToReadyList>

        //
        pxNewTCB->MsPeriod        = MsPeriod     ;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002660:	605a      	str	r2, [r3, #4]
        pxNewTCB->MsRelDeadLine   = MsRelDeadLine;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002666:	60da      	str	r2, [r3, #12]
        pxNewTCB->MsWcet          = MsWcet       ;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800266c:	611a      	str	r2, [r3, #16]
        pxNewTCB->MsEnable        = pdTRUE       ;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	2201      	movs	r2, #1
 8002672:	771a      	strb	r2, [r3, #28]
        pxNewTCB->MsAbsDeadLine   = MsRelDeadLine;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002678:	609a      	str	r2, [r3, #8]
        pxNewTCB->MsID            = taskQnt      ;
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <MsFreeRTOS_CreateTask+0xd4>)
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	775a      	strb	r2, [r3, #29]
        pxNewTCB->MsNumberExecJob = 0            ;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2200      	movs	r2, #0
 8002686:	621a      	str	r2, [r3, #32]
        pxNewTCB->MsNextWakeTime  = pxNewTCB->MsPeriod;
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	615a      	str	r2, [r3, #20]


        MsArrayTCB[taskQnt++] = pxNewTCB;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <MsFreeRTOS_CreateTask+0xd4>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	b2d1      	uxtb	r1, r2
 8002698:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <MsFreeRTOS_CreateTask+0xd4>)
 800269a:	7011      	strb	r1, [r2, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <MsFreeRTOS_CreateTask+0xd8>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

        rel_no_prmp(ListReady, pxNewTCB);
 80026a6:	69f9      	ldr	r1, [r7, #28]
 80026a8:	4808      	ldr	r0, [pc, #32]	; (80026cc <MsFreeRTOS_CreateTask+0xdc>)
 80026aa:	f000 fa8f 	bl	8002bcc <rel_no_prmp>

        xReturn = pdPASS;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	e002      	b.n	80026ba <MsFreeRTOS_CreateTask+0xca>
      }
      else
      {
        xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
 80026b8:	61bb      	str	r3, [r7, #24]
      }

      return xReturn;
 80026ba:	69bb      	ldr	r3, [r7, #24]
    }
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	200001c9 	.word	0x200001c9
 80026c8:	2000c524 	.word	0x2000c524
 80026cc:	2000c738 	.word	0x2000c738

080026d0 <MsFreeRTOS_CreateEnergySavingTask>:

          uint32_t    MsPeriod                        ,
          uint32_t    MsRelDeadLine                   ,  /*Relative deadline*/
          uint32_t    MsWcet                             /*Worst case execution time of task */
        )
        {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af04      	add	r7, sp, #16
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	460b      	mov	r3, r1
 80026de:	817b      	strh	r3, [r7, #10]
    				  does not grow into the TCB.  Likewise if the stack grows up then allocate
    				  the TCB then the stack. */

          StackType_t *pxStack;

          EsTaskCreated = 1;
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <MsFreeRTOS_CreateEnergySavingTask+0xd4>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	701a      	strb	r2, [r3, #0]

          UBaseType_t uxPriority = 2;
 80026e6:	2302      	movs	r3, #2
 80026e8:	617b      	str	r3, [r7, #20]

          /* Allocate space for the stack used by the task being created. */
          pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f98a 	bl	8003a08 <pvPortMalloc>
 80026f4:	6138      	str	r0, [r7, #16]

          if( pxStack != NULL )
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00e      	beq.n	800271a <MsFreeRTOS_CreateEnergySavingTask+0x4a>
          {
            /* Allocate space for the TCB. */
            pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026fc:	207c      	movs	r0, #124	; 0x7c
 80026fe:	f001 f983 	bl	8003a08 <pvPortMalloc>
 8002702:	61f8      	str	r0, [r7, #28]

            if( pxNewTCB != NULL )
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <MsFreeRTOS_CreateEnergySavingTask+0x42>
            {
              /* Store the stack location in the TCB. */
              pxNewTCB->pxStack = pxStack;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	651a      	str	r2, [r3, #80]	; 0x50
 8002710:	e005      	b.n	800271e <MsFreeRTOS_CreateEnergySavingTask+0x4e>
            }
            else
            {
              /* The stack cannot be used as the TCB was not created.  Free
    				     it again. */
              vPortFree( pxStack );
 8002712:	6938      	ldr	r0, [r7, #16]
 8002714:	f001 fa3a 	bl	8003b8c <vPortFree>
 8002718:	e001      	b.n	800271e <MsFreeRTOS_CreateEnergySavingTask+0x4e>
            }
          }
          else
          {
            pxNewTCB = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
          }


          if( pxNewTCB != NULL )
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d036      	beq.n	8002792 <MsFreeRTOS_CreateEnergySavingTask+0xc2>
          {
            prvInitialiseNewTask( Es_Func, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002724:	897a      	ldrh	r2, [r7, #10]
 8002726:	2300      	movs	r3, #0
 8002728:	9303      	str	r3, [sp, #12]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	9302      	str	r3, [sp, #8]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	481b      	ldr	r0, [pc, #108]	; (80027a8 <MsFreeRTOS_CreateEnergySavingTask+0xd8>)
 800273c:	f7ff f953 	bl	80019e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002740:	69f8      	ldr	r0, [r7, #28]
 8002742:	f7ff f9d7 	bl	8001af4 <prvAddNewTaskToReadyList>

            //
            pxNewTCB->MsPeriod        = MsPeriod     ;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800274a:	605a      	str	r2, [r3, #4]
            pxNewTCB->MsRelDeadLine   = MsRelDeadLine;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002750:	60da      	str	r2, [r3, #12]
            pxNewTCB->MsWcet          = MsWcet       ;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002756:	611a      	str	r2, [r3, #16]
            pxNewTCB->MsEnable        = pdTRUE       ;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2201      	movs	r2, #1
 800275c:	771a      	strb	r2, [r3, #28]
            pxNewTCB->MsAbsDeadLine   = MsRelDeadLine;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	609a      	str	r2, [r3, #8]
            pxNewTCB->MsID            = taskQnt      ;
 8002764:	4b11      	ldr	r3, [pc, #68]	; (80027ac <MsFreeRTOS_CreateEnergySavingTask+0xdc>)
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	775a      	strb	r2, [r3, #29]
            pxNewTCB->MsNumberExecJob = 0            ;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	2200      	movs	r2, #0
 8002770:	621a      	str	r2, [r3, #32]
            pxNewTCB->MsNextWakeTime  = pxNewTCB->MsPeriod;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	615a      	str	r2, [r3, #20]


            //MsArrayTCB[taskQnt++] = pxNewTCB;

            MsTcbEsTask  =  pxNewTCB;
 800277a:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <MsFreeRTOS_CreateEnergySavingTask+0xe0>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	6013      	str	r3, [r2, #0]
            taskQnt++;
 8002780:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <MsFreeRTOS_CreateEnergySavingTask+0xdc>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	3301      	adds	r3, #1
 8002786:	b2da      	uxtb	r2, r3
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <MsFreeRTOS_CreateEnergySavingTask+0xdc>)
 800278a:	701a      	strb	r2, [r3, #0]
            //rel_no_prmp(ListReady, pxNewTCB);

            xReturn = pdPASS;
 800278c:	2301      	movs	r3, #1
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e002      	b.n	8002798 <MsFreeRTOS_CreateEnergySavingTask+0xc8>
          }
          else
          {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	61bb      	str	r3, [r7, #24]
          }

          return xReturn;
 8002798:	69bb      	ldr	r3, [r7, #24]
        }
 800279a:	4618      	mov	r0, r3
 800279c:	3720      	adds	r7, #32
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000cbe8 	.word	0x2000cbe8
 80027a8:	08003365 	.word	0x08003365
 80027ac:	200001c9 	.word	0x200001c9
 80027b0:	2000cbf8 	.word	0x2000cbf8

080027b4 <Ms_EndJob_Exec>:



    void Ms_EndJob_Exec(void)
    {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	603b      	str	r3, [r7, #0]
      portDISABLE_INTERRUPTS();
      START_EXECUTION_TIME_MEASUREMENT();
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <Ms_EndJob_Exec+0x8c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <Ms_EndJob_Exec+0x8c>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <Ms_EndJob_Exec+0x90>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <Ms_EndJob_Exec+0x90>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6013      	str	r3, [r2, #0]
      time_exec_CS = GET_EXEC_TIME_US();
 80027e4:	4b18      	ldr	r3, [pc, #96]	; (8002848 <Ms_EndJob_Exec+0x94>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	ee07 3a90 	vmov	s15, r3
 80027ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <Ms_EndJob_Exec+0x98>)
 80027f2:	edc3 7a00 	vstr	s15, [r3]

      NOT_READY_LIST_ADD_DECREASE_ORDER( pxCurrentTCB, &ListNotReady);
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <Ms_EndJob_Exec+0x9c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4916      	ldr	r1, [pc, #88]	; (8002854 <Ms_EndJob_Exec+0xa0>)
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fcbb 	bl	8003178 <NOT_READY_LIST_ADD_DECREASE_ORDER>
      pxCurrentTCB->MsNumberExecJob++;
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <Ms_EndJob_Exec+0x9c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a1a      	ldr	r2, [r3, #32]
 8002808:	3201      	adds	r2, #1
 800280a:	621a      	str	r2, [r3, #32]

      TcbToPxCurrent = idle_remv(ListReady);
 800280c:	4812      	ldr	r0, [pc, #72]	; (8002858 <Ms_EndJob_Exec+0xa4>)
 800280e:	f000 f9ad 	bl	8002b6c <idle_remv>
 8002812:	4602      	mov	r2, r0
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <Ms_EndJob_Exec+0xa8>)
 8002816:	601a      	str	r2, [r3, #0]

      SwitchContexOp = END_JOB;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <Ms_EndJob_Exec+0xac>)
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f383 8811 	msr	BASEPRI, r3

      portENABLE_INTERRUPTS();
      portYIELD();
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <Ms_EndJob_Exec+0xb0>)
 800282a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	f3bf 8f6f 	isb	sy
    }
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	e000edfc 	.word	0xe000edfc
 8002844:	e0001000 	.word	0xe0001000
 8002848:	e0001004 	.word	0xe0001004
 800284c:	200001b8 	.word	0x200001b8
 8002850:	200001cc 	.word	0x200001cc
 8002854:	2000cbfc 	.word	0x2000cbfc
 8002858:	2000c738 	.word	0x2000c738
 800285c:	2000cc10 	.word	0x2000cc10
 8002860:	200001c8 	.word	0x200001c8
 8002864:	e000ed04 	.word	0xe000ed04

08002868 <Ms_EndJobEsTask_Exec>:


    void Ms_EndJobEsTask_Exec(void)
    {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
	__asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	603b      	str	r3, [r7, #0]
      portDISABLE_INTERRUPTS();

      TcbToPxCurrent = idle_remv(ListReady);
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <Ms_EndJobEsTask_Exec+0x4c>)
 8002882:	f000 f973 	bl	8002b6c <idle_remv>
 8002886:	4602      	mov	r2, r0
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <Ms_EndJobEsTask_Exec+0x50>)
 800288a:	601a      	str	r2, [r3, #0]
      SwitchContexOp = END_JOB;
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <Ms_EndJobEsTask_Exec+0x54>)
 800288e:	2201      	movs	r2, #1
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	2300      	movs	r3, #0
 8002894:	607b      	str	r3, [r7, #4]
	__asm volatile
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f383 8811 	msr	BASEPRI, r3
   //   MsTcbEsTask->MsNumberExecJob++;
      portENABLE_INTERRUPTS();

      portYIELD();
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <Ms_EndJobEsTask_Exec+0x58>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	f3bf 8f6f 	isb	sy
    }
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	2000c738 	.word	0x2000c738
 80028b8:	2000cc10 	.word	0x2000cc10
 80028bc:	200001c8 	.word	0x200001c8
 80028c0:	e000ed04 	.word	0xe000ed04

080028c4 <NEXT_LIST>:


    unsigned int NEXT_LIST (uint64_t k, uint64_t bitmap)
    {
 80028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80028ce:	e9c7 2300 	strd	r2, r3, [r7]
      uint64_t m = (uint64_t) 0xffffffffffffffff<< k;
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295
 80028dc:	f1a1 0620 	sub.w	r6, r1, #32
 80028e0:	f1c1 0020 	rsb	r0, r1, #32
 80028e4:	fa03 f501 	lsl.w	r5, r3, r1
 80028e8:	fa02 f606 	lsl.w	r6, r2, r6
 80028ec:	4335      	orrs	r5, r6
 80028ee:	fa22 f000 	lsr.w	r0, r2, r0
 80028f2:	4305      	orrs	r5, r0
 80028f4:	fa02 f401 	lsl.w	r4, r2, r1
 80028f8:	e9c7 4506 	strd	r4, r5, [r7, #24]

      uint64_t r;

      r = (uint64_t) bitmap&m;
 80028fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002900:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002904:	ea03 0501 	and.w	r5, r3, r1
 8002908:	ea04 0602 	and.w	r6, r4, r2
 800290c:	e9c7 5604 	strd	r5, r6, [r7, #16]

      if(r)
 8002910:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002914:	4323      	orrs	r3, r4
 8002916:	d005      	beq.n	8002924 <NEXT_LIST+0x60>
        return bitScanForward(r);
 8002918:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800291c:	f000 fcec 	bl	80032f8 <bitScanForward>
 8002920:	4603      	mov	r3, r0
 8002922:	e000      	b.n	8002926 <NEXT_LIST+0x62>
      else
        return LIST_EMPTY;
 8002924:	23ff      	movs	r3, #255	; 0xff
    }
 8002926:	4618      	mov	r0, r3
 8002928:	3724      	adds	r7, #36	; 0x24
 800292a:	46bd      	mov	sp, r7
 800292c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002930 <LIST_ADD_HEAD>:

    unsigned int LIST_ADD_HEAD(unsigned int index , TCB_t *NewTCB, MsList_t *L)
    {
 8002930:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
 8002934:	b085      	sub	sp, #20
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
      if( NewTCB == NULL)
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	2a00      	cmp	r2, #0
 8002942:	d101      	bne.n	8002948 <LIST_ADD_HEAD+0x18>
        return 0;
 8002944:	2300      	movs	r3, #0
 8002946:	e036      	b.n	80029b6 <LIST_ADD_HEAD+0x86>

      if(L->Head!= NULL)
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6852      	ldr	r2, [r2, #4]
 800294c:	2a00      	cmp	r2, #0
 800294e:	d007      	beq.n	8002960 <LIST_ADD_HEAD+0x30>
      {
        NewTCB->Next = L->Head;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6851      	ldr	r1, [r2, #4]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	6791      	str	r1, [r2, #120]	; 0x78
        L->Head = NewTCB;
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	6051      	str	r1, [r2, #4]
 800295e:	e005      	b.n	800296c <LIST_ADD_HEAD+0x3c>
      }
      else
      {
        L->Tail = NewTCB;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	6091      	str	r1, [r2, #8]
        L->Head = NewTCB;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6051      	str	r1, [r2, #4]
      }

      L->Qnt++;
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	1c51      	adds	r1, r2, #1
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6011      	str	r1, [r2, #0]

      bitmap |=  (uint64_t)1 << index ;
 8002976:	f04f 0101 	mov.w	r1, #1
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f1a0 0620 	sub.w	r6, r0, #32
 8002984:	f1c0 0520 	rsb	r5, r0, #32
 8002988:	fa02 fc00 	lsl.w	ip, r2, r0
 800298c:	fa01 f606 	lsl.w	r6, r1, r6
 8002990:	ea4c 0c06 	orr.w	ip, ip, r6
 8002994:	fa21 f505 	lsr.w	r5, r1, r5
 8002998:	ea4c 0c05 	orr.w	ip, ip, r5
 800299c:	fa01 fb00 	lsl.w	fp, r1, r0
 80029a0:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <LIST_ADD_HEAD+0x94>)
 80029a2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80029a6:	ea4b 0301 	orr.w	r3, fp, r1
 80029aa:	ea4c 0402 	orr.w	r4, ip, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <LIST_ADD_HEAD+0x94>)
 80029b0:	e9c2 3400 	strd	r3, r4, [r2]

      return 1;
 80029b4:	2301      	movs	r3, #1
    }
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	200001b0 	.word	0x200001b0

080029c8 <LIST_REMOVE_HEAD>:

    TCB_t* LIST_REMOVE_HEAD(unsigned int index, MsList_t *L )
    {
 80029c8:	b4f0      	push	{r4, r5, r6, r7}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
      TCB_t *TCB;
      uint64_t mask=0x0000000000000000, k = index;
 80029d2:	f04f 0100 	mov.w	r1, #0
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	e9c7 1204 	strd	r1, r2, [r7, #16]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4611      	mov	r1, r2
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	e9c7 1202 	strd	r1, r2, [r7, #8]

      if ( L== NULL || L->Qnt == 0 )
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	2a00      	cmp	r2, #0
 80029ee:	d003      	beq.n	80029f8 <LIST_REMOVE_HEAD+0x30>
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	2a00      	cmp	r2, #0
 80029f6:	d101      	bne.n	80029fc <LIST_REMOVE_HEAD+0x34>
        return 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e04b      	b.n	8002a94 <LIST_REMOVE_HEAD+0xcc>

      if(L->Qnt>1)
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	2a01      	cmp	r2, #1
 8002a02:	dd0b      	ble.n	8002a1c <LIST_REMOVE_HEAD+0x54>
      {
        TCB     = L->Head;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	61fb      	str	r3, [r7, #28]

        L->Head = L->Head->Next;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	605a      	str	r2, [r3, #4]

        TCB->Next = NULL;
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2200      	movs	r2, #0
 8002a18:	679a      	str	r2, [r3, #120]	; 0x78
 8002a1a:	e035      	b.n	8002a88 <LIST_REMOVE_HEAD+0xc0>
      }
      else if (L->Qnt == 1)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	6812      	ldr	r2, [r2, #0]
 8002a20:	2a01      	cmp	r2, #1
 8002a22:	d131      	bne.n	8002a88 <LIST_REMOVE_HEAD+0xc0>
      {
        TCB     = L->Head;
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	6852      	ldr	r2, [r2, #4]
 8002a28:	61fa      	str	r2, [r7, #28]
        L->Head = NULL;
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	6051      	str	r1, [r2, #4]
        L->Tail = NULL;
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	2100      	movs	r1, #0
 8002a34:	6091      	str	r1, [r2, #8]

        mask =  (uint64_t) 1<<k ;
 8002a36:	68b8      	ldr	r0, [r7, #8]
 8002a38:	f04f 0101 	mov.w	r1, #1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f1a0 0620 	sub.w	r6, r0, #32
 8002a44:	f1c0 0520 	rsb	r5, r0, #32
 8002a48:	fa02 f400 	lsl.w	r4, r2, r0
 8002a4c:	fa01 f606 	lsl.w	r6, r1, r6
 8002a50:	4334      	orrs	r4, r6
 8002a52:	fa21 f505 	lsr.w	r5, r1, r5
 8002a56:	432c      	orrs	r4, r5
 8002a58:	fa01 f300 	lsl.w	r3, r1, r0
 8002a5c:	e9c7 3404 	strd	r3, r4, [r7, #16]

        mask = (uint64_t) ~mask;
 8002a60:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a64:	ea6f 0103 	mvn.w	r1, r3
 8002a68:	ea6f 0204 	mvn.w	r2, r4
 8002a6c:	e9c7 1204 	strd	r1, r2, [r7, #16]

        bitmap&= mask ;
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <LIST_REMOVE_HEAD+0xd8>)
 8002a72:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002a76:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a7a:	ea03 0501 	and.w	r5, r3, r1
 8002a7e:	ea04 0602 	and.w	r6, r4, r2
 8002a82:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <LIST_REMOVE_HEAD+0xd8>)
 8002a84:	e9c2 5600 	strd	r5, r6, [r2]
      }

      L->Qnt--;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	1e5a      	subs	r2, r3, #1
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	601a      	str	r2, [r3, #0]

      return TCB;
 8002a92:	69fb      	ldr	r3, [r7, #28]
    }
 8002a94:	4618      	mov	r0, r3
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bcf0      	pop	{r4, r5, r6, r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	200001b0 	.word	0x200001b0

08002aa4 <setup>:
    /* debruijn32 = 0000 0111 0111 1100 1011 0101 0011 0001 */
    /* table to convert debruijn index to standard index */
    /* routine to initialize index32 */

    void setup( void )
    {
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
      int i;
      for(i=0; i<32; i++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	e00b      	b.n	8002ac8 <setup+0x24>
        index32[ (debruijn32 << i) >> 27 ] = i;
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <setup+0x38>)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	0edb      	lsrs	r3, r3, #27
 8002aba:	4909      	ldr	r1, [pc, #36]	; (8002ae0 <setup+0x3c>)
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for(i=0; i<32; i++)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b1f      	cmp	r3, #31
 8002acc:	ddf0      	ble.n	8002ab0 <setup+0xc>
    }
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	077cb531 	.word	0x077cb531
 8002ae0:	2000c6b4 	.word	0x2000c6b4

08002ae4 <rel_prmp>:
    }

    uint32_t rel_prmpCounter = 0;

    void rel_prmp(MsList_t *List, TCB_t *NewTCB )
    {
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
      int l = NEXT_LIST( 0 , (uint64_t) bitmap);
 8002aee:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <rel_prmp+0x80>)
 8002af0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4623      	mov	r3, r4
 8002af8:	f04f 0000 	mov.w	r0, #0
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	f7ff fee0 	bl	80028c4 <NEXT_LIST>
 8002b04:	4603      	mov	r3, r0
 8002b06:	60fb      	str	r3, [r7, #12]

      rel_prmpCounter++;
 8002b08:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <rel_prmp+0x84>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	4a16      	ldr	r2, [pc, #88]	; (8002b68 <rel_prmp+0x84>)
 8002b10:	6013      	str	r3, [r2, #0]

      if( l <= NewTCB->MsID )
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	7f5b      	ldrb	r3, [r3, #29]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	dc0d      	bgt.n	8002b3a <rel_prmp+0x56>
      {
        LIST_ADD_HEAD(l          , NewTCB  , (List + l)  );
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	f7ff fefc 	bl	8002930 <LIST_ADD_HEAD>
      }
      else
      {
        LIST_ADD_HEAD(NewTCB->MsID , NewTCB, (List + NewTCB->MsID) );
      }
    }
 8002b38:	e010      	b.n	8002b5c <rel_prmp+0x78>
        LIST_ADD_HEAD(NewTCB->MsID , NewTCB, (List + NewTCB->MsID) );
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7f5b      	ldrb	r3, [r3, #29]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	7f5b      	ldrb	r3, [r3, #29]
 8002b44:	461a      	mov	r2, r3
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	6839      	ldr	r1, [r7, #0]
 8002b58:	f7ff feea 	bl	8002930 <LIST_ADD_HEAD>
    }
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd90      	pop	{r4, r7, pc}
 8002b64:	200001b0 	.word	0x200001b0
 8002b68:	200004c4 	.word	0x200004c4

08002b6c <idle_remv>:

    uint32_t PopMinCounter     = 0;

    TCB_t* idle_remv(MsList_t *List)
    {
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
      int l = NEXT_LIST( 0, (uint64_t) bitmap);
 8002b74:	4b13      	ldr	r3, [pc, #76]	; (8002bc4 <idle_remv+0x58>)
 8002b76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4623      	mov	r3, r4
 8002b7e:	f04f 0000 	mov.w	r0, #0
 8002b82:	f04f 0100 	mov.w	r1, #0
 8002b86:	f7ff fe9d 	bl	80028c4 <NEXT_LIST>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	60fb      	str	r3, [r7, #12]

      if (l  < BITMAP_LEN )
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b3f      	cmp	r3, #63	; 0x3f
 8002b92:	dc12      	bgt.n	8002bba <idle_remv+0x4e>
      {
        PopMinCounter++;
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <idle_remv+0x5c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <idle_remv+0x5c>)
 8002b9c:	6013      	str	r3, [r2, #0]

        return LIST_REMOVE_HEAD(l, (List+l) );
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7ff ff09 	bl	80029c8 <LIST_REMOVE_HEAD>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	e000      	b.n	8002bbc <idle_remv+0x50>
      }
      else
      {
        // ERROR
        return NULL;
 8002bba:	2300      	movs	r3, #0
      }
    }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}
 8002bc4:	200001b0 	.word	0x200001b0
 8002bc8:	200004c8 	.word	0x200004c8

08002bcc <rel_no_prmp>:
uint32_t rel_no_prmpCounter = 0;

    void rel_no_prmp(MsList_t *List, TCB_t *NewTCB )
    {
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
      MsList_t *currentList;
      rel_no_prmpCounter++;
 8002bd6:	4b45      	ldr	r3, [pc, #276]	; (8002cec <rel_no_prmp+0x120>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	4a43      	ldr	r2, [pc, #268]	; (8002cec <rel_no_prmp+0x120>)
 8002bde:	6013      	str	r3, [r2, #0]
      {
        /*
    1) Step 1: We find h = NEXT_LIST(k,B); if "h" is not valid, then go to step 4.
        Otherwise, go ahead to next step.
         */
        int h = NEXT_LIST( NewTCB->MsID+1, (uint64_t) bitmap);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	7f5b      	ldrb	r3, [r3, #29]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002bec:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <rel_no_prmp+0x124>)
 8002bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf2:	f7ff fe67 	bl	80028c4 <NEXT_LIST>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	60fb      	str	r3, [r7, #12]

        if (h != LIST_EMPTY )
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2bff      	cmp	r3, #255	; 0xff
 8002bfe:	d024      	beq.n	8002c4a <rel_no_prmp+0x7e>
          currentList = (List + h);
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4613      	mov	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4413      	add	r3, r2
 8002c10:	60bb      	str	r3, [r7, #8]
        /*
    2) Step 2: If the last element of the "hth" linked list (pointed by tail[h]) has
        absolute deadline smaller than that of Jnew, in such case the entire "hth" linked
        list is inserted at the end of the "kth" linked list in constant time
         */
        if (  currentList->Tail->MsAbsDeadLine <= NewTCB->MsAbsDeadLine )
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d808      	bhi.n	8002c32 <rel_no_prmp+0x66>
        {
          LIST_MOVE_ENTIRE(List, h, NewTCB->MsID, &bitmap );
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	7f5b      	ldrb	r3, [r3, #29]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <rel_no_prmp+0x124>)
 8002c28:	68f9      	ldr	r1, [r7, #12]
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f862 	bl	8002cf4 <LIST_MOVE_ENTIRE>
 8002c30:	e7d6      	b.n	8002be0 <rel_no_prmp+0x14>
    than or equal to that of Jnew, then the EDF priorities of all the jobs in
    the hth linked list are not higher than that of job Jnew.
         */
        else
        {
          LIST_MOVE_PART(List,h,NewTCB->MsID, &bitmap, NewTCB->MsAbsDeadLine );
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	7f5b      	ldrb	r3, [r3, #29]
 8002c36:	461a      	mov	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <rel_no_prmp+0x124>)
 8002c40:	68f9      	ldr	r1, [r7, #12]
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f8f3 	bl	8002e2e <LIST_MOVE_PART>
          break;
 8002c48:	e000      	b.n	8002c4c <rel_no_prmp+0x80>
          break;
 8002c4a:	bf00      	nop
      }
      /*
    4) Step 4: The TCB of job Jnew is inserted at the end of the hth linked list.
     If B[k] = 0, then we set B[k] = 1 to specify that the kth linked list
     is now not empty                                            */
      currentList = List+NewTCB->MsID;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	7f5b      	ldrb	r3, [r3, #29]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	60bb      	str	r3, [r7, #8]

      if(!currentList->Qnt)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d12d      	bne.n	8002cc6 <rel_no_prmp+0xfa>
      {
        currentList->Head = NewTCB;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	605a      	str	r2, [r3, #4]
        currentList->Tail = NewTCB;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	609a      	str	r2, [r3, #8]
        currentList->Qnt  = 1     ;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
        NewTCB->Next      = NULL  ;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	679a      	str	r2, [r3, #120]	; 0x78
        bitmap |=  (uint64_t)1<<NewTCB->MsID;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	7f5b      	ldrb	r3, [r3, #29]
 8002c86:	4619      	mov	r1, r3
 8002c88:	f04f 0201 	mov.w	r2, #1
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f1a1 0620 	sub.w	r6, r1, #32
 8002c94:	f1c1 0020 	rsb	r0, r1, #32
 8002c98:	fa03 f501 	lsl.w	r5, r3, r1
 8002c9c:	fa02 f606 	lsl.w	r6, r2, r6
 8002ca0:	4335      	orrs	r5, r6
 8002ca2:	fa22 f000 	lsr.w	r0, r2, r0
 8002ca6:	4305      	orrs	r5, r0
 8002ca8:	fa02 f401 	lsl.w	r4, r2, r1
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <rel_no_prmp+0x124>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	ea44 0002 	orr.w	r0, r4, r2
 8002cb6:	ea45 0103 	orr.w	r1, r5, r3
 8002cba:	4603      	mov	r3, r0
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <rel_no_prmp+0x124>)
 8002cc0:	e9c2 3400 	strd	r3, r4, [r2]
        currentList->Tail       = NewTCB;
        currentList->Qnt++              ;
        NewTCB->Next            = NULL  ;
      }

    }
 8002cc4:	e00e      	b.n	8002ce4 <rel_no_prmp+0x118>
        currentList->Tail->Next = NewTCB;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	679a      	str	r2, [r3, #120]	; 0x78
        currentList->Tail       = NewTCB;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	609a      	str	r2, [r3, #8]
        currentList->Qnt++              ;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	601a      	str	r2, [r3, #0]
        NewTCB->Next            = NULL  ;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	679a      	str	r2, [r3, #120]	; 0x78
    }
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cec:	200004cc 	.word	0x200004cc
 8002cf0:	200001b0 	.word	0x200001b0

08002cf4 <LIST_MOVE_ENTIRE>:

    void LIST_MOVE_ENTIRE( MsList_t *L, int origin, int dest, uint64_t *bitmap)
    {
 8002cf4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
      MsList_t *originList = L+origin ;
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4413      	add	r3, r2
 8002d14:	61fb      	str	r3, [r7, #28]
      MsList_t *destList   = L+dest   ;
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4413      	add	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
      uint64_t mask;

      if( destList->Tail == NULL)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d115      	bne.n	8002d5c <LIST_MOVE_ENTIRE+0x68>
      {
        destList->Tail = originList->Tail;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	609a      	str	r2, [r3, #8]
        destList->Head = originList->Head;
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	605a      	str	r2, [r3, #4]
        destList->Qnt  = originList->Qnt ;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	601a      	str	r2, [r3, #0]

        originList->Head = NULL;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	605a      	str	r2, [r3, #4]
        originList->Tail = NULL;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
        originList->Qnt  = 0   ;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	e018      	b.n	8002d8e <LIST_MOVE_ENTIRE+0x9a>
      }
      else
      {
        destList->Tail->Next =  originList->Head;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	6852      	ldr	r2, [r2, #4]
 8002d64:	679a      	str	r2, [r3, #120]	; 0x78
        destList->Tail       =  originList->Tail;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	609a      	str	r2, [r3, #8]
        destList->Qnt        += originList->Qnt ;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	441a      	add	r2, r3
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	601a      	str	r2, [r3, #0]

        originList->Head = NULL;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	605a      	str	r2, [r3, #4]
        originList->Tail = NULL;
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
        originList->Qnt  = 0   ;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
      }

      mask =  (uint64_t) 1<<origin ;
 8002d8e:	f04f 0201 	mov.w	r2, #1
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	f1a1 0620 	sub.w	r6, r1, #32
 8002d9c:	f1c1 0020 	rsb	r0, r1, #32
 8002da0:	fa03 f901 	lsl.w	r9, r3, r1
 8002da4:	fa02 f606 	lsl.w	r6, r2, r6
 8002da8:	ea49 0906 	orr.w	r9, r9, r6
 8002dac:	fa22 f000 	lsr.w	r0, r2, r0
 8002db0:	ea49 0900 	orr.w	r9, r9, r0
 8002db4:	fa02 f801 	lsl.w	r8, r2, r1
 8002db8:	e9c7 8904 	strd	r8, r9, [r7, #16]
      mask = (uint64_t) ~mask;
 8002dbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dc0:	ea6f 0002 	mvn.w	r0, r2
 8002dc4:	ea6f 0103 	mvn.w	r1, r3
 8002dc8:	e9c7 0104 	strd	r0, r1, [r7, #16]
      *bitmap&= mask ;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dd6:	ea02 0800 	and.w	r8, r2, r0
 8002dda:	ea03 0901 	and.w	r9, r3, r1
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	e9c1 8900 	strd	r8, r9, [r1]


      *bitmap |= (uint64_t)1<<dest  ;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002dea:	f04f 0201 	mov.w	r2, #1
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	f1a1 0620 	sub.w	r6, r1, #32
 8002df8:	f1c1 0020 	rsb	r0, r1, #32
 8002dfc:	fa03 f501 	lsl.w	r5, r3, r1
 8002e00:	fa02 f606 	lsl.w	r6, r2, r6
 8002e04:	4335      	orrs	r5, r6
 8002e06:	fa22 f000 	lsr.w	r0, r2, r0
 8002e0a:	4305      	orrs	r5, r0
 8002e0c:	fa02 f401 	lsl.w	r4, r2, r1
 8002e10:	ea48 0204 	orr.w	r2, r8, r4
 8002e14:	ea49 0305 	orr.w	r3, r9, r5
 8002e18:	461c      	mov	r4, r3
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	e9c2 3400 	strd	r3, r4, [r2]
    }
 8002e22:	bf00      	nop
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8002e2c:	4770      	bx	lr

08002e2e <LIST_MOVE_PART>:

    void LIST_MOVE_PART( MsList_t *L, int origin, int dest, uint64_t *bitmap, int deadlineRef  )
    {
 8002e2e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e32:	b090      	sub	sp, #64	; 0x40
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6278      	str	r0, [r7, #36]	; 0x24
 8002e38:	6239      	str	r1, [r7, #32]
 8002e3a:	61fa      	str	r2, [r7, #28]
 8002e3c:	61bb      	str	r3, [r7, #24]
      MsList_t *originList = L+origin;
 8002e3e:	6a3a      	ldr	r2, [r7, #32]
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	461a      	mov	r2, r3
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	4413      	add	r3, r2
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34
      MsList_t *destList   = L+dest  ;
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	4413      	add	r3, r2
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
      uint64_t mask;

      int i, removeCount = 0       ;
 8002e62:	2300      	movs	r3, #0
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38

      if( destList->Tail != NULL)
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 808d 	beq.w	8002f8a <LIST_MOVE_PART+0x15c>
      {
        for(i=0; i < originList->Qnt ;i++ )
 8002e70:	2300      	movs	r3, #0
 8002e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e74:	e082      	b.n	8002f7c <LIST_MOVE_PART+0x14e>
        {
          if ( originList->Head->MsAbsDeadLine <= deadlineRef )
 8002e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d81a      	bhi.n	8002eb8 <LIST_MOVE_PART+0x8a>
          {
            destList->Tail->Next = originList->Head;
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e88:	6852      	ldr	r2, [r2, #4]
 8002e8a:	679a      	str	r2, [r3, #120]	; 0x78
            destList->Tail       = originList->Head;
 8002e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	609a      	str	r2, [r3, #8]

            originList->Head     = originList->Head->Next;
 8002e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9c:	605a      	str	r2, [r3, #4]

            destList->Tail->Next = NULL;
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	679a      	str	r2, [r3, #120]	; 0x78
            destList->Qnt++;
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	601a      	str	r2, [r3, #0]

            removeCount++;
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb6:	e05e      	b.n	8002f76 <LIST_MOVE_PART+0x148>
          }

          else
          {
            originList->Qnt-=removeCount;
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	1ad2      	subs	r2, r2, r3
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	601a      	str	r2, [r3, #0]

            if(!originList->Qnt)
 8002ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d12f      	bne.n	8002f2c <LIST_MOVE_PART+0xfe>
            {
              mask =  (uint64_t) 1<<origin ;
 8002ecc:	f04f 0301 	mov.w	r3, #1
 8002ed0:	f04f 0400 	mov.w	r4, #0
 8002ed4:	6a3a      	ldr	r2, [r7, #32]
 8002ed6:	f1a2 0020 	sub.w	r0, r2, #32
 8002eda:	f1c2 0120 	rsb	r1, r2, #32
 8002ede:	fa04 f502 	lsl.w	r5, r4, r2
 8002ee2:	60fd      	str	r5, [r7, #12]
 8002ee4:	fa03 f000 	lsl.w	r0, r3, r0
 8002ee8:	68fd      	ldr	r5, [r7, #12]
 8002eea:	4305      	orrs	r5, r0
 8002eec:	60fd      	str	r5, [r7, #12]
 8002eee:	fa23 f101 	lsr.w	r1, r3, r1
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	4308      	orrs	r0, r1
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
 8002efc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002f00:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
              mask = (uint64_t) ~mask;
 8002f04:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002f08:	ea6f 0103 	mvn.w	r1, r3
 8002f0c:	ea6f 0204 	mvn.w	r2, r4
 8002f10:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
              *bitmap&= mask ;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002f1a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002f1e:	ea03 0501 	and.w	r5, r3, r1
 8002f22:	ea04 0602 	and.w	r6, r4, r2
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	e9c2 5600 	strd	r5, r6, [r2]
            }

            *bitmap |= (uint64_t)1<<dest  ;
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f32:	f04f 0301 	mov.w	r3, #1
 8002f36:	f04f 0400 	mov.w	r4, #0
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	f1a2 0020 	sub.w	r0, r2, #32
 8002f40:	f1c2 0120 	rsb	r1, r2, #32
 8002f44:	fa04 f502 	lsl.w	r5, r4, r2
 8002f48:	617d      	str	r5, [r7, #20]
 8002f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8002f4e:	697d      	ldr	r5, [r7, #20]
 8002f50:	4305      	orrs	r5, r0
 8002f52:	617d      	str	r5, [r7, #20]
 8002f54:	fa23 f101 	lsr.w	r1, r3, r1
 8002f58:	6978      	ldr	r0, [r7, #20]
 8002f5a:	4308      	orrs	r0, r1
 8002f5c:	6178      	str	r0, [r7, #20]
 8002f5e:	4093      	lsls	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f66:	ea43 0308 	orr.w	r3, r3, r8
 8002f6a:	ea44 0409 	orr.w	r4, r4, r9
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	e9c2 3400 	strd	r3, r4, [r2]

            return;
 8002f74:	e0fb      	b.n	800316e <LIST_MOVE_PART+0x340>
        for(i=0; i < originList->Qnt ;i++ )
 8002f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f78:	3301      	adds	r3, #1
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f82:	429a      	cmp	r2, r3
 8002f84:	f6ff af77 	blt.w	8002e76 <LIST_MOVE_PART+0x48>
 8002f88:	e0a5      	b.n	80030d6 <LIST_MOVE_PART+0x2a8>
      {
        /*
         * mover parte de lista
         * */

        for(i=0; i < originList->Qnt ;i++ )
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f8e:	e096      	b.n	80030be <LIST_MOVE_PART+0x290>
          /*
           * verifica se head (mais prioritario) eh mais prioritatio do que a
           * referencia
           *
           * */
          if ( originList->Head->MsAbsDeadLine <= deadlineRef )
 8002f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d833      	bhi.n	8003004 <LIST_MOVE_PART+0x1d6>
          {

            if( destList->Qnt == 0 )
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d114      	bne.n	8002fce <LIST_MOVE_PART+0x1a0>
            {
              /*adiciona o head a lista "destino" */
              destList->Tail  = originList->Head;
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002faa:	609a      	str	r2, [r3, #8]
              destList->Head  = originList->Head;
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	605a      	str	r2, [r3, #4]

              /*faz a lista origin apontar para o proximo elemento apos o head*/
              originList->Head     = originList->Head->Next;
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	605a      	str	r2, [r3, #4]

              /*faz com q o tail aponto para null, pois so tem um elemento na
               * lista   */
              destList->Tail->Next = NULL;
 8002fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	679a      	str	r2, [r3, #120]	; 0x78
              destList->Qnt = 1;
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e016      	b.n	8002ffc <LIST_MOVE_PART+0x1ce>
            }
            else
            {
              destList->Tail->Next = originList->Head;
 8002fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fd4:	6852      	ldr	r2, [r2, #4]
 8002fd6:	679a      	str	r2, [r3, #120]	; 0x78
              destList->Tail       = originList->Head;
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	609a      	str	r2, [r3, #8]

              originList->Head     = originList->Head->Next;
 8002fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fe8:	605a      	str	r2, [r3, #4]

              destList->Tail->Next = NULL;
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	679a      	str	r2, [r3, #120]	; 0x78
              destList->Qnt++;
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	601a      	str	r2, [r3, #0]
            }

            removeCount++;
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	3301      	adds	r3, #1
 8003000:	63bb      	str	r3, [r7, #56]	; 0x38
 8003002:	e059      	b.n	80030b8 <LIST_MOVE_PART+0x28a>

          }

          else
          {
            originList->Qnt-=removeCount;
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300a:	1ad2      	subs	r2, r2, r3
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	601a      	str	r2, [r3, #0]

            if(!originList->Qnt)
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d12f      	bne.n	8003078 <LIST_MOVE_PART+0x24a>
            {
              mask =  (uint64_t) 1<<origin ;
 8003018:	f04f 0301 	mov.w	r3, #1
 800301c:	f04f 0400 	mov.w	r4, #0
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	f1a2 0020 	sub.w	r0, r2, #32
 8003026:	f1c2 0120 	rsb	r1, r2, #32
 800302a:	fa04 f502 	lsl.w	r5, r4, r2
 800302e:	607d      	str	r5, [r7, #4]
 8003030:	fa03 f000 	lsl.w	r0, r3, r0
 8003034:	687d      	ldr	r5, [r7, #4]
 8003036:	4305      	orrs	r5, r0
 8003038:	607d      	str	r5, [r7, #4]
 800303a:	fa23 f101 	lsr.w	r1, r3, r1
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4308      	orrs	r0, r1
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	4093      	lsls	r3, r2
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	e9d7 3400 	ldrd	r3, r4, [r7]
 800304c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
              mask = (uint64_t) ~mask;
 8003050:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003054:	ea6f 0103 	mvn.w	r1, r3
 8003058:	ea6f 0204 	mvn.w	r2, r4
 800305c:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
              *bitmap&= mask ;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003066:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800306a:	ea03 0501 	and.w	r5, r3, r1
 800306e:	ea04 0602 	and.w	r6, r4, r2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	e9c2 5600 	strd	r5, r6, [r2]
            }

            *bitmap |= (uint64_t)1<<dest  ;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800307e:	f04f 0301 	mov.w	r3, #1
 8003082:	f04f 0400 	mov.w	r4, #0
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	f1a2 0020 	sub.w	r0, r2, #32
 800308c:	f1c2 0120 	rsb	r1, r2, #32
 8003090:	fa04 fb02 	lsl.w	fp, r4, r2
 8003094:	fa03 f000 	lsl.w	r0, r3, r0
 8003098:	ea4b 0b00 	orr.w	fp, fp, r0
 800309c:	fa23 f101 	lsr.w	r1, r3, r1
 80030a0:	ea4b 0b01 	orr.w	fp, fp, r1
 80030a4:	fa03 fa02 	lsl.w	sl, r3, r2
 80030a8:	ea45 030a 	orr.w	r3, r5, sl
 80030ac:	ea46 040b 	orr.w	r4, r6, fp
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	e9c2 3400 	strd	r3, r4, [r2]

            return;
 80030b6:	e05a      	b.n	800316e <LIST_MOVE_PART+0x340>
        for(i=0; i < originList->Qnt ;i++ )
 80030b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ba:	3301      	adds	r3, #1
 80030bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030c4:	429a      	cmp	r2, r3
 80030c6:	f6ff af63 	blt.w	8002f90 <LIST_MOVE_PART+0x162>
          }
        }

        originList->Qnt-=removeCount;
 80030ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d0:	1ad2      	subs	r2, r2, r3
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	601a      	str	r2, [r3, #0]

      }

      if(!originList->Qnt)
 80030d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d128      	bne.n	8003130 <LIST_MOVE_PART+0x302>
      {
        mask =  (uint64_t) 1<<origin ;
 80030de:	f04f 0301 	mov.w	r3, #1
 80030e2:	f04f 0400 	mov.w	r4, #0
 80030e6:	6a3a      	ldr	r2, [r7, #32]
 80030e8:	f1a2 0020 	sub.w	r0, r2, #32
 80030ec:	f1c2 0120 	rsb	r1, r2, #32
 80030f0:	fa04 f602 	lsl.w	r6, r4, r2
 80030f4:	fa03 f000 	lsl.w	r0, r3, r0
 80030f8:	4306      	orrs	r6, r0
 80030fa:	fa23 f101 	lsr.w	r1, r3, r1
 80030fe:	430e      	orrs	r6, r1
 8003100:	fa03 f502 	lsl.w	r5, r3, r2
 8003104:	e9c7 560a 	strd	r5, r6, [r7, #40]	; 0x28
        mask = (uint64_t) ~mask;
 8003108:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800310c:	ea6f 0103 	mvn.w	r1, r3
 8003110:	ea6f 0204 	mvn.w	r2, r4
 8003114:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
        *bitmap&= mask ;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800311e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8003122:	ea03 0501 	and.w	r5, r3, r1
 8003126:	ea04 0602 	and.w	r6, r4, r2
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	e9c2 5600 	strd	r5, r6, [r2]

      }
      *bitmap |= (uint64_t)1<<dest ;
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	e9d3 5600 	ldrd	r5, r6, [r3]
 8003136:	f04f 0301 	mov.w	r3, #1
 800313a:	f04f 0400 	mov.w	r4, #0
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	f1a2 0020 	sub.w	r0, r2, #32
 8003144:	f1c2 0120 	rsb	r1, r2, #32
 8003148:	fa04 f902 	lsl.w	r9, r4, r2
 800314c:	fa03 f000 	lsl.w	r0, r3, r0
 8003150:	ea49 0900 	orr.w	r9, r9, r0
 8003154:	fa23 f101 	lsr.w	r1, r3, r1
 8003158:	ea49 0901 	orr.w	r9, r9, r1
 800315c:	fa03 f802 	lsl.w	r8, r3, r2
 8003160:	ea45 0308 	orr.w	r3, r5, r8
 8003164:	ea46 0409 	orr.w	r4, r6, r9
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	e9c2 3400 	strd	r3, r4, [r2]
    }
 800316e:	3740      	adds	r7, #64	; 0x40
 8003170:	46bd      	mov	sp, r7
 8003172:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003176:	4770      	bx	lr

08003178 <NOT_READY_LIST_ADD_DECREASE_ORDER>:

      return 0;
    }

    unsigned int NOT_READY_LIST_ADD_DECREASE_ORDER(TCB_t *NewTCB, MsList_t *L)
    {
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
      TCB_t* p;
      int i,j;

      if( NewTCB == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <NOT_READY_LIST_ADD_DECREASE_ORDER+0x14>
        return 0;
 8003188:	2300      	movs	r3, #0
 800318a:	e071      	b.n	8003270 <NOT_READY_LIST_ADD_DECREASE_ORDER+0xf8>

      if(L->Head!= NULL)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d04f      	beq.n	8003234 <NOT_READY_LIST_ADD_DECREASE_ORDER+0xbc>
      {
        p = L->Head;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	617b      	str	r3, [r7, #20]

        for(i=0; i < L->Qnt; i++ )
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	e043      	b.n	8003228 <NOT_READY_LIST_ADD_DECREASE_ORDER+0xb0>
        {
          if(NewTCB->MsNextWakeTime <= p->MsNextWakeTime)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d837      	bhi.n	800321c <NOT_READY_LIST_ADD_DECREASE_ORDER+0xa4>
          {
            if(p == L->Head)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d10d      	bne.n	80031d2 <NOT_READY_LIST_ADD_DECREASE_ORDER+0x5a>
            {
              NewTCB->Next = L->Head;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	679a      	str	r2, [r3, #120]	; 0x78
              L->Head  = NewTCB;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	605a      	str	r2, [r3, #4]
              L->Qnt++;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	601a      	str	r2, [r3, #0]
              return 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e04e      	b.n	8003270 <NOT_READY_LIST_ADD_DECREASE_ORDER+0xf8>
            }
            else
            {
              p= L->Head;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	617b      	str	r3, [r7, #20]
              for(j=0; j < i-1 ; j++   )
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	e005      	b.n	80031ea <NOT_READY_LIST_ADD_DECREASE_ORDER+0x72>
              {
                p = p->Next;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e2:	617b      	str	r3, [r7, #20]
              for(j=0; j < i-1 ; j++   )
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	dbf4      	blt.n	80031de <NOT_READY_LIST_ADD_DECREASE_ORDER+0x66>
              }
              if(i==1  )
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <NOT_READY_LIST_ADD_DECREASE_ORDER+0x88>
                p= L->Head;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	617b      	str	r3, [r7, #20]

              NewTCB->Next =p->Next;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	679a      	str	r2, [r3, #120]	; 0x78
              p->Next=NewTCB;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	679a      	str	r2, [r3, #120]	; 0x78
              L->Qnt++;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	601a      	str	r2, [r3, #0]
              return 1;
 8003218:	2301      	movs	r3, #1
 800321a:	e029      	b.n	8003270 <NOT_READY_LIST_ADD_DECREASE_ORDER+0xf8>
            }
          }
          else
            p = p->Next;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003220:	617b      	str	r3, [r7, #20]
        for(i=0; i < L->Qnt; i++ )
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	3301      	adds	r3, #1
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	429a      	cmp	r2, r3
 8003230:	dbb6      	blt.n	80031a0 <NOT_READY_LIST_ADD_DECREASE_ORDER+0x28>
 8003232:	e00d      	b.n	8003250 <NOT_READY_LIST_ADD_DECREASE_ORDER+0xd8>
        }
      }
      else
      {
        L->Tail = NewTCB;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]
        L->Head = NewTCB;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	605a      	str	r2, [r3, #4]
        L->Qnt=1;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]
        NewTCB->Next = NULL;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	679a      	str	r2, [r3, #120]	; 0x78
        return 1;
 800324c:	2301      	movs	r3, #1
 800324e:	e00f      	b.n	8003270 <NOT_READY_LIST_ADD_DECREASE_ORDER+0xf8>
      }

      L->Tail->Next = NewTCB;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	679a      	str	r2, [r3, #120]	; 0x78
      L->Tail = NewTCB;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]
      NewTCB->Next = NULL;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	679a      	str	r2, [r3, #120]	; 0x78
      L->Qnt++;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	601a      	str	r2, [r3, #0]

      return 1;
 800326e:	2301      	movs	r3, #1
    }
 8003270:	4618      	mov	r0, r3
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <NOT_READY_LIST_REMOVE_HEAD>:


    TCB_t* NOT_READY_LIST_REMOVE_HEAD(MsList_t *L )
    {
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
      TCB_t *TCB;

      PopMinCounter++;
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <NOT_READY_LIST_REMOVE_HEAD+0x78>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3301      	adds	r3, #1
 800328a:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <NOT_READY_LIST_REMOVE_HEAD+0x78>)
 800328c:	6013      	str	r3, [r2, #0]
      if ( L== NULL || L->Qnt == 0 )
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <NOT_READY_LIST_REMOVE_HEAD+0x20>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <NOT_READY_LIST_REMOVE_HEAD+0x24>
        return 0;
 800329c:	2300      	movs	r3, #0
 800329e:	e022      	b.n	80032e6 <NOT_READY_LIST_REMOVE_HEAD+0x6a>

      if( L->Qnt>1 )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	dd0b      	ble.n	80032c0 <NOT_READY_LIST_REMOVE_HEAD+0x44>
      {
        TCB     = L->Head;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	60fb      	str	r3, [r7, #12]

        L->Head = L->Head->Next;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]

        TCB->Next = NULL;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	679a      	str	r2, [r3, #120]	; 0x78
 80032be:	e00c      	b.n	80032da <NOT_READY_LIST_REMOVE_HEAD+0x5e>
      }
      else if (L->Qnt == 1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d108      	bne.n	80032da <NOT_READY_LIST_REMOVE_HEAD+0x5e>
      {
        TCB     = L->Head;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	60fb      	str	r3, [r7, #12]
        L->Head = NULL;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	605a      	str	r2, [r3, #4]
        L->Tail = NULL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
      }
      L->Qnt--;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	1e5a      	subs	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	601a      	str	r2, [r3, #0]

      return TCB;
 80032e4:	68fb      	ldr	r3, [r7, #12]
    }
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	200004c8 	.word	0x200004c8

080032f8 <bitScanForward>:
     * @param bb bitboard to scan
     * @precondition bb != 0
     * @return index (0..63) of least significant one bit
     */
    int bitScanForward(uint64_t bb)
    {
 80032f8:	e92d 08b0 	stmdb	sp!, {r4, r5, r7, fp}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	e9c7 0100 	strd	r0, r1, [r7]
       return index64[((bb ^ (bb-1)) * debruijn64) >> 58];
 8003304:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003308:	f113 31ff 	adds.w	r1, r3, #4294967295
 800330c:	f144 32ff 	adc.w	r2, r4, #4294967295
 8003310:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003314:	ea83 0b01 	eor.w	fp, r3, r1
 8003318:	ea84 0c02 	eor.w	ip, r4, r2
 800331c:	a20f      	add	r2, pc, #60	; (adr r2, 800335c <bitScanForward+0x64>)
 800331e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003322:	fb01 f50c 	mul.w	r5, r1, ip
 8003326:	fb0b f002 	mul.w	r0, fp, r2
 800332a:	4428      	add	r0, r5
 800332c:	fbab 3401 	umull	r3, r4, fp, r1
 8003330:	1902      	adds	r2, r0, r4
 8003332:	4614      	mov	r4, r2
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	0ea1      	lsrs	r1, r4, #26
 800333e:	2200      	movs	r2, #0
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <bitScanForward+0x60>)
 8003342:	460a      	mov	r2, r1
 8003344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    }
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	e8bd 08b0 	ldmia.w	sp!, {r4, r5, r7, fp}
 8003352:	4770      	bx	lr
 8003354:	f3af 8000 	nop.w
 8003358:	0800591c 	.word	0x0800591c
 800335c:	b4cb0a89 	.word	0xb4cb0a89
 8003360:	03f79d71 	.word	0x03f79d71

08003364 <Es_Func>:


    uint16_t pw_on = 0;

    void Es_Func(void *pvParameters )
    {
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
//    		   pw_on =0;
//
//    	   }


    	   switch(EsTask_Idle)
 800336c:	4b77      	ldr	r3, [pc, #476]	; (800354c <Es_Func+0x1e8>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d061      	beq.n	8003438 <Es_Func+0xd4>
 8003374:	2b01      	cmp	r3, #1
 8003376:	d1f9      	bne.n	800336c <Es_Func+0x8>
    	   {

    	   case ES_TASK_IDLE_MODE:

    		   /*check if next task is a system task*/
    		   if(ListNotReady.Head->MsNextWakeTime < MsTcbEsTask->MsNextWakeTime)
 8003378:	4b75      	ldr	r3, [pc, #468]	; (8003550 <Es_Func+0x1ec>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	4b75      	ldr	r3, [pc, #468]	; (8003554 <Es_Func+0x1f0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	429a      	cmp	r2, r3
 8003386:	d20b      	bcs.n	80033a0 <Es_Func+0x3c>
    		   {
    			   SlackTime = ListNotReady.Head->MsNextWakeTime-xTickCount;
 8003388:	4b71      	ldr	r3, [pc, #452]	; (8003550 <Es_Func+0x1ec>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b71      	ldr	r3, [pc, #452]	; (8003558 <Es_Func+0x1f4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b70      	ldr	r3, [pc, #448]	; (800355c <Es_Func+0x1f8>)
 800339c:	801a      	strh	r2, [r3, #0]
 800339e:	e01f      	b.n	80033e0 <Es_Func+0x7c>
    		   }

    		   /*Else run energy task*/
    		   else
    		   {
    			   SlackTime = (MsTcbEsTask->MsNextWakeTime - xTickCount) + MsTcbEsTask->MsWcet;
 80033a0:	4b6c      	ldr	r3, [pc, #432]	; (8003554 <Es_Func+0x1f0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	4b6b      	ldr	r3, [pc, #428]	; (8003558 <Es_Func+0x1f4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	4b68      	ldr	r3, [pc, #416]	; (8003554 <Es_Func+0x1f0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	b29a      	uxth	r2, r3
 80033be:	4b67      	ldr	r3, [pc, #412]	; (800355c <Es_Func+0x1f8>)
 80033c0:	801a      	strh	r2, [r3, #0]
    			   MsTcbEsTask->MsNextWakeTime += MsTcbEsTask->MsPeriod;
 80033c2:	4b64      	ldr	r3, [pc, #400]	; (8003554 <Es_Func+0x1f0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6959      	ldr	r1, [r3, #20]
 80033c8:	4b62      	ldr	r3, [pc, #392]	; (8003554 <Es_Func+0x1f0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4b61      	ldr	r3, [pc, #388]	; (8003554 <Es_Func+0x1f0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	440a      	add	r2, r1
 80033d4:	615a      	str	r2, [r3, #20]
    			   MsTcbEsTask->MsNumberExecJob++;
 80033d6:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <Es_Func+0x1f0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a1a      	ldr	r2, [r3, #32]
 80033dc:	3201      	adds	r2, #1
 80033de:	621a      	str	r2, [r3, #32]
    		   }

			   //Bug not fixed yet (when ListNotReady.Head->MsNextWakeTime is
			   // equal to xTickCount, i.e there is a job ready to perform  )
			   if(SlackTime==0 || SlackTime > 100 )
 80033e0:	4b5e      	ldr	r3, [pc, #376]	; (800355c <Es_Func+0x1f8>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <Es_Func+0x8c>
 80033e8:	4b5c      	ldr	r3, [pc, #368]	; (800355c <Es_Func+0x1f8>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	2b64      	cmp	r3, #100	; 0x64
 80033ee:	d902      	bls.n	80033f6 <Es_Func+0x92>
			   {
				   SlackTime = 1;
 80033f0:	4b5a      	ldr	r3, [pc, #360]	; (800355c <Es_Func+0x1f8>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	801a      	strh	r2, [r3, #0]
			   }

    		   /*Reconfigure systick */
       		   SysTick_Config(configCPU_CLOCK_HZ / (1000/SlackTime) );
 80033f6:	4b59      	ldr	r3, [pc, #356]	; (800355c <Es_Func+0x1f8>)
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003400:	fb93 f3f2 	sdiv	r3, r3, r2
 8003404:	4a56      	ldr	r2, [pc, #344]	; (8003560 <Es_Func+0x1fc>)
 8003406:	fb92 f3f3 	sdiv	r3, r2, r3
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fa88 	bl	8001920 <SysTick_Config>
//    		   SysTick_Config(21000000/ (1000/SlackTime) );

    		   ReconfigTimer = 1;
 8003410:	4b54      	ldr	r3, [pc, #336]	; (8003564 <Es_Func+0x200>)
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
    		   xTickCount+=(SlackTime-1);
 8003416:	4b51      	ldr	r3, [pc, #324]	; (800355c <Es_Func+0x1f8>)
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	4b4e      	ldr	r3, [pc, #312]	; (8003558 <Es_Func+0x1f4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4413      	add	r3, r2
 8003422:	3b01      	subs	r3, #1
 8003424:	4a4c      	ldr	r2, [pc, #304]	; (8003558 <Es_Func+0x1f4>)
 8003426:	6013      	str	r3, [r2, #0]

    		   GPIO_SetOutput(1);
 8003428:	2001      	movs	r0, #1
 800342a:	f7fe f8e5 	bl	80015f8 <GPIO_SetOutput>
    		   HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800342e:	2101      	movs	r1, #1
 8003430:	2000      	movs	r0, #0
 8003432:	f7fe f9b3 	bl	800179c <HAL_PWR_EnterSLEEPMode>
//    		   HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    		   break;
 8003436:	e088      	b.n	800354a <Es_Func+0x1e6>

    		   /*Check if there are tasks in ready list, this checking is made
    		    * via "ListNotReady.Qnt" variable. If ListNotReady.Qnt does not store all system tasks
    		    * then there is some taks in ready queue.
    		    * */
    		   MsTcbEsTask->MsNumberExecJob++;
 8003438:	4b46      	ldr	r3, [pc, #280]	; (8003554 <Es_Func+0x1f0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a1a      	ldr	r2, [r3, #32]
 800343e:	3201      	adds	r2, #1
 8003440:	621a      	str	r2, [r3, #32]
    		   if(ListNotReady.Qnt != (taskQnt-1) )
 8003442:	4b43      	ldr	r3, [pc, #268]	; (8003550 <Es_Func+0x1ec>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b48      	ldr	r3, [pc, #288]	; (8003568 <Es_Func+0x204>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	3b01      	subs	r3, #1
 800344c:	429a      	cmp	r2, r3
 800344e:	d033      	beq.n	80034b8 <Es_Func+0x154>
    		   {
        		   /*Reconfigure systick */
    			//   SlackTime = (MsTcbEsTask->MsNumberExecJob*MsTcbEsTask->MsPeriod + MsTcbEsTask->MsWcet)-xTickCount;
    			   SlackTime =  MsTcbEsTask->MsWcet;
 8003450:	4b40      	ldr	r3, [pc, #256]	; (8003554 <Es_Func+0x1f0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <Es_Func+0x1f8>)
 800345a:	801a      	strh	r2, [r3, #0]

    			   //Bug not fixed yet (when ListNotReady.Head->MsNextWakeTime is
    			   // equal to xTickCount, i.e there is a job ready to perform  )
    			   if(SlackTime==0 || SlackTime > 100 )
 800345c:	4b3f      	ldr	r3, [pc, #252]	; (800355c <Es_Func+0x1f8>)
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <Es_Func+0x108>
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <Es_Func+0x1f8>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d902      	bls.n	8003472 <Es_Func+0x10e>
    				   SlackTime = 1;
 800346c:	4b3b      	ldr	r3, [pc, #236]	; (800355c <Es_Func+0x1f8>)
 800346e:	2201      	movs	r2, #1
 8003470:	801a      	strh	r2, [r3, #0]


    			   SysTick_Config(configCPU_CLOCK_HZ / (1000/SlackTime) );
 8003472:	4b3a      	ldr	r3, [pc, #232]	; (800355c <Es_Func+0x1f8>)
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800347c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003480:	4a37      	ldr	r2, [pc, #220]	; (8003560 <Es_Func+0x1fc>)
 8003482:	fb92 f3f3 	sdiv	r3, r2, r3
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fa4a 	bl	8001920 <SysTick_Config>
//           		   SysTick_Config(configCPU_CLOCK_HZ / (1000) );

    		       ReconfigTimer = 1;
 800348c:	4b35      	ldr	r3, [pc, #212]	; (8003564 <Es_Func+0x200>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
    		       xTickCount+=(SlackTime-1);
 8003492:	4b32      	ldr	r3, [pc, #200]	; (800355c <Es_Func+0x1f8>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	461a      	mov	r2, r3
 8003498:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <Es_Func+0x1f4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4413      	add	r3, r2
 800349e:	3b01      	subs	r3, #1
 80034a0:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <Es_Func+0x1f4>)
 80034a2:	6013      	str	r3, [r2, #0]


    		       GPIO_SetOutput(1);
 80034a4:	2001      	movs	r0, #1
 80034a6:	f7fe f8a7 	bl	80015f8 <GPIO_SetOutput>

//    			   HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
    		       HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80034aa:	2101      	movs	r1, #1
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7fe f975 	bl	800179c <HAL_PWR_EnterSLEEPMode>
//        		   while(xTickCount < MsTcbEsTask->MsNumberExecJob*MsTcbEsTask->MsPeriod + MsTcbEsTask->MsWcet)
//        		   {}
//
        		   Ms_EndJobEsTask_Exec();
 80034b2:	f7ff f9d9 	bl	8002868 <Ms_EndJobEsTask_Exec>
        		   GPIO_SetOutput(1);
//        		   HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
        		   HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
    		   }

    	       break;
 80034b6:	e047      	b.n	8003548 <Es_Func+0x1e4>
    			   if(ListNotReady.Head->MsNextWakeTime < xTickCount + MsTcbEsTask->MsWcet )
 80034b8:	4b25      	ldr	r3, [pc, #148]	; (8003550 <Es_Func+0x1ec>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	4b25      	ldr	r3, [pc, #148]	; (8003554 <Es_Func+0x1f0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6919      	ldr	r1, [r3, #16]
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <Es_Func+0x1f4>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	440b      	add	r3, r1
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d206      	bcs.n	80034dc <Es_Func+0x178>
    				   SlackTime =  MsTcbEsTask->MsWcet;
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <Es_Func+0x1f0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	4b21      	ldr	r3, [pc, #132]	; (800355c <Es_Func+0x1f8>)
 80034d8:	801a      	strh	r2, [r3, #0]
 80034da:	e00a      	b.n	80034f2 <Es_Func+0x18e>
    				   SlackTime = (ListNotReady.Head->MsNextWakeTime-xTickCount);
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <Es_Func+0x1ec>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <Es_Func+0x1f4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <Es_Func+0x1f8>)
 80034f0:	801a      	strh	r2, [r3, #0]
    			   if(SlackTime==0 || SlackTime > 100 )
 80034f2:	4b1a      	ldr	r3, [pc, #104]	; (800355c <Es_Func+0x1f8>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <Es_Func+0x19e>
 80034fa:	4b18      	ldr	r3, [pc, #96]	; (800355c <Es_Func+0x1f8>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	2b64      	cmp	r3, #100	; 0x64
 8003500:	d902      	bls.n	8003508 <Es_Func+0x1a4>
    				   SlackTime = 1;
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <Es_Func+0x1f8>)
 8003504:	2201      	movs	r2, #1
 8003506:	801a      	strh	r2, [r3, #0]
        		   SysTick_Config(configCPU_CLOCK_HZ / (1000/SlackTime) );
 8003508:	4b14      	ldr	r3, [pc, #80]	; (800355c <Es_Func+0x1f8>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003512:	fb93 f3f2 	sdiv	r3, r3, r2
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <Es_Func+0x1fc>)
 8003518:	fb92 f3f3 	sdiv	r3, r2, r3
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe f9ff 	bl	8001920 <SysTick_Config>
    			   ReconfigTimer = 1;
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <Es_Func+0x200>)
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
        		   xTickCount+=(SlackTime-1);
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <Es_Func+0x1f8>)
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <Es_Func+0x1f4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	3b01      	subs	r3, #1
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <Es_Func+0x1f4>)
 8003538:	6013      	str	r3, [r2, #0]
        		   GPIO_SetOutput(1);
 800353a:	2001      	movs	r0, #1
 800353c:	f7fe f85c 	bl	80015f8 <GPIO_SetOutput>
        		   HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003540:	2101      	movs	r1, #1
 8003542:	2000      	movs	r0, #0
 8003544:	f7fe f92a 	bl	800179c <HAL_PWR_EnterSLEEPMode>
    	       break;
 8003548:	bf00      	nop
    	   switch(EsTask_Idle)
 800354a:	e70f      	b.n	800336c <Es_Func+0x8>
 800354c:	200001ca 	.word	0x200001ca
 8003550:	2000cbfc 	.word	0x2000cbfc
 8003554:	2000cbf8 	.word	0x2000cbf8
 8003558:	2000049c 	.word	0x2000049c
 800355c:	200004d0 	.word	0x200004d0
 8003560:	0a037a00 	.word	0x0a037a00
 8003564:	200001cb 	.word	0x200001cb
 8003568:	200001c9 	.word	0x200001c9

0800356c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3b04      	subs	r3, #4
 800357c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3b04      	subs	r3, #4
 800358a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f023 0201 	bic.w	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3b04      	subs	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800359c:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <pxPortInitialiseStack+0x64>)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3b14      	subs	r3, #20
 80035a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	3b04      	subs	r3, #4
 80035b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f06f 0202 	mvn.w	r2, #2
 80035ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3b20      	subs	r3, #32
 80035c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035c2:	68fb      	ldr	r3, [r7, #12]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	080035d5 	.word	0x080035d5

080035d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <prvTaskExitError+0x50>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d009      	beq.n	80035fc <prvTaskExitError+0x28>
	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	e7fe      	b.n	80035fa <prvTaskExitError+0x26>
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800360e:	bf00      	nop
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0fc      	beq.n	8003610 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000000 	.word	0x20000000
	...

08003630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <pxCurrentTCBConst2>)
 8003632:	6819      	ldr	r1, [r3, #0]
 8003634:	6808      	ldr	r0, [r1, #0]
 8003636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363a:	f380 8809 	msr	PSP, r0
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f04f 0000 	mov.w	r0, #0
 8003646:	f380 8811 	msr	BASEPRI, r0
 800364a:	4770      	bx	lr
 800364c:	f3af 8000 	nop.w

08003650 <pxCurrentTCBConst2>:
 8003650:	200001cc 	.word	0x200001cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop

08003658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003658:	4808      	ldr	r0, [pc, #32]	; (800367c <prvPortStartFirstTask+0x24>)
 800365a:	6800      	ldr	r0, [r0, #0]
 800365c:	6800      	ldr	r0, [r0, #0]
 800365e:	f380 8808 	msr	MSP, r0
 8003662:	f04f 0000 	mov.w	r0, #0
 8003666:	f380 8814 	msr	CONTROL, r0
 800366a:	b662      	cpsie	i
 800366c:	b661      	cpsie	f
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	df00      	svc	0
 8003678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800367a:	bf00      	nop
 800367c:	e000ed08 	.word	0xe000ed08

08003680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003686:	4b4c      	ldr	r3, [pc, #304]	; (80037b8 <xPortStartScheduler+0x138>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a4c      	ldr	r2, [pc, #304]	; (80037bc <xPortStartScheduler+0x13c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d109      	bne.n	80036a4 <xPortStartScheduler+0x24>
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	e7fe      	b.n	80036a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036a4:	4b44      	ldr	r3, [pc, #272]	; (80037b8 <xPortStartScheduler+0x138>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a45      	ldr	r2, [pc, #276]	; (80037c0 <xPortStartScheduler+0x140>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d109      	bne.n	80036c2 <xPortStartScheduler+0x42>
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	e7fe      	b.n	80036c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036c2:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <xPortStartScheduler+0x144>)
 80036c4:	61fb      	str	r3, [r7, #28]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b38      	ldr	r3, [pc, #224]	; (80037c8 <xPortStartScheduler+0x148>)
 80036e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036ea:	4b38      	ldr	r3, [pc, #224]	; (80037cc <xPortStartScheduler+0x14c>)
 80036ec:	2207      	movs	r2, #7
 80036ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036f0:	e009      	b.n	8003706 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80036f2:	4b36      	ldr	r3, [pc, #216]	; (80037cc <xPortStartScheduler+0x14c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	4a34      	ldr	r2, [pc, #208]	; (80037cc <xPortStartScheduler+0x14c>)
 80036fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d0ef      	beq.n	80036f2 <xPortStartScheduler+0x72>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 8003712:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <xPortStartScheduler+0x14c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f1c3 0307 	rsb	r3, r3, #7
 800371a:	2b04      	cmp	r3, #4
 800371c:	d009      	beq.n	8003732 <xPortStartScheduler+0xb2>
 800371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	e7fe      	b.n	8003730 <xPortStartScheduler+0xb0>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003732:	4b26      	ldr	r3, [pc, #152]	; (80037cc <xPortStartScheduler+0x14c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1c3 0307 	rsb	r3, r3, #7
 800373a:	2b04      	cmp	r3, #4
 800373c:	d009      	beq.n	8003752 <xPortStartScheduler+0xd2>
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e7fe      	b.n	8003750 <xPortStartScheduler+0xd0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003752:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <xPortStartScheduler+0x14c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	4a1c      	ldr	r2, [pc, #112]	; (80037cc <xPortStartScheduler+0x14c>)
 800375a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <xPortStartScheduler+0x14c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003764:	4a19      	ldr	r2, [pc, #100]	; (80037cc <xPortStartScheduler+0x14c>)
 8003766:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <xPortStartScheduler+0x150>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a16      	ldr	r2, [pc, #88]	; (80037d0 <xPortStartScheduler+0x150>)
 8003776:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800377a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <xPortStartScheduler+0x150>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a13      	ldr	r2, [pc, #76]	; (80037d0 <xPortStartScheduler+0x150>)
 8003782:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003786:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003788:	f000 f8da 	bl	8003940 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <xPortStartScheduler+0x154>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003792:	f000 f8f1 	bl	8003978 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003796:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <xPortStartScheduler+0x158>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <xPortStartScheduler+0x158>)
 800379c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80037a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80037a2:	f7ff ff59 	bl	8003658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80037a6:	f7fe fdbf 	bl	8002328 <vTaskSwitchContext>
	prvTaskExitError();
 80037aa:	f7ff ff13 	bl	80035d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	e000ed00 	.word	0xe000ed00
 80037bc:	410fc271 	.word	0x410fc271
 80037c0:	410fc270 	.word	0x410fc270
 80037c4:	e000e400 	.word	0xe000e400
 80037c8:	200004d2 	.word	0x200004d2
 80037cc:	200004d4 	.word	0x200004d4
 80037d0:	e000ed20 	.word	0xe000ed20
 80037d4:	20000000 	.word	0x20000000
 80037d8:	e000ef34 	.word	0xe000ef34

080037dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <vPortEnterCritical+0x54>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	4a0d      	ldr	r2, [pc, #52]	; (8003830 <vPortEnterCritical+0x54>)
 80037fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <vPortEnterCritical+0x54>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d10e      	bne.n	8003824 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <vPortEnterCritical+0x58>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d009      	beq.n	8003824 <vPortEnterCritical+0x48>
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	e7fe      	b.n	8003822 <vPortEnterCritical+0x46>
	}
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20000000 	.word	0x20000000
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <vPortExitCritical+0x4c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <vPortExitCritical+0x22>
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	e7fe      	b.n	8003858 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <vPortExitCritical+0x4c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3b01      	subs	r3, #1
 8003860:	4a08      	ldr	r2, [pc, #32]	; (8003884 <vPortExitCritical+0x4c>)
 8003862:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <vPortExitCritical+0x4c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d104      	bne.n	8003876 <vPortExitCritical+0x3e>
 800386c:	2300      	movs	r3, #0
 800386e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000
	...

08003890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003890:	f3ef 8009 	mrs	r0, PSP
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <pxCurrentTCBConst>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f01e 0f10 	tst.w	lr, #16
 80038a0:	bf08      	it	eq
 80038a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038b4:	f380 8811 	msr	BASEPRI, r0
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f7fe fd32 	bl	8002328 <vTaskSwitchContext>
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f380 8811 	msr	BASEPRI, r0
 80038cc:	bc09      	pop	{r0, r3}
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d6:	f01e 0f10 	tst.w	lr, #16
 80038da:	bf08      	it	eq
 80038dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038e0:	f380 8809 	msr	PSP, r0
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	f3af 8000 	nop.w

080038f0 <pxCurrentTCBConst>:
 80038f0:	200001cc 	.word	0x200001cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop

080038f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */

	GPIO_ToggleOutput(2);
 80038fe:	2002      	movs	r0, #2
 8003900:	f7fd ff06 	bl	8001710 <GPIO_ToggleOutput>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	607b      	str	r3, [r7, #4]

	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003916:	f7fe fb23 	bl	8001f60 <xTaskIncrementTick>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <SysTick_Handler+0x44>)
 8003922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	2300      	movs	r3, #0
 800392a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003932:	bf00      	nop
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	e000ed04 	.word	0xe000ed04

08003940 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <vPortSetupTimerInterrupt+0x28>)
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <vPortSetupTimerInterrupt+0x2c>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <vPortSetupTimerInterrupt+0x30>)
 8003952:	4a08      	ldr	r2, [pc, #32]	; (8003974 <vPortSetupTimerInterrupt+0x34>)
 8003954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <vPortSetupTimerInterrupt+0x28>)
 8003958:	2207      	movs	r2, #7
 800395a:	601a      	str	r2, [r3, #0]
}
 800395c:	bf00      	nop
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010
 800396c:	e000e018 	.word	0xe000e018
 8003970:	e000e014 	.word	0xe000e014
 8003974:	0002903f 	.word	0x0002903f

08003978 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003978:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003988 <vPortEnableVFP+0x10>
 800397c:	6801      	ldr	r1, [r0, #0]
 800397e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003982:	6001      	str	r1, [r0, #0]
 8003984:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003986:	bf00      	nop
 8003988:	e000ed88 	.word	0xe000ed88

0800398c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003992:	f3ef 8305 	mrs	r3, IPSR
 8003996:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b0f      	cmp	r3, #15
 800399c:	d913      	bls.n	80039c6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800399e:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <vPortValidateInterruptPriority+0x6c>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <vPortValidateInterruptPriority+0x70>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	7afa      	ldrb	r2, [r7, #11]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d209      	bcs.n	80039c6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	e7fe      	b.n	80039c4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039c6:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <vPortValidateInterruptPriority+0x74>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <vPortValidateInterruptPriority+0x78>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d909      	bls.n	80039ea <vPortValidateInterruptPriority+0x5e>
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	e7fe      	b.n	80039e8 <vPortValidateInterruptPriority+0x5c>
	}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000e3f0 	.word	0xe000e3f0
 80039fc:	200004d2 	.word	0x200004d2
 8003a00:	e000ed0c 	.word	0xe000ed0c
 8003a04:	200004d4 	.word	0x200004d4

08003a08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a14:	f7fe f96c 	bl	8001cf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a18:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <pvPortMalloc+0x170>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a20:	f000 f90c 	bl	8003c3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a24:	4b55      	ldr	r3, [pc, #340]	; (8003b7c <pvPortMalloc+0x174>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f040 808c 	bne.w	8003b4a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01c      	beq.n	8003a72 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003a38:	2208      	movs	r2, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d013      	beq.n	8003a72 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f023 0307 	bic.w	r3, r3, #7
 8003a50:	3308      	adds	r3, #8
 8003a52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <pvPortMalloc+0x6a>
 8003a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e7fe      	b.n	8003a70 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d068      	beq.n	8003b4a <pvPortMalloc+0x142>
 8003a78:	4b41      	ldr	r3, [pc, #260]	; (8003b80 <pvPortMalloc+0x178>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d863      	bhi.n	8003b4a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003a82:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <pvPortMalloc+0x17c>)
 8003a84:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003a86:	4b3f      	ldr	r3, [pc, #252]	; (8003b84 <pvPortMalloc+0x17c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a8c:	e004      	b.n	8003a98 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d903      	bls.n	8003aaa <pvPortMalloc+0xa2>
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f1      	bne.n	8003a8e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003aaa:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <pvPortMalloc+0x170>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d04a      	beq.n	8003b4a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	4413      	add	r3, r2
 8003abc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	1ad2      	subs	r2, r2, r3
 8003ace:	2308      	movs	r3, #8
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d91e      	bls.n	8003b14 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4413      	add	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d009      	beq.n	8003afc <pvPortMalloc+0xf4>
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	e7fe      	b.n	8003afa <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	1ad2      	subs	r2, r2, r3
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b0e:	69b8      	ldr	r0, [r7, #24]
 8003b10:	f000 f8f6 	bl	8003d00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <pvPortMalloc+0x178>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <pvPortMalloc+0x178>)
 8003b20:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b22:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <pvPortMalloc+0x178>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b18      	ldr	r3, [pc, #96]	; (8003b88 <pvPortMalloc+0x180>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d203      	bcs.n	8003b36 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <pvPortMalloc+0x178>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <pvPortMalloc+0x180>)
 8003b34:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <pvPortMalloc+0x174>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003b4a:	f7fe f8df 	bl	8001d0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <pvPortMalloc+0x164>
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e7fe      	b.n	8003b6a <pvPortMalloc+0x162>
	return pvReturn;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3728      	adds	r7, #40	; 0x28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	2000a4e0 	.word	0x2000a4e0
 8003b7c:	2000a4ec 	.word	0x2000a4ec
 8003b80:	2000a4e4 	.word	0x2000a4e4
 8003b84:	2000a4d8 	.word	0x2000a4d8
 8003b88:	2000a4e8 	.word	0x2000a4e8

08003b8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d046      	beq.n	8003c2c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	425b      	negs	r3, r3
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <vPortFree+0xa8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <vPortFree+0x42>
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	e7fe      	b.n	8003bcc <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <vPortFree+0x5e>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	e7fe      	b.n	8003be8 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <vPortFree+0xa8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d019      	beq.n	8003c2c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d115      	bne.n	8003c2c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <vPortFree+0xa8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	401a      	ands	r2, r3
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c10:	f7fe f86e 	bl	8001cf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <vPortFree+0xac>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4a06      	ldr	r2, [pc, #24]	; (8003c38 <vPortFree+0xac>)
 8003c20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c22:	6938      	ldr	r0, [r7, #16]
 8003c24:	f000 f86c 	bl	8003d00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003c28:	f7fe f870 	bl	8001d0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c2c:	bf00      	nop
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	2000a4ec 	.word	0x2000a4ec
 8003c38:	2000a4e4 	.word	0x2000a4e4

08003c3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c42:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003c46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003c48:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <prvHeapInit+0xac>)
 8003c4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00c      	beq.n	8003c70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3307      	adds	r3, #7
 8003c5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0307 	bic.w	r3, r3, #7
 8003c62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ce8 <prvHeapInit+0xac>)
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c74:	4a1d      	ldr	r2, [pc, #116]	; (8003cec <prvHeapInit+0xb0>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <prvHeapInit+0xb0>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	4413      	add	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003c88:	2208      	movs	r2, #8
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0307 	bic.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a15      	ldr	r2, [pc, #84]	; (8003cf0 <prvHeapInit+0xb4>)
 8003c9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <prvHeapInit+0xb4>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <prvHeapInit+0xb4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	1ad2      	subs	r2, r2, r3
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <prvHeapInit+0xb4>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <prvHeapInit+0xb8>)
 8003cca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <prvHeapInit+0xbc>)
 8003cd2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <prvHeapInit+0xc0>)
 8003cd6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cda:	601a      	str	r2, [r3, #0]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	200004d8 	.word	0x200004d8
 8003cec:	2000a4d8 	.word	0x2000a4d8
 8003cf0:	2000a4e0 	.word	0x2000a4e0
 8003cf4:	2000a4e8 	.word	0x2000a4e8
 8003cf8:	2000a4e4 	.word	0x2000a4e4
 8003cfc:	2000a4ec 	.word	0x2000a4ec

08003d00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <prvInsertBlockIntoFreeList+0xac>)
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e002      	b.n	8003d14 <prvInsertBlockIntoFreeList+0x14>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d8f7      	bhi.n	8003d0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	4413      	add	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d108      	bne.n	8003d42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	441a      	add	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	441a      	add	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d118      	bne.n	8003d88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <prvInsertBlockIntoFreeList+0xb0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d00d      	beq.n	8003d7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	441a      	add	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e008      	b.n	8003d90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <prvInsertBlockIntoFreeList+0xb0>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e003      	b.n	8003d90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d002      	beq.n	8003d9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	2000a4d8 	.word	0x2000a4d8
 8003db0:	2000a4e0 	.word	0x2000a4e0

08003db4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 8003dba:	4b21      	ldr	r3, [pc, #132]	; (8003e40 <_DoInit+0x8c>)
 8003dbc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <_DoInit+0x90>)
 8003dce:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <_DoInit+0x94>)
 8003dd4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ddc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <_DoInit+0x90>)
 8003df4:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <_DoInit+0x98>)
 8003dfa:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2210      	movs	r2, #16
 8003e00:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3307      	adds	r3, #7
 8003e18:	4a0d      	ldr	r2, [pc, #52]	; (8003e50 <_DoInit+0x9c>)
 8003e1a:	6810      	ldr	r0, [r2, #0]
 8003e1c:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a0c      	ldr	r2, [pc, #48]	; (8003e54 <_DoInit+0xa0>)
 8003e22:	6810      	ldr	r0, [r2, #0]
 8003e24:	6018      	str	r0, [r3, #0]
 8003e26:	8891      	ldrh	r1, [r2, #4]
 8003e28:	7992      	ldrb	r2, [r2, #6]
 8003e2a:	8099      	strh	r1, [r3, #4]
 8003e2c:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	719a      	strb	r2, [r3, #6]
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	2000cc14 	.word	0x2000cc14
 8003e44:	08005840 	.word	0x08005840
 8003e48:	2000a4f0 	.word	0x2000a4f0
 8003e4c:	2000a8f0 	.word	0x2000a8f0
 8003e50:	0800584c 	.word	0x0800584c
 8003e54:	08005850 	.word	0x08005850

08003e58 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8003e64:	4b3c      	ldr	r3, [pc, #240]	; (8003f58 <SEGGER_RTT_ReadNoLock+0x100>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <SEGGER_RTT_ReadNoLock+0x18>
 8003e6c:	f7ff ffa2 	bl	8003db4 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4613      	mov	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	3360      	adds	r3, #96	; 0x60
 8003e7c:	4a36      	ldr	r2, [pc, #216]	; (8003f58 <SEGGER_RTT_ReadNoLock+0x100>)
 8003e7e:	4413      	add	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e96:	6a3a      	ldr	r2, [r7, #32]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d92a      	bls.n	8003ef4 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4293      	cmp	r3, r2
 8003eae:	bf28      	it	cs
 8003eb0:	4613      	movcs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	4413      	add	r3, r2
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	69f8      	ldr	r0, [r7, #28]
 8003ec2:	f001 fc9a 	bl	80057fa <memcpy>
    NumBytesRead += NumBytesRem;
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ede:	6a3a      	ldr	r2, [r7, #32]
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	6a3a      	ldr	r2, [r7, #32]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d101      	bne.n	8003ef4 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4293      	cmp	r3, r2
 8003f02:	bf28      	it	cs
 8003f04:	4613      	movcs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d018      	beq.n	8003f40 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	4413      	add	r3, r2
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	69f8      	ldr	r0, [r7, #28]
 8003f1c:	f001 fc6d 	bl	80057fa <memcpy>
    NumBytesRead += NumBytesRem;
 8003f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4413      	add	r3, r2
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f38:	6a3a      	ldr	r2, [r7, #32]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	6a3a      	ldr	r2, [r7, #32]
 8003f4a:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3728      	adds	r7, #40	; 0x28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	2000cc14 	.word	0x2000cc14

08003f5c <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4a3f      	ldr	r2, [pc, #252]	; (8004078 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8003f7a:	4413      	add	r3, r2
 8003f7c:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8003f8a:	69fa      	ldr	r2, [r7, #28]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d854      	bhi.n	800403c <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d30f      	bcc.n	8003fc6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	4413      	add	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 fc21 	bl	80057fa <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	441a      	add	r2, r3
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e054      	b.n	8004070 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	4413      	add	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d34b      	bcc.n	800406e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d90e      	bls.n	8004006 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	4413      	add	r3, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 fc00 	bl	80057fa <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	441a      	add	r2, r3
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	e018      	b.n	8004038 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	4413      	add	r3, r2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004012:	4618      	mov	r0, r3
 8004014:	f001 fbf1 	bl	80057fa <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8004018:	6a3b      	ldr	r3, [r7, #32]
 800401a:	6858      	ldr	r0, [r3, #4]
 800401c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	18d1      	adds	r1, r2, r3
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	461a      	mov	r2, r3
 800402a:	f001 fbe6 	bl	80057fa <memcpy>
        pRing->WrOff = NumBytes - Rem;
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad2      	subs	r2, r2, r3
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8004038:	2301      	movs	r3, #1
 800403a:	e019      	b.n	8004070 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	429a      	cmp	r2, r3
 800404c:	d30f      	bcc.n	800406e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	4413      	add	r3, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405a:	4618      	mov	r0, r3
 800405c:	f001 fbcd 	bl	80057fa <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	441a      	add	r2, r3
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3728      	adds	r7, #40	; 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	2000cc14 	.word	0x2000cc14

0800407c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800408a:	4b30      	ldr	r3, [pc, #192]	; (800414c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8004092:	f7ff fe8f 	bl	8003db4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8004096:	4b2d      	ldr	r3, [pc, #180]	; (800414c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	461a      	mov	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4293      	cmp	r3, r2
 80040a0:	d24c      	bcs.n	800413c <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 80040a2:	f3ef 8311 	mrs	r3, BASEPRI
 80040a6:	f04f 0120 	mov.w	r1, #32
 80040aa:	f381 8811 	msr	BASEPRI, r1
 80040ae:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d032      	beq.n	800411c <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80040b6:	4925      	ldr	r1, [pc, #148]	; (800414c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	4613      	mov	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4413      	add	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	440b      	add	r3, r1
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80040ca:	4920      	ldr	r1, [pc, #128]	; (800414c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	4613      	mov	r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	4413      	add	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	440b      	add	r3, r1
 80040da:	3304      	adds	r3, #4
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80040e0:	491a      	ldr	r1, [pc, #104]	; (800414c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4613      	mov	r3, r2
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	4413      	add	r3, r2
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	440b      	add	r3, r1
 80040ee:	3320      	adds	r3, #32
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80040f4:	4915      	ldr	r1, [pc, #84]	; (800414c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	440b      	add	r3, r1
 8004102:	3328      	adds	r3, #40	; 0x28
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8004108:	4910      	ldr	r1, [pc, #64]	; (800414c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4613      	mov	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	4413      	add	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	440b      	add	r3, r1
 8004116:	3324      	adds	r3, #36	; 0x24
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 800411c:	490b      	ldr	r1, [pc, #44]	; (800414c <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	4413      	add	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	440b      	add	r3, r1
 800412a:	332c      	adds	r3, #44	; 0x2c
 800412c:	6a3a      	ldr	r2, [r7, #32]
 800412e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
 800413a:	e002      	b.n	8004142 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 800413c:	f04f 33ff 	mov.w	r3, #4294967295
 8004140:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004142:	697b      	ldr	r3, [r7, #20]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	2000cc14 	.word	0x2000cc14

08004150 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800415e:	4b30      	ldr	r3, [pc, #192]	; (8004220 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8004166:	f7ff fe25 	bl	8003db4 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800416a:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4293      	cmp	r3, r2
 8004174:	d24b      	bcs.n	800420e <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8004176:	f3ef 8311 	mrs	r3, BASEPRI
 800417a:	f04f 0120 	mov.w	r1, #32
 800417e:	f381 8811 	msr	BASEPRI, r1
 8004182:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d031      	beq.n	80041ee <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800418a:	4925      	ldr	r1, [pc, #148]	; (8004220 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4613      	mov	r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	440b      	add	r3, r1
 8004198:	3360      	adds	r3, #96	; 0x60
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800419e:	4920      	ldr	r1, [pc, #128]	; (8004220 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4613      	mov	r3, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4413      	add	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	440b      	add	r3, r1
 80041ac:	3364      	adds	r3, #100	; 0x64
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80041b2:	491b      	ldr	r1, [pc, #108]	; (8004220 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4613      	mov	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4413      	add	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	440b      	add	r3, r1
 80041c0:	3368      	adds	r3, #104	; 0x68
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80041c6:	4916      	ldr	r1, [pc, #88]	; (8004220 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	440b      	add	r3, r1
 80041d4:	3370      	adds	r3, #112	; 0x70
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80041da:	4911      	ldr	r1, [pc, #68]	; (8004220 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4613      	mov	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	4413      	add	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	440b      	add	r3, r1
 80041e8:	336c      	adds	r3, #108	; 0x6c
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80041ee:	490c      	ldr	r1, [pc, #48]	; (8004220 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	440b      	add	r3, r1
 80041fc:	3374      	adds	r3, #116	; 0x74
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e002      	b.n	8004214 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
 8004212:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004214:	697b      	ldr	r3, [r7, #20]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	2000cc14 	.word	0x2000cc14

08004224 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004234:	e002      	b.n	800423c <_EncodeStr+0x18>
    Len++;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	3301      	adds	r3, #1
 800423a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f6      	bne.n	8004236 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	429a      	cmp	r2, r3
 800424e:	d901      	bls.n	8004254 <_EncodeStr+0x30>
    Len = Limit;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2bfe      	cmp	r3, #254	; 0xfe
 8004258:	d806      	bhi.n	8004268 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	60fa      	str	r2, [r7, #12]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]
 8004266:	e011      	b.n	800428c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	60fa      	str	r2, [r7, #12]
 800426e:	22ff      	movs	r2, #255	; 0xff
 8004270:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	60fa      	str	r2, [r7, #12]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	0a19      	lsrs	r1, r3, #8
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	60fa      	str	r2, [r7, #12]
 8004288:	b2ca      	uxtb	r2, r1
 800428a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004290:	e00a      	b.n	80042a8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	1c53      	adds	r3, r2, #1
 8004296:	60bb      	str	r3, [r7, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	60f9      	str	r1, [r7, #12]
 800429e:	7812      	ldrb	r2, [r2, #0]
 80042a0:	701a      	strb	r2, [r3, #0]
    n++;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	3301      	adds	r3, #1
 80042a6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d3f0      	bcc.n	8004292 <_EncodeStr+0x6e>
  }
  return pPayload;
 80042b0:	68fb      	ldr	r3, [r7, #12]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042dc:	1cfb      	adds	r3, r7, #3
 80042de:	2201      	movs	r2, #1
 80042e0:	4619      	mov	r1, r3
 80042e2:	2001      	movs	r0, #1
 80042e4:	f7ff fdb8 	bl	8003e58 <SEGGER_RTT_ReadNoLock>
 80042e8:	4603      	mov	r3, r0
 80042ea:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	dd44      	ble.n	800437c <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d01a      	beq.n	800432e <_HandleIncomingPacket+0x58>
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	dc06      	bgt.n	800430a <_HandleIncomingPacket+0x34>
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d010      	beq.n	8004322 <_HandleIncomingPacket+0x4c>
 8004300:	2b02      	cmp	r3, #2
 8004302:	dc11      	bgt.n	8004328 <_HandleIncomingPacket+0x52>
 8004304:	2b01      	cmp	r3, #1
 8004306:	d009      	beq.n	800431c <_HandleIncomingPacket+0x46>
 8004308:	e02d      	b.n	8004366 <_HandleIncomingPacket+0x90>
 800430a:	2b06      	cmp	r3, #6
 800430c:	d015      	beq.n	800433a <_HandleIncomingPacket+0x64>
 800430e:	2b06      	cmp	r3, #6
 8004310:	db10      	blt.n	8004334 <_HandleIncomingPacket+0x5e>
 8004312:	2b07      	cmp	r3, #7
 8004314:	d014      	beq.n	8004340 <_HandleIncomingPacket+0x6a>
 8004316:	2b80      	cmp	r3, #128	; 0x80
 8004318:	d015      	beq.n	8004346 <_HandleIncomingPacket+0x70>
 800431a:	e024      	b.n	8004366 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800431c:	f000 fa7e 	bl	800481c <SEGGER_SYSVIEW_Start>
      break;
 8004320:	e031      	b.n	8004386 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004322:	f000 fb37 	bl	8004994 <SEGGER_SYSVIEW_Stop>
      break;
 8004326:	e02e      	b.n	8004386 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004328:	f000 fd12 	bl	8004d50 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800432c:	e02b      	b.n	8004386 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800432e:	f000 fcd7 	bl	8004ce0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004332:	e028      	b.n	8004386 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004334:	f000 fb54 	bl	80049e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004338:	e025      	b.n	8004386 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800433a:	f000 febf 	bl	80050bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 800433e:	e022      	b.n	8004386 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004340:	f000 fe9e 	bl	8005080 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004344:	e01f      	b.n	8004386 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004346:	1cfb      	adds	r3, r7, #3
 8004348:	2201      	movs	r2, #1
 800434a:	4619      	mov	r1, r3
 800434c:	2001      	movs	r0, #1
 800434e:	f7ff fd83 	bl	8003e58 <SEGGER_RTT_ReadNoLock>
 8004352:	4603      	mov	r3, r0
 8004354:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	dd11      	ble.n	8004380 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fe0e 	bl	8004f80 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004364:	e00c      	b.n	8004380 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	b25b      	sxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	da0a      	bge.n	8004384 <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800436e:	1cfb      	adds	r3, r7, #3
 8004370:	2201      	movs	r2, #1
 8004372:	4619      	mov	r1, r3
 8004374:	2001      	movs	r0, #1
 8004376:	f7ff fd6f 	bl	8003e58 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800437a:	e003      	b.n	8004384 <_HandleIncomingPacket+0xae>
    }
  }
 800437c:	bf00      	nop
 800437e:	e002      	b.n	8004386 <_HandleIncomingPacket+0xb0>
      break;
 8004380:	bf00      	nop
 8004382:	e000      	b.n	8004386 <_HandleIncomingPacket+0xb0>
      break;
 8004384:	bf00      	nop
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004396:	2301      	movs	r3, #1
 8004398:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800439a:	1d3b      	adds	r3, r7, #4
 800439c:	3301      	adds	r3, #1
 800439e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a4:	4b30      	ldr	r3, [pc, #192]	; (8004468 <_TrySendOverflowPacket+0xd8>)
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043aa:	e00b      	b.n	80043c4 <_TrySendOverflowPacket+0x34>
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b2:	1c59      	adds	r1, r3, #1
 80043b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	09db      	lsrs	r3, r3, #7
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	2b7f      	cmp	r3, #127	; 0x7f
 80043c8:	d8f0      	bhi.n	80043ac <_TrySendOverflowPacket+0x1c>
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043da:	4b24      	ldr	r3, [pc, #144]	; (800446c <_TrySendOverflowPacket+0xdc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043e0:	4b21      	ldr	r3, [pc, #132]	; (8004468 <_TrySendOverflowPacket+0xd8>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	623b      	str	r3, [r7, #32]
 80043f2:	e00b      	b.n	800440c <_TrySendOverflowPacket+0x7c>
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	1c59      	adds	r1, r3, #1
 80043fc:	6279      	str	r1, [r7, #36]	; 0x24
 80043fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	09db      	lsrs	r3, r3, #7
 800440a:	623b      	str	r3, [r7, #32]
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	2b7f      	cmp	r3, #127	; 0x7f
 8004410:	d8f0      	bhi.n	80043f4 <_TrySendOverflowPacket+0x64>
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	627a      	str	r2, [r7, #36]	; 0x24
 8004418:	6a3a      	ldr	r2, [r7, #32]
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	1d3b      	adds	r3, r7, #4
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	461a      	mov	r2, r3
 800442a:	1d3b      	adds	r3, r7, #4
 800442c:	4619      	mov	r1, r3
 800442e:	2001      	movs	r0, #1
 8004430:	f7ff fd94 	bl	8003f5c <SEGGER_RTT_WriteSkipNoLock>
 8004434:	4603      	mov	r3, r0
 8004436:	613b      	str	r3, [r7, #16]
  if (Status) {
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800443e:	4a0a      	ldr	r2, [pc, #40]	; (8004468 <_TrySendOverflowPacket+0xd8>)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004444:	4b08      	ldr	r3, [pc, #32]	; (8004468 <_TrySendOverflowPacket+0xd8>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	3b01      	subs	r3, #1
 800444a:	b2da      	uxtb	r2, r3
 800444c:	4b06      	ldr	r3, [pc, #24]	; (8004468 <_TrySendOverflowPacket+0xd8>)
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e004      	b.n	800445c <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <_TrySendOverflowPacket+0xd8>)
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	3301      	adds	r3, #1
 8004458:	4a03      	ldr	r2, [pc, #12]	; (8004468 <_TrySendOverflowPacket+0xd8>)
 800445a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800445c:	693b      	ldr	r3, [r7, #16]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3730      	adds	r7, #48	; 0x30
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	2000ad08 	.word	0x2000ad08
 800446c:	e0001004 	.word	0xe0001004

08004470 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800447c:	4b63      	ldr	r3, [pc, #396]	; (800460c <_SendPacket+0x19c>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d010      	beq.n	80044a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004484:	4b61      	ldr	r3, [pc, #388]	; (800460c <_SendPacket+0x19c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80a1 	beq.w	80045d0 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800448e:	4b5f      	ldr	r3, [pc, #380]	; (800460c <_SendPacket+0x19c>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d109      	bne.n	80044aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004496:	f7ff ff7b 	bl	8004390 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800449a:	4b5c      	ldr	r3, [pc, #368]	; (800460c <_SendPacket+0x19c>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	f040 8098 	bne.w	80045d4 <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 80044a4:	e001      	b.n	80044aa <_SendPacket+0x3a>
    goto Send;
 80044a6:	bf00      	nop
 80044a8:	e000      	b.n	80044ac <_SendPacket+0x3c>
Send:
 80044aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b1f      	cmp	r3, #31
 80044b0:	d809      	bhi.n	80044c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80044b2:	4b56      	ldr	r3, [pc, #344]	; (800460c <_SendPacket+0x19c>)
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 8089 	bne.w	80045d8 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b17      	cmp	r3, #23
 80044ca:	d807      	bhi.n	80044dc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e03d      	b.n	8004558 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b7f      	cmp	r3, #127	; 0x7f
 80044e8:	d912      	bls.n	8004510 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	09da      	lsrs	r2, r3, #7
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	3a01      	subs	r2, #1
 8004502:	60fa      	str	r2, [r7, #12]
 8004504:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e006      	b.n	800451e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3b01      	subs	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b7f      	cmp	r3, #127	; 0x7f
 8004522:	d912      	bls.n	800454a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	09da      	lsrs	r2, r3, #7
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3b01      	subs	r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	3a01      	subs	r2, #1
 800453c:	60fa      	str	r2, [r7, #12]
 800453e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e006      	b.n	8004558 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3b01      	subs	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <_SendPacket+0x1a0>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800455e:	4b2b      	ldr	r3, [pc, #172]	; (800460c <_SendPacket+0x19c>)
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	e00b      	b.n	800458a <_SendPacket+0x11a>
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	b2da      	uxtb	r2, r3
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	1c59      	adds	r1, r3, #1
 800457a:	6279      	str	r1, [r7, #36]	; 0x24
 800457c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	09db      	lsrs	r3, r3, #7
 8004588:	623b      	str	r3, [r7, #32]
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	2b7f      	cmp	r3, #127	; 0x7f
 800458e:	d8f0      	bhi.n	8004572 <_SendPacket+0x102>
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	627a      	str	r2, [r7, #36]	; 0x24
 8004596:	6a3a      	ldr	r2, [r7, #32]
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	68f9      	ldr	r1, [r7, #12]
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7ff fcd6 	bl	8003f5c <SEGGER_RTT_WriteSkipNoLock>
 80045b0:	4603      	mov	r3, r0
 80045b2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045ba:	4a14      	ldr	r2, [pc, #80]	; (800460c <_SendPacket+0x19c>)
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	60d3      	str	r3, [r2, #12]
 80045c0:	e00b      	b.n	80045da <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <_SendPacket+0x19c>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <_SendPacket+0x19c>)
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e004      	b.n	80045da <_SendPacket+0x16a>
    goto SendDone;
 80045d0:	bf00      	nop
 80045d2:	e002      	b.n	80045da <_SendPacket+0x16a>
      goto SendDone;
 80045d4:	bf00      	nop
 80045d6:	e000      	b.n	80045da <_SendPacket+0x16a>
      goto SendDone;
 80045d8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80045da:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <_SendPacket+0x1a4>)
 80045dc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80045e0:	4b0c      	ldr	r3, [pc, #48]	; (8004614 <_SendPacket+0x1a4>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d00b      	beq.n	8004602 <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80045ea:	4b08      	ldr	r3, [pc, #32]	; (800460c <_SendPacket+0x19c>)
 80045ec:	789b      	ldrb	r3, [r3, #2]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d107      	bne.n	8004602 <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <_SendPacket+0x19c>)
 80045f4:	2201      	movs	r2, #1
 80045f6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80045f8:	f7ff fe6d 	bl	80042d6 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80045fc:	4b03      	ldr	r3, [pc, #12]	; (800460c <_SendPacket+0x19c>)
 80045fe:	2200      	movs	r2, #0
 8004600:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004602:	bf00      	nop
 8004604:	3728      	adds	r7, #40	; 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	2000ad08 	.word	0x2000ad08
 8004610:	e0001004 	.word	0xe0001004
 8004614:	2000cc14 	.word	0x2000cc14

08004618 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004626:	2300      	movs	r3, #0
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462e:	4a14      	ldr	r2, [pc, #80]	; (8004680 <SEGGER_SYSVIEW_Init+0x68>)
 8004630:	4914      	ldr	r1, [pc, #80]	; (8004684 <SEGGER_SYSVIEW_Init+0x6c>)
 8004632:	2001      	movs	r0, #1
 8004634:	f7ff fd22 	bl	800407c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004638:	2300      	movs	r3, #0
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2308      	movs	r3, #8
 800463e:	4a12      	ldr	r2, [pc, #72]	; (8004688 <SEGGER_SYSVIEW_Init+0x70>)
 8004640:	4910      	ldr	r1, [pc, #64]	; (8004684 <SEGGER_SYSVIEW_Init+0x6c>)
 8004642:	2001      	movs	r0, #1
 8004644:	f7ff fd84 	bl	8004150 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004648:	4b10      	ldr	r3, [pc, #64]	; (800468c <SEGGER_SYSVIEW_Init+0x74>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <SEGGER_SYSVIEW_Init+0x78>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <SEGGER_SYSVIEW_Init+0x74>)
 8004656:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004658:	4a0c      	ldr	r2, [pc, #48]	; (800468c <SEGGER_SYSVIEW_Init+0x74>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800465e:	4a0b      	ldr	r2, [pc, #44]	; (800468c <SEGGER_SYSVIEW_Init+0x74>)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004664:	4a09      	ldr	r2, [pc, #36]	; (800468c <SEGGER_SYSVIEW_Init+0x74>)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800466a:	4a08      	ldr	r2, [pc, #32]	; (800468c <SEGGER_SYSVIEW_Init+0x74>)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <SEGGER_SYSVIEW_Init+0x74>)
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	2000a900 	.word	0x2000a900
 8004684:	08005858 	.word	0x08005858
 8004688:	2000ad00 	.word	0x2000ad00
 800468c:	2000ad08 	.word	0x2000ad08
 8004690:	e0001004 	.word	0xe0001004

08004694 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800469c:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6113      	str	r3, [r2, #16]
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	2000ad08 	.word	0x2000ad08

080046b4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80046bc:	f3ef 8311 	mrs	r3, BASEPRI
 80046c0:	f04f 0120 	mov.w	r1, #32
 80046c4:	f381 8811 	msr	BASEPRI, r1
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	4808      	ldr	r0, [pc, #32]	; (80046ec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80046cc:	f7ff fdf7 	bl	80042be <_PreparePacket>
 80046d0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68b8      	ldr	r0, [r7, #8]
 80046d8:	f7ff feca 	bl	8004470 <_SendPacket>
  RECORD_END();
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f383 8811 	msr	BASEPRI, r3
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	2000ad38 	.word	0x2000ad38

080046f0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80046fa:	f3ef 8311 	mrs	r3, BASEPRI
 80046fe:	f04f 0120 	mov.w	r1, #32
 8004702:	f381 8811 	msr	BASEPRI, r1
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	4816      	ldr	r0, [pc, #88]	; (8004764 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800470a:	f7ff fdd8 	bl	80042be <_PreparePacket>
 800470e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	61bb      	str	r3, [r7, #24]
 800471c:	e00b      	b.n	8004736 <SEGGER_SYSVIEW_RecordU32+0x46>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	b2da      	uxtb	r2, r3
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	1c59      	adds	r1, r3, #1
 8004726:	61f9      	str	r1, [r7, #28]
 8004728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	09db      	lsrs	r3, r3, #7
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b7f      	cmp	r3, #127	; 0x7f
 800473a:	d8f0      	bhi.n	800471e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	61fa      	str	r2, [r7, #28]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	6938      	ldr	r0, [r7, #16]
 8004752:	f7ff fe8d 	bl	8004470 <_SendPacket>
  RECORD_END();
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f383 8811 	msr	BASEPRI, r3
}
 800475c:	bf00      	nop
 800475e:	3720      	adds	r7, #32
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	2000ad38 	.word	0x2000ad38

08004768 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004774:	f3ef 8311 	mrs	r3, BASEPRI
 8004778:	f04f 0120 	mov.w	r1, #32
 800477c:	f381 8811 	msr	BASEPRI, r1
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	4825      	ldr	r0, [pc, #148]	; (8004818 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004784:	f7ff fd9b 	bl	80042be <_PreparePacket>
 8004788:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	62bb      	str	r3, [r7, #40]	; 0x28
 8004796:	e00b      	b.n	80047b0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	b2da      	uxtb	r2, r3
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	1c59      	adds	r1, r3, #1
 80047a0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80047a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ac:	09db      	lsrs	r3, r3, #7
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	2b7f      	cmp	r3, #127	; 0x7f
 80047b4:	d8f0      	bhi.n	8004798 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	e00b      	b.n	80047e8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	1c59      	adds	r1, r3, #1
 80047d8:	6279      	str	r1, [r7, #36]	; 0x24
 80047da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	09db      	lsrs	r3, r3, #7
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	2b7f      	cmp	r3, #127	; 0x7f
 80047ec:	d8f0      	bhi.n	80047d0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	627a      	str	r2, [r7, #36]	; 0x24
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	6979      	ldr	r1, [r7, #20]
 8004802:	69b8      	ldr	r0, [r7, #24]
 8004804:	f7ff fe34 	bl	8004470 <_SendPacket>
  RECORD_END();
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f383 8811 	msr	BASEPRI, r3
}
 800480e:	bf00      	nop
 8004810:	3730      	adds	r7, #48	; 0x30
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	2000ad38 	.word	0x2000ad38

0800481c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	; 0x30
 8004820:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004822:	4b59      	ldr	r3, [pc, #356]	; (8004988 <SEGGER_SYSVIEW_Start+0x16c>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 80aa 	bne.w	8004980 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 800482c:	4b56      	ldr	r3, [pc, #344]	; (8004988 <SEGGER_SYSVIEW_Start+0x16c>)
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004832:	f3ef 8311 	mrs	r3, BASEPRI
 8004836:	f04f 0120 	mov.w	r1, #32
 800483a:	f381 8811 	msr	BASEPRI, r1
 800483e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004840:	220a      	movs	r2, #10
 8004842:	4952      	ldr	r1, [pc, #328]	; (800498c <SEGGER_SYSVIEW_Start+0x170>)
 8004844:	2001      	movs	r0, #1
 8004846:	f7ff fb89 	bl	8003f5c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004850:	200a      	movs	r0, #10
 8004852:	f7ff ff2f 	bl	80046b4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004856:	f3ef 8311 	mrs	r3, BASEPRI
 800485a:	f04f 0120 	mov.w	r1, #32
 800485e:	f381 8811 	msr	BASEPRI, r1
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	484a      	ldr	r0, [pc, #296]	; (8004990 <SEGGER_SYSVIEW_Start+0x174>)
 8004866:	f7ff fd2a 	bl	80042be <_PreparePacket>
 800486a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004874:	4b44      	ldr	r3, [pc, #272]	; (8004988 <SEGGER_SYSVIEW_Start+0x16c>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
 800487a:	e00b      	b.n	8004894 <SEGGER_SYSVIEW_Start+0x78>
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	b2da      	uxtb	r2, r3
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	1c59      	adds	r1, r3, #1
 8004884:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004886:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	09db      	lsrs	r3, r3, #7
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	2b7f      	cmp	r3, #127	; 0x7f
 8004898:	d8f0      	bhi.n	800487c <SEGGER_SYSVIEW_Start+0x60>
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
 80048ae:	4b36      	ldr	r3, [pc, #216]	; (8004988 <SEGGER_SYSVIEW_Start+0x16c>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	623b      	str	r3, [r7, #32]
 80048b4:	e00b      	b.n	80048ce <SEGGER_SYSVIEW_Start+0xb2>
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	1c59      	adds	r1, r3, #1
 80048be:	6279      	str	r1, [r7, #36]	; 0x24
 80048c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	09db      	lsrs	r3, r3, #7
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	2b7f      	cmp	r3, #127	; 0x7f
 80048d2:	d8f0      	bhi.n	80048b6 <SEGGER_SYSVIEW_Start+0x9a>
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	627a      	str	r2, [r7, #36]	; 0x24
 80048da:	6a3a      	ldr	r2, [r7, #32]
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <SEGGER_SYSVIEW_Start+0x16c>)
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	e00b      	b.n	8004908 <SEGGER_SYSVIEW_Start+0xec>
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	1c59      	adds	r1, r3, #1
 80048f8:	61f9      	str	r1, [r7, #28]
 80048fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	09db      	lsrs	r3, r3, #7
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2b7f      	cmp	r3, #127	; 0x7f
 800490c:	d8f0      	bhi.n	80048f0 <SEGGER_SYSVIEW_Start+0xd4>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	61fa      	str	r2, [r7, #28]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	2302      	movs	r3, #2
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e00b      	b.n	8004940 <SEGGER_SYSVIEW_Start+0x124>
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	b2da      	uxtb	r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	1c59      	adds	r1, r3, #1
 8004930:	6179      	str	r1, [r7, #20]
 8004932:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	09db      	lsrs	r3, r3, #7
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b7f      	cmp	r3, #127	; 0x7f
 8004944:	d8f0      	bhi.n	8004928 <SEGGER_SYSVIEW_Start+0x10c>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	617a      	str	r2, [r7, #20]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004956:	2218      	movs	r2, #24
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fd88 	bl	8004470 <_SendPacket>
      RECORD_END();
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <SEGGER_SYSVIEW_Start+0x16c>)
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <SEGGER_SYSVIEW_Start+0x16c>)
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004974:	f000 f9ec 	bl	8004d50 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004978:	f000 f9b2 	bl	8004ce0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800497c:	f000 fb9e 	bl	80050bc <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8004980:	bf00      	nop
 8004982:	3730      	adds	r7, #48	; 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	2000ad08 	.word	0x2000ad08
 800498c:	08005a1c 	.word	0x08005a1c
 8004990:	2000ad38 	.word	0x2000ad38

08004994 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800499a:	f3ef 8311 	mrs	r3, BASEPRI
 800499e:	f04f 0120 	mov.w	r1, #32
 80049a2:	f381 8811 	msr	BASEPRI, r1
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	480b      	ldr	r0, [pc, #44]	; (80049d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80049aa:	f7ff fc88 	bl	80042be <_PreparePacket>
 80049ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <SEGGER_SYSVIEW_Stop+0x48>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80049b8:	220b      	movs	r2, #11
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	6838      	ldr	r0, [r7, #0]
 80049be:	f7ff fd57 	bl	8004470 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <SEGGER_SYSVIEW_Stop+0x48>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f383 8811 	msr	BASEPRI, r3
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	2000ad38 	.word	0x2000ad38
 80049dc:	2000ad08 	.word	0x2000ad08

080049e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	; 0x30
 80049e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80049e6:	f3ef 8311 	mrs	r3, BASEPRI
 80049ea:	f04f 0120 	mov.w	r1, #32
 80049ee:	f381 8811 	msr	BASEPRI, r1
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	4845      	ldr	r0, [pc, #276]	; (8004b0c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80049f6:	f7ff fc62 	bl	80042be <_PreparePacket>
 80049fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a04:	4b42      	ldr	r3, [pc, #264]	; (8004b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0a:	e00b      	b.n	8004a24 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	1c59      	adds	r1, r3, #1
 8004a14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	09db      	lsrs	r3, r3, #7
 8004a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b7f      	cmp	r3, #127	; 0x7f
 8004a28:	d8f0      	bhi.n	8004a0c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3e:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	623b      	str	r3, [r7, #32]
 8004a44:	e00b      	b.n	8004a5e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	6279      	str	r1, [r7, #36]	; 0x24
 8004a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	09db      	lsrs	r3, r3, #7
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	2b7f      	cmp	r3, #127	; 0x7f
 8004a62:	d8f0      	bhi.n	8004a46 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	627a      	str	r2, [r7, #36]	; 0x24
 8004a6a:	6a3a      	ldr	r2, [r7, #32]
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	61fb      	str	r3, [r7, #28]
 8004a78:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	e00b      	b.n	8004a98 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	61f9      	str	r1, [r7, #28]
 8004a8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	09db      	lsrs	r3, r3, #7
 8004a96:	61bb      	str	r3, [r7, #24]
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a9c:	d8f0      	bhi.n	8004a80 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	61fa      	str	r2, [r7, #28]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e00b      	b.n	8004ad0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	6179      	str	r1, [r7, #20]
 8004ac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	09db      	lsrs	r3, r3, #7
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad4:	d8f0      	bhi.n	8004ab8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	617a      	str	r2, [r7, #20]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004ae6:	2218      	movs	r2, #24
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	68b8      	ldr	r0, [r7, #8]
 8004aec:	f7ff fcc0 	bl	8004470 <_SendPacket>
  RECORD_END();
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004af6:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	4798      	blx	r3
  }
}
 8004b04:	bf00      	nop
 8004b06:	3730      	adds	r7, #48	; 0x30
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	2000ad38 	.word	0x2000ad38
 8004b10:	2000ad08 	.word	0x2000ad08

08004b14 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b092      	sub	sp, #72	; 0x48
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004b1c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b20:	f04f 0120 	mov.w	r1, #32
 8004b24:	f381 8811 	msr	BASEPRI, r1
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	486b      	ldr	r0, [pc, #428]	; (8004cd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004b2c:	f7ff fbc7 	bl	80042be <_PreparePacket>
 8004b30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	647b      	str	r3, [r7, #68]	; 0x44
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b67      	ldr	r3, [pc, #412]	; (8004cdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	643b      	str	r3, [r7, #64]	; 0x40
 8004b48:	e00b      	b.n	8004b62 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8004b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b50:	1c59      	adds	r1, r3, #1
 8004b52:	6479      	str	r1, [r7, #68]	; 0x44
 8004b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]
 8004b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5e:	09db      	lsrs	r3, r3, #7
 8004b60:	643b      	str	r3, [r7, #64]	; 0x40
 8004b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b64:	2b7f      	cmp	r3, #127	; 0x7f
 8004b66:	d8f0      	bhi.n	8004b4a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8004b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	647a      	str	r2, [r7, #68]	; 0x44
 8004b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b76:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b82:	e00b      	b.n	8004b9c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8a:	1c59      	adds	r1, r3, #1
 8004b8c:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	09db      	lsrs	r3, r3, #7
 8004b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba0:	d8f0      	bhi.n	8004b84 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb0:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	4619      	mov	r1, r3
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f7ff fb32 	bl	8004224 <_EncodeStr>
 8004bc0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004bc2:	2209      	movs	r2, #9
 8004bc4:	68f9      	ldr	r1, [r7, #12]
 8004bc6:	6938      	ldr	r0, [r7, #16]
 8004bc8:	f7ff fc52 	bl	8004470 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	4b40      	ldr	r3, [pc, #256]	; (8004cdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	089b      	lsrs	r3, r3, #2
 8004be0:	633b      	str	r3, [r7, #48]	; 0x30
 8004be2:	e00b      	b.n	8004bfc <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	6379      	str	r1, [r7, #52]	; 0x34
 8004bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	09db      	lsrs	r3, r3, #7
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8004c00:	d8f0      	bhi.n	8004be4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8004c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	637a      	str	r2, [r7, #52]	; 0x34
 8004c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1c:	e00b      	b.n	8004c36 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	1c59      	adds	r1, r3, #1
 8004c26:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	09db      	lsrs	r3, r3, #7
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	2b7f      	cmp	r3, #127	; 0x7f
 8004c3a:	d8f0      	bhi.n	8004c1e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	623b      	str	r3, [r7, #32]
 8004c56:	e00b      	b.n	8004c70 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	1c59      	adds	r1, r3, #1
 8004c60:	6279      	str	r1, [r7, #36]	; 0x24
 8004c62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	09db      	lsrs	r3, r3, #7
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	2b7f      	cmp	r3, #127	; 0x7f
 8004c74:	d8f0      	bhi.n	8004c58 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c7c:	6a3a      	ldr	r2, [r7, #32]
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e00b      	b.n	8004ca8 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	61f9      	str	r1, [r7, #28]
 8004c9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	09db      	lsrs	r3, r3, #7
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b7f      	cmp	r3, #127	; 0x7f
 8004cac:	d8f0      	bhi.n	8004c90 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	61fa      	str	r2, [r7, #28]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004cbe:	2215      	movs	r2, #21
 8004cc0:	68f9      	ldr	r1, [r7, #12]
 8004cc2:	6938      	ldr	r0, [r7, #16]
 8004cc4:	f7ff fbd4 	bl	8004470 <_SendPacket>
  RECORD_END();
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f383 8811 	msr	BASEPRI, r3
}
 8004cce:	bf00      	nop
 8004cd0:	3748      	adds	r7, #72	; 0x48
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	2000ad38 	.word	0x2000ad38
 8004cdc:	2000ad08 	.word	0x2000ad08

08004ce0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004ce4:	4b07      	ldr	r3, [pc, #28]	; (8004d04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004cf6:	4b03      	ldr	r3, [pc, #12]	; (8004d04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4798      	blx	r3
  }
}
 8004cfe:	bf00      	nop
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	2000ad08 	.word	0x2000ad08

08004d08 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d10:	f3ef 8311 	mrs	r3, BASEPRI
 8004d14:	f04f 0120 	mov.w	r1, #32
 8004d18:	f381 8811 	msr	BASEPRI, r1
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	480b      	ldr	r0, [pc, #44]	; (8004d4c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004d20:	f7ff facd 	bl	80042be <_PreparePacket>
 8004d24:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d26:	2280      	movs	r2, #128	; 0x80
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f7ff fa7a 	bl	8004224 <_EncodeStr>
 8004d30:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004d32:	220e      	movs	r2, #14
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	6938      	ldr	r0, [r7, #16]
 8004d38:	f7ff fb9a 	bl	8004470 <_SendPacket>
  RECORD_END();
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f383 8811 	msr	BASEPRI, r3
}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	2000ad38 	.word	0x2000ad38

08004d50 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004d56:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d019      	beq.n	8004d92 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d014      	beq.n	8004d92 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004d68:	4b0f      	ldr	r3, [pc, #60]	; (8004da8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4798      	blx	r3
 8004d70:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004d74:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004d76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	f04f 0400 	mov.w	r4, #0
 8004d82:	0013      	movs	r3, r2
 8004d84:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004d86:	461a      	mov	r2, r3
 8004d88:	4601      	mov	r1, r0
 8004d8a:	200d      	movs	r0, #13
 8004d8c:	f7ff fcec 	bl	8004768 <SEGGER_SYSVIEW_RecordU32x2>
 8004d90:	e005      	b.n	8004d9e <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4619      	mov	r1, r3
 8004d98:	200c      	movs	r0, #12
 8004d9a:	f7ff fca9 	bl	80046f0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd90      	pop	{r4, r7, pc}
 8004da6:	bf00      	nop
 8004da8:	2000ad08 	.word	0x2000ad08
 8004dac:	e0001004 	.word	0xe0001004

08004db0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004db6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dba:	f04f 0120 	mov.w	r1, #32
 8004dbe:	f381 8811 	msr	BASEPRI, r1
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	4807      	ldr	r0, [pc, #28]	; (8004de4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004dc6:	f7ff fa7a 	bl	80042be <_PreparePacket>
 8004dca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004dcc:	2211      	movs	r2, #17
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	6838      	ldr	r0, [r7, #0]
 8004dd2:	f7ff fb4d 	bl	8004470 <_SendPacket>
  RECORD_END();
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f383 8811 	msr	BASEPRI, r3
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	2000ad38 	.word	0x2000ad38

08004de8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004df0:	f3ef 8311 	mrs	r3, BASEPRI
 8004df4:	f04f 0120 	mov.w	r1, #32
 8004df8:	f381 8811 	msr	BASEPRI, r1
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	481a      	ldr	r0, [pc, #104]	; (8004e68 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004e00:	f7ff fa5d 	bl	80042be <_PreparePacket>
 8004e04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e0a:	4b18      	ldr	r3, [pc, #96]	; (8004e6c <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	089b      	lsrs	r3, r3, #2
 8004e14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	61bb      	str	r3, [r7, #24]
 8004e1e:	e00b      	b.n	8004e38 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	1c59      	adds	r1, r3, #1
 8004e28:	61f9      	str	r1, [r7, #28]
 8004e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	09db      	lsrs	r3, r3, #7
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e3c:	d8f0      	bhi.n	8004e20 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	61fa      	str	r2, [r7, #28]
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004e4e:	2208      	movs	r2, #8
 8004e50:	68f9      	ldr	r1, [r7, #12]
 8004e52:	6938      	ldr	r0, [r7, #16]
 8004e54:	f7ff fb0c 	bl	8004470 <_SendPacket>
  RECORD_END();
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f383 8811 	msr	BASEPRI, r3
}
 8004e5e:	bf00      	nop
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	2000ad38 	.word	0x2000ad38
 8004e6c:	2000ad08 	.word	0x2000ad08

08004e70 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e78:	f3ef 8311 	mrs	r3, BASEPRI
 8004e7c:	f04f 0120 	mov.w	r1, #32
 8004e80:	f381 8811 	msr	BASEPRI, r1
 8004e84:	617b      	str	r3, [r7, #20]
 8004e86:	481a      	ldr	r0, [pc, #104]	; (8004ef0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004e88:	f7ff fa19 	bl	80042be <_PreparePacket>
 8004e8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004e92:	4b18      	ldr	r3, [pc, #96]	; (8004ef4 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	089b      	lsrs	r3, r3, #2
 8004e9c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	e00b      	b.n	8004ec0 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	1c59      	adds	r1, r3, #1
 8004eb0:	61f9      	str	r1, [r7, #28]
 8004eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	09db      	lsrs	r3, r3, #7
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec4:	d8f0      	bhi.n	8004ea8 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	61fa      	str	r2, [r7, #28]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	68f9      	ldr	r1, [r7, #12]
 8004eda:	6938      	ldr	r0, [r7, #16]
 8004edc:	f7ff fac8 	bl	8004470 <_SendPacket>
  RECORD_END();
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f383 8811 	msr	BASEPRI, r3
}
 8004ee6:	bf00      	nop
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	2000ad38 	.word	0x2000ad38
 8004ef4:	2000ad08 	.word	0x2000ad08

08004ef8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f00:	f3ef 8311 	mrs	r3, BASEPRI
 8004f04:	f04f 0120 	mov.w	r1, #32
 8004f08:	f381 8811 	msr	BASEPRI, r1
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	481a      	ldr	r0, [pc, #104]	; (8004f78 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004f10:	f7ff f9d5 	bl	80042be <_PreparePacket>
 8004f14:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f1a:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	61fb      	str	r3, [r7, #28]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	61bb      	str	r3, [r7, #24]
 8004f2e:	e00b      	b.n	8004f48 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	1c59      	adds	r1, r3, #1
 8004f38:	61f9      	str	r1, [r7, #28]
 8004f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	09db      	lsrs	r3, r3, #7
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f4c:	d8f0      	bhi.n	8004f30 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	61fa      	str	r2, [r7, #28]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004f5e:	2206      	movs	r2, #6
 8004f60:	68f9      	ldr	r1, [r7, #12]
 8004f62:	6938      	ldr	r0, [r7, #16]
 8004f64:	f7ff fa84 	bl	8004470 <_SendPacket>
  RECORD_END();
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f383 8811 	msr	BASEPRI, r3
}
 8004f6e:	bf00      	nop
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	2000ad38 	.word	0x2000ad38
 8004f7c:	2000ad08 	.word	0x2000ad08

08004f80 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08c      	sub	sp, #48	; 0x30
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004f8a:	4b3b      	ldr	r3, [pc, #236]	; (8005078 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d06d      	beq.n	800506e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004f92:	4b39      	ldr	r3, [pc, #228]	; (8005078 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9c:	e008      	b.n	8004fb0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	3301      	adds	r3, #1
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d3f2      	bcc.n	8004f9e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004fb8:	e000      	b.n	8004fbc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004fba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d055      	beq.n	800506e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc6:	f04f 0120 	mov.w	r1, #32
 8004fca:	f381 8811 	msr	BASEPRI, r1
 8004fce:	617b      	str	r3, [r7, #20]
 8004fd0:	482a      	ldr	r0, [pc, #168]	; (800507c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004fd2:	f7ff f974 	bl	80042be <_PreparePacket>
 8004fd6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	e00b      	b.n	8004ffe <SEGGER_SYSVIEW_SendModule+0x7e>
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1c59      	adds	r1, r3, #1
 8004fee:	6279      	str	r1, [r7, #36]	; 0x24
 8004ff0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ff4:	b2d2      	uxtb	r2, r2
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	09db      	lsrs	r3, r3, #7
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	2b7f      	cmp	r3, #127	; 0x7f
 8005002:	d8f0      	bhi.n	8004fe6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	627a      	str	r2, [r7, #36]	; 0x24
 800500a:	6a3a      	ldr	r2, [r7, #32]
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	61fb      	str	r3, [r7, #28]
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e00b      	b.n	8005038 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	1c59      	adds	r1, r3, #1
 8005028:	61f9      	str	r1, [r7, #28]
 800502a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	09db      	lsrs	r3, r3, #7
 8005036:	61bb      	str	r3, [r7, #24]
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b7f      	cmp	r3, #127	; 0x7f
 800503c:	d8f0      	bhi.n	8005020 <SEGGER_SYSVIEW_SendModule+0xa0>
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	61fa      	str	r2, [r7, #28]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2280      	movs	r2, #128	; 0x80
 8005054:	4619      	mov	r1, r3
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff f8e4 	bl	8004224 <_EncodeStr>
 800505c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800505e:	2216      	movs	r2, #22
 8005060:	68f9      	ldr	r1, [r7, #12]
 8005062:	6938      	ldr	r0, [r7, #16]
 8005064:	f7ff fa04 	bl	8004470 <_SendPacket>
      RECORD_END();
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800506e:	bf00      	nop
 8005070:	3730      	adds	r7, #48	; 0x30
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	2000ad30 	.word	0x2000ad30
 800507c:	2000ad38 	.word	0x2000ad38

08005080 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00f      	beq.n	80050ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1f2      	bne.n	8005094 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	2000ad30 	.word	0x2000ad30

080050bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80050c2:	f3ef 8311 	mrs	r3, BASEPRI
 80050c6:	f04f 0120 	mov.w	r1, #32
 80050ca:	f381 8811 	msr	BASEPRI, r1
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	4817      	ldr	r0, [pc, #92]	; (8005130 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80050d2:	f7ff f8f4 	bl	80042be <_PreparePacket>
 80050d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	4b14      	ldr	r3, [pc, #80]	; (8005134 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e00b      	b.n	8005100 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1c59      	adds	r1, r3, #1
 80050f0:	6179      	str	r1, [r7, #20]
 80050f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b7f      	cmp	r3, #127	; 0x7f
 8005104:	d8f0      	bhi.n	80050e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	617a      	str	r2, [r7, #20]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005116:	221b      	movs	r2, #27
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	68b8      	ldr	r0, [r7, #8]
 800511c:	f7ff f9a8 	bl	8004470 <_SendPacket>
  RECORD_END();
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f383 8811 	msr	BASEPRI, r3
}
 8005126:	bf00      	nop
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	2000ad38 	.word	0x2000ad38
 8005134:	2000ad34 	.word	0x2000ad34

08005138 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005140:	f3ef 8311 	mrs	r3, BASEPRI
 8005144:	f04f 0120 	mov.w	r1, #32
 8005148:	f381 8811 	msr	BASEPRI, r1
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	4827      	ldr	r0, [pc, #156]	; (80051ec <SEGGER_SYSVIEW_Warn+0xb4>)
 8005150:	f7ff f8b5 	bl	80042be <_PreparePacket>
 8005154:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005156:	2280      	movs	r2, #128	; 0x80
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	6938      	ldr	r0, [r7, #16]
 800515c:	f7ff f862 	bl	8004224 <_EncodeStr>
 8005160:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
 8005166:	2301      	movs	r3, #1
 8005168:	623b      	str	r3, [r7, #32]
 800516a:	e00b      	b.n	8005184 <SEGGER_SYSVIEW_Warn+0x4c>
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	6279      	str	r1, [r7, #36]	; 0x24
 8005176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	09db      	lsrs	r3, r3, #7
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	2b7f      	cmp	r3, #127	; 0x7f
 8005188:	d8f0      	bhi.n	800516c <SEGGER_SYSVIEW_Warn+0x34>
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	627a      	str	r2, [r7, #36]	; 0x24
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	e00b      	b.n	80051bc <SEGGER_SYSVIEW_Warn+0x84>
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	1c59      	adds	r1, r3, #1
 80051ac:	61f9      	str	r1, [r7, #28]
 80051ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	09db      	lsrs	r3, r3, #7
 80051ba:	61bb      	str	r3, [r7, #24]
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b7f      	cmp	r3, #127	; 0x7f
 80051c0:	d8f0      	bhi.n	80051a4 <SEGGER_SYSVIEW_Warn+0x6c>
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	61fa      	str	r2, [r7, #28]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80051d2:	221a      	movs	r2, #26
 80051d4:	68f9      	ldr	r1, [r7, #12]
 80051d6:	6938      	ldr	r0, [r7, #16]
 80051d8:	f7ff f94a 	bl	8004470 <_SendPacket>
  RECORD_END();
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f383 8811 	msr	BASEPRI, r3
}
 80051e2:	bf00      	nop
 80051e4:	3728      	adds	r7, #40	; 0x28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	2000ad38 	.word	0x2000ad38

080051f0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80051f4:	4803      	ldr	r0, [pc, #12]	; (8005204 <_cbSendSystemDesc+0x14>)
 80051f6:	f7ff fd87 	bl	8004d08 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80051fa:	4803      	ldr	r0, [pc, #12]	; (8005208 <_cbSendSystemDesc+0x18>)
 80051fc:	f7ff fd84 	bl	8004d08 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005200:	bf00      	nop
 8005202:	bd80      	pop	{r7, pc}
 8005204:	08005860 	.word	0x08005860
 8005208:	08005894 	.word	0x08005894

0800520c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <SEGGER_SYSVIEW_Conf+0x1c>)
 8005212:	4a06      	ldr	r2, [pc, #24]	; (800522c <SEGGER_SYSVIEW_Conf+0x20>)
 8005214:	4906      	ldr	r1, [pc, #24]	; (8005230 <SEGGER_SYSVIEW_Conf+0x24>)
 8005216:	4806      	ldr	r0, [pc, #24]	; (8005230 <SEGGER_SYSVIEW_Conf+0x24>)
 8005218:	f7ff f9fe 	bl	8004618 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800521c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005220:	f7ff fa38 	bl	8004694 <SEGGER_SYSVIEW_SetRAMBase>
}
 8005224:	bf00      	nop
 8005226:	bd80      	pop	{r7, pc}
 8005228:	080051f1 	.word	0x080051f1
 800522c:	08005a28 	.word	0x08005a28
 8005230:	0a037a00 	.word	0x0a037a00

08005234 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8005234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005236:	b085      	sub	sp, #20
 8005238:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	e034      	b.n	80052aa <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005240:	491e      	ldr	r1, [pc, #120]	; (80052bc <_cbSendTaskList+0x88>)
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	491a      	ldr	r1, [pc, #104]	; (80052bc <_cbSendTaskList+0x88>)
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	3304      	adds	r3, #4
 8005260:	681c      	ldr	r4, [r3, #0]
 8005262:	4916      	ldr	r1, [pc, #88]	; (80052bc <_cbSendTaskList+0x88>)
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3308      	adds	r3, #8
 8005272:	681d      	ldr	r5, [r3, #0]
 8005274:	4911      	ldr	r1, [pc, #68]	; (80052bc <_cbSendTaskList+0x88>)
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	330c      	adds	r3, #12
 8005284:	681e      	ldr	r6, [r3, #0]
 8005286:	490d      	ldr	r1, [pc, #52]	; (80052bc <_cbSendTaskList+0x88>)
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	3310      	adds	r3, #16
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	4633      	mov	r3, r6
 800529c:	462a      	mov	r2, r5
 800529e:	4621      	mov	r1, r4
 80052a0:	f000 f8b4 	bl	800540c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3301      	adds	r3, #1
 80052a8:	607b      	str	r3, [r7, #4]
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <_cbSendTaskList+0x8c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d3c5      	bcc.n	8005240 <_cbSendTaskList+0xc>
  }
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052bc:	2000ae1c 	.word	0x2000ae1c
 80052c0:	2000aebc 	.word	0x2000aebc

080052c4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80052c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80052ca:	f7fc fdbf 	bl	8001e4c <xTaskGetTickCountFromISR>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80052d8:	e9d7 5600 	ldrd	r5, r6, [r7]
 80052dc:	462b      	mov	r3, r5
 80052de:	4634      	mov	r4, r6
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	0162      	lsls	r2, r4, #5
 80052ea:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80052ee:	0159      	lsls	r1, r3, #5
 80052f0:	460b      	mov	r3, r1
 80052f2:	4614      	mov	r4, r2
 80052f4:	1b5b      	subs	r3, r3, r5
 80052f6:	eb64 0406 	sbc.w	r4, r4, r6
 80052fa:	f04f 0100 	mov.w	r1, #0
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	00a2      	lsls	r2, r4, #2
 8005304:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8005308:	0099      	lsls	r1, r3, #2
 800530a:	460b      	mov	r3, r1
 800530c:	4614      	mov	r4, r2
 800530e:	195b      	adds	r3, r3, r5
 8005310:	eb44 0406 	adc.w	r4, r4, r6
 8005314:	f04f 0100 	mov.w	r1, #0
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	00e2      	lsls	r2, r4, #3
 800531e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005322:	00d9      	lsls	r1, r3, #3
 8005324:	460b      	mov	r3, r1
 8005326:	4614      	mov	r4, r2
 8005328:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 800532c:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8005330:	4618      	mov	r0, r3
 8005332:	4621      	mov	r1, r4
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800533c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800534a:	2205      	movs	r2, #5
 800534c:	492b      	ldr	r1, [pc, #172]	; (80053fc <SYSVIEW_AddTask+0xc0>)
 800534e:	68b8      	ldr	r0, [r7, #8]
 8005350:	f000 fa44 	bl	80057dc <memcmp>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d04b      	beq.n	80053f2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800535a:	4b29      	ldr	r3, [pc, #164]	; (8005400 <SYSVIEW_AddTask+0xc4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b07      	cmp	r3, #7
 8005360:	d903      	bls.n	800536a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005362:	4828      	ldr	r0, [pc, #160]	; (8005404 <SYSVIEW_AddTask+0xc8>)
 8005364:	f7ff fee8 	bl	8005138 <SEGGER_SYSVIEW_Warn>
    return;
 8005368:	e044      	b.n	80053f4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800536a:	4b25      	ldr	r3, [pc, #148]	; (8005400 <SYSVIEW_AddTask+0xc4>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4926      	ldr	r1, [pc, #152]	; (8005408 <SYSVIEW_AddTask+0xcc>)
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800537e:	4b20      	ldr	r3, [pc, #128]	; (8005400 <SYSVIEW_AddTask+0xc4>)
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	4921      	ldr	r1, [pc, #132]	; (8005408 <SYSVIEW_AddTask+0xcc>)
 8005384:	4613      	mov	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	3304      	adds	r3, #4
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005394:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <SYSVIEW_AddTask+0xc4>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	491b      	ldr	r1, [pc, #108]	; (8005408 <SYSVIEW_AddTask+0xcc>)
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	3308      	adds	r3, #8
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <SYSVIEW_AddTask+0xc4>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4916      	ldr	r1, [pc, #88]	; (8005408 <SYSVIEW_AddTask+0xcc>)
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	330c      	adds	r3, #12
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80053c0:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <SYSVIEW_AddTask+0xc4>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4910      	ldr	r1, [pc, #64]	; (8005408 <SYSVIEW_AddTask+0xcc>)
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3310      	adds	r3, #16
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <SYSVIEW_AddTask+0xc4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	4a08      	ldr	r2, [pc, #32]	; (8005400 <SYSVIEW_AddTask+0xc4>)
 80053de:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f80e 	bl	800540c <SYSVIEW_SendTaskInfo>
 80053f0:	e000      	b.n	80053f4 <SYSVIEW_AddTask+0xb8>
    return;
 80053f2:	bf00      	nop

}
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	080058a4 	.word	0x080058a4
 8005400:	2000aebc 	.word	0x2000aebc
 8005404:	080058ac 	.word	0x080058ac
 8005408:	2000ae1c 	.word	0x2000ae1c

0800540c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800541a:	f107 0314 	add.w	r3, r7, #20
 800541e:	2214      	movs	r2, #20
 8005420:	2100      	movs	r1, #0
 8005422:	4618      	mov	r0, r3
 8005424:	f000 f9f4 	bl	8005810 <memset>
  TaskInfo.TaskID     = TaskID;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800543c:	f107 0314 	add.w	r3, r7, #20
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff fb67 	bl	8004b14 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005446:	bf00      	nop
 8005448:	3728      	adds	r7, #40	; 0x28
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <vApplicationIdleHook>:


void vApplicationIdleHook( void );

void vApplicationIdleHook( void )
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0

IdleHookCounter++;
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <vApplicationIdleHook+0x1c>)
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	3301      	adds	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	4b03      	ldr	r3, [pc, #12]	; (800546c <vApplicationIdleHook+0x1c>)
 800545e:	801a      	strh	r2, [r3, #0]
}
 8005460:	bf00      	nop
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	2000cdaa 	.word	0x2000cdaa

08005470 <TimingDelay>:

TaskHandle_t MyTaks = NULL;
TaskHandle_t MyTaks2 = NULL;

void TimingDelay(unsigned int tick)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
//#define DELAY_TIMER

#ifndef DELAY_TIMER
  for(uint16_t k = 0 ; k <tick;k++)
 8005478:	2300      	movs	r3, #0
 800547a:	81fb      	strh	r3, [r7, #14]
 800547c:	e011      	b.n	80054a2 <TimingDelay+0x32>
  {
	  GPIO_ClearOutput(1);
 800547e:	2001      	movs	r0, #1
 8005480:	f7fc f900 	bl	8001684 <GPIO_ClearOutput>

    for(uint32_t i = 0 ; i <t;i++)
 8005484:	2300      	movs	r3, #0
 8005486:	60bb      	str	r3, [r7, #8]
 8005488:	e002      	b.n	8005490 <TimingDelay+0x20>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	3301      	adds	r3, #1
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <TimingDelay+0x44>)
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	4293      	cmp	r3, r2
 800549a:	d3f6      	bcc.n	800548a <TimingDelay+0x1a>
  for(uint16_t k = 0 ; k <tick;k++)
 800549c:	89fb      	ldrh	r3, [r7, #14]
 800549e:	3301      	adds	r3, #1
 80054a0:	81fb      	strh	r3, [r7, #14]
 80054a2:	89fb      	ldrh	r3, [r7, #14]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d8e9      	bhi.n	800547e <TimingDelay+0xe>

  while(Ms_delay[Ms_currentTaskIndex].DelayApp <  Ms_delay[Ms_currentTaskIndex].DelayStart )
  {
  }
#endif
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000004 	.word	0x20000004

080054b8 <MyTask_Func1>:


void MyTask_Func1(void *pvParameters )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 uint16_t *d =(uint16_t *) pvParameters;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

 static uint16_t l_d = 0;

 l_d = *d;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	881a      	ldrh	r2, [r3, #0]
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <MyTask_Func1+0x24>)
 80054ca:	801a      	strh	r2, [r3, #0]

  while(1)
  {
    TimingDelay(l_d);
 80054cc:	4b03      	ldr	r3, [pc, #12]	; (80054dc <MyTask_Func1+0x24>)
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff ffcd 	bl	8005470 <TimingDelay>


    Ms_EndJob_Exec();
 80054d6:	f7fd f96d 	bl	80027b4 <Ms_EndJob_Exec>
  {
 80054da:	e7f7      	b.n	80054cc <MyTask_Func1+0x14>
 80054dc:	2000aec0 	.word	0x2000aec0

080054e0 <MyTask_Func2>:
  }
}


void MyTask_Func2(void *pvParameters )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint16_t *d =(uint16_t *) pvParameters;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	60fb      	str	r3, [r7, #12]

  static uint16_t l_d = 0;

  l_d = *d;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	881a      	ldrh	r2, [r3, #0]
 80054f0:	4b04      	ldr	r3, [pc, #16]	; (8005504 <MyTask_Func2+0x24>)
 80054f2:	801a      	strh	r2, [r3, #0]

   while(1)
   {
     TimingDelay(l_d);
 80054f4:	4b03      	ldr	r3, [pc, #12]	; (8005504 <MyTask_Func2+0x24>)
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff ffb9 	bl	8005470 <TimingDelay>
     Ms_EndJob_Exec();
 80054fe:	f7fd f959 	bl	80027b4 <Ms_EndJob_Exec>
   {
 8005502:	e7f7      	b.n	80054f4 <MyTask_Func2+0x14>
 8005504:	2000aec2 	.word	0x2000aec2

08005508 <MyTask_Func3>:
   }
}

void MyTask_Func3(void *pvParameters )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint16_t *d =(uint16_t *) pvParameters;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	60fb      	str	r3, [r7, #12]

  static uint16_t l_d = 0;

  l_d = *d;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	881a      	ldrh	r2, [r3, #0]
 8005518:	4b04      	ldr	r3, [pc, #16]	; (800552c <MyTask_Func3+0x24>)
 800551a:	801a      	strh	r2, [r3, #0]

   while(1)
   {
     TimingDelay(l_d);
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <MyTask_Func3+0x24>)
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ffa5 	bl	8005470 <TimingDelay>
     Ms_EndJob_Exec();
 8005526:	f7fd f945 	bl	80027b4 <Ms_EndJob_Exec>
   {
 800552a:	e7f7      	b.n	800551c <MyTask_Func3+0x14>
 800552c:	2000aec4 	.word	0x2000aec4

08005530 <main>:

uint16_t DeadlineEsTask = 30 ;


int main(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af06      	add	r7, sp, #24
	GPIO_Parameters_t gp;
//
	gp.GPIO_Direction = GPIO_MODE_OUT_PP;
 8005536:	2303      	movs	r3, #3
 8005538:	71bb      	strb	r3, [r7, #6]
		gp.GPIO_Pin= GPIO_PIN_13_;
 800553a:	230d      	movs	r3, #13
 800553c:	717b      	strb	r3, [r7, #5]
		gp.GPIO_Port = GPIO_PORT_D;
 800553e:	2303      	movs	r3, #3
 8005540:	713b      	strb	r3, [r7, #4]


		GPIO_Init(0, gp);
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	2000      	movs	r0, #0
 8005546:	f7fb fb3f 	bl	8000bc8 <GPIO_Init>

		gp.GPIO_Direction = GPIO_MODE_OUT_PP;
 800554a:	2303      	movs	r3, #3
 800554c:	71bb      	strb	r3, [r7, #6]
		gp.GPIO_Pin       = GPIO_PIN_14_    ;
 800554e:	230e      	movs	r3, #14
 8005550:	717b      	strb	r3, [r7, #5]
		gp.GPIO_Port      = GPIO_PORT_D     ;
 8005552:	2303      	movs	r3, #3
 8005554:	713b      	strb	r3, [r7, #4]
		GPIO_Init(1, gp);
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	2001      	movs	r0, #1
 800555a:	f7fb fb35 	bl	8000bc8 <GPIO_Init>

		gp.GPIO_Direction = GPIO_MODE_OUT_PP;
 800555e:	2303      	movs	r3, #3
 8005560:	71bb      	strb	r3, [r7, #6]
		gp.GPIO_Pin       = GPIO_PIN_12_    ;
 8005562:	230c      	movs	r3, #12
 8005564:	717b      	strb	r3, [r7, #5]
		gp.GPIO_Port      = GPIO_PORT_D     ;
 8005566:	2303      	movs	r3, #3
 8005568:	713b      	strb	r3, [r7, #4]
		GPIO_Init(2, gp);
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	2002      	movs	r0, #2
 800556e:	f7fb fb2b 	bl	8000bc8 <GPIO_Init>





    DeadlineEsTask = 3 ;
 8005572:	4b3b      	ldr	r3, [pc, #236]	; (8005660 <main+0x130>)
 8005574:	2203      	movs	r2, #3
 8005576:	801a      	strh	r2, [r3, #0]
	PeriodTask4=25.0  ;   CostTask4=3.0 ;  MsFreeRTOS_CreateEnergySavingTask(   "Es Task", stack_task, (void*) &CostTask4 , NULL  , PeriodTask4,DeadlineEsTask, CostTask4 );
 8005578:	4b3a      	ldr	r3, [pc, #232]	; (8005664 <main+0x134>)
 800557a:	2219      	movs	r2, #25
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	4b3a      	ldr	r3, [pc, #232]	; (8005668 <main+0x138>)
 8005580:	2203      	movs	r2, #3
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	4b37      	ldr	r3, [pc, #220]	; (8005664 <main+0x134>)
 8005586:	881b      	ldrh	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	4b35      	ldr	r3, [pc, #212]	; (8005660 <main+0x130>)
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	4b35      	ldr	r3, [pc, #212]	; (8005668 <main+0x138>)
 8005592:	881b      	ldrh	r3, [r3, #0]
 8005594:	9302      	str	r3, [sp, #8]
 8005596:	9101      	str	r1, [sp, #4]
 8005598:	9200      	str	r2, [sp, #0]
 800559a:	2300      	movs	r3, #0
 800559c:	4a32      	ldr	r2, [pc, #200]	; (8005668 <main+0x138>)
 800559e:	2164      	movs	r1, #100	; 0x64
 80055a0:	4832      	ldr	r0, [pc, #200]	; (800566c <main+0x13c>)
 80055a2:	f7fd f895 	bl	80026d0 <MsFreeRTOS_CreateEnergySavingTask>
	PeriodTask1=4.0   ;   CostTask1=1.0 ;  MsFreeRTOS_CreateTask(  MyTask_Func1, "Task1", stack_task, (void*) &CostTask1 , 2 , NULL  , PeriodTask1,PeriodTask1, CostTask1 );
 80055a6:	4b32      	ldr	r3, [pc, #200]	; (8005670 <main+0x140>)
 80055a8:	2204      	movs	r2, #4
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	4b31      	ldr	r3, [pc, #196]	; (8005674 <main+0x144>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	801a      	strh	r2, [r3, #0]
 80055b2:	4b2f      	ldr	r3, [pc, #188]	; (8005670 <main+0x140>)
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	4b2d      	ldr	r3, [pc, #180]	; (8005670 <main+0x140>)
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	4619      	mov	r1, r3
 80055be:	4b2d      	ldr	r3, [pc, #180]	; (8005674 <main+0x144>)
 80055c0:	881b      	ldrh	r3, [r3, #0]
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	9103      	str	r1, [sp, #12]
 80055c6:	9202      	str	r2, [sp, #8]
 80055c8:	2300      	movs	r3, #0
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	2302      	movs	r3, #2
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	4b28      	ldr	r3, [pc, #160]	; (8005674 <main+0x144>)
 80055d2:	2264      	movs	r2, #100	; 0x64
 80055d4:	4928      	ldr	r1, [pc, #160]	; (8005678 <main+0x148>)
 80055d6:	4829      	ldr	r0, [pc, #164]	; (800567c <main+0x14c>)
 80055d8:	f7fd f80a 	bl	80025f0 <MsFreeRTOS_CreateTask>
	PeriodTask2=6.0   ;   CostTask2=1.0 ;  MsFreeRTOS_CreateTask(  MyTask_Func2, "Task2", stack_task, (void*) &CostTask2 , 2 , NULL  , PeriodTask2,PeriodTask2, CostTask2 );
 80055dc:	4b28      	ldr	r3, [pc, #160]	; (8005680 <main+0x150>)
 80055de:	2206      	movs	r2, #6
 80055e0:	801a      	strh	r2, [r3, #0]
 80055e2:	4b28      	ldr	r3, [pc, #160]	; (8005684 <main+0x154>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	801a      	strh	r2, [r3, #0]
 80055e8:	4b25      	ldr	r3, [pc, #148]	; (8005680 <main+0x150>)
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	4b24      	ldr	r3, [pc, #144]	; (8005680 <main+0x150>)
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	4619      	mov	r1, r3
 80055f4:	4b23      	ldr	r3, [pc, #140]	; (8005684 <main+0x154>)
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	9304      	str	r3, [sp, #16]
 80055fa:	9103      	str	r1, [sp, #12]
 80055fc:	9202      	str	r2, [sp, #8]
 80055fe:	2300      	movs	r3, #0
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	2302      	movs	r3, #2
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	4b1f      	ldr	r3, [pc, #124]	; (8005684 <main+0x154>)
 8005608:	2264      	movs	r2, #100	; 0x64
 800560a:	491f      	ldr	r1, [pc, #124]	; (8005688 <main+0x158>)
 800560c:	481f      	ldr	r0, [pc, #124]	; (800568c <main+0x15c>)
 800560e:	f7fc ffef 	bl	80025f0 <MsFreeRTOS_CreateTask>
	PeriodTask3=25.0  ;   CostTask3=11.0;  MsFreeRTOS_CreateTask(  MyTask_Func3, "Task3", stack_task, (void*) &CostTask3 , 2 , NULL  , PeriodTask3,PeriodTask3, CostTask3 );
 8005612:	4b1f      	ldr	r3, [pc, #124]	; (8005690 <main+0x160>)
 8005614:	2219      	movs	r2, #25
 8005616:	801a      	strh	r2, [r3, #0]
 8005618:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <main+0x164>)
 800561a:	220b      	movs	r2, #11
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <main+0x160>)
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	4b1a      	ldr	r3, [pc, #104]	; (8005690 <main+0x160>)
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	4619      	mov	r1, r3
 800562a:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <main+0x164>)
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	9103      	str	r1, [sp, #12]
 8005632:	9202      	str	r2, [sp, #8]
 8005634:	2300      	movs	r3, #0
 8005636:	9301      	str	r3, [sp, #4]
 8005638:	2302      	movs	r3, #2
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	4b15      	ldr	r3, [pc, #84]	; (8005694 <main+0x164>)
 800563e:	2264      	movs	r2, #100	; 0x64
 8005640:	4915      	ldr	r1, [pc, #84]	; (8005698 <main+0x168>)
 8005642:	4816      	ldr	r0, [pc, #88]	; (800569c <main+0x16c>)
 8005644:	f7fc ffd4 	bl	80025f0 <MsFreeRTOS_CreateTask>


  setup();
 8005648:	f7fd fa2c 	bl	8002aa4 <setup>

  SEGGER_SYSVIEW_Conf();
 800564c:	f7ff fdde 	bl	800520c <SEGGER_SYSVIEW_Conf>

  Sys_Enable_Peripherals_Clock();
 8005650:	f7fb fa4c 	bl	8000aec <Sys_Enable_Peripherals_Clock>

  Sys_Configure_Clock_168MHz();
 8005654:	f7fb fa68 	bl	8000b28 <Sys_Configure_Clock_168MHz>

  vTaskStartScheduler();
 8005658:	f7fc fad4 	bl	8001c04 <vTaskStartScheduler>

  while (1)
 800565c:	e7fe      	b.n	800565c <main+0x12c>
 800565e:	bf00      	nop
 8005660:	20000006 	.word	0x20000006
 8005664:	2000cd74 	.word	0x2000cd74
 8005668:	2000cd98 	.word	0x2000cd98
 800566c:	080058fc 	.word	0x080058fc
 8005670:	2000ccec 	.word	0x2000ccec
 8005674:	2000cd26 	.word	0x2000cd26
 8005678:	08005904 	.word	0x08005904
 800567c:	080054b9 	.word	0x080054b9
 8005680:	2000cd60 	.word	0x2000cd60
 8005684:	2000cce6 	.word	0x2000cce6
 8005688:	0800590c 	.word	0x0800590c
 800568c:	080054e1 	.word	0x080054e1
 8005690:	2000cd1c 	.word	0x2000cd1c
 8005694:	2000cd24 	.word	0x2000cd24
 8005698:	08005914 	.word	0x08005914
 800569c:	08005509 	.word	0x08005509

080056a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80056a4:	bf00      	nop
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056ae:	b480      	push	{r7}
 80056b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056b2:	e7fe      	b.n	80056b2 <HardFault_Handler+0x4>

080056b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056b8:	e7fe      	b.n	80056b8 <MemManage_Handler+0x4>

080056ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056ba:	b480      	push	{r7}
 80056bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056be:	e7fe      	b.n	80056be <BusFault_Handler+0x4>

080056c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056c4:	e7fe      	b.n	80056c4 <UsageFault_Handler+0x4>

080056c6 <DebugMon_Handler>:
*/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056c6:	b480      	push	{r7}
 80056c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056ca:	bf00      	nop
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80056d8:	4b16      	ldr	r3, [pc, #88]	; (8005734 <SystemInit+0x60>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	4a15      	ldr	r2, [pc, #84]	; (8005734 <SystemInit+0x60>)
 80056e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80056e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80056e8:	4b13      	ldr	r3, [pc, #76]	; (8005738 <SystemInit+0x64>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a12      	ldr	r2, [pc, #72]	; (8005738 <SystemInit+0x64>)
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80056f4:	4b10      	ldr	r3, [pc, #64]	; (8005738 <SystemInit+0x64>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80056fa:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <SystemInit+0x64>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <SystemInit+0x64>)
 8005700:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005708:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <SystemInit+0x64>)
 800570c:	4a0b      	ldr	r2, [pc, #44]	; (800573c <SystemInit+0x68>)
 800570e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <SystemInit+0x64>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a08      	ldr	r2, [pc, #32]	; (8005738 <SystemInit+0x64>)
 8005716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800571a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800571c:	4b06      	ldr	r3, [pc, #24]	; (8005738 <SystemInit+0x64>)
 800571e:	2200      	movs	r2, #0
 8005720:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005722:	4b04      	ldr	r3, [pc, #16]	; (8005734 <SystemInit+0x60>)
 8005724:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005728:	609a      	str	r2, [r3, #8]
#endif
}
 800572a:	bf00      	nop
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	e000ed00 	.word	0xe000ed00
 8005738:	40023800 	.word	0x40023800
 800573c:	24003010 	.word	0x24003010

08005740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005778 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005744:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005746:	e003      	b.n	8005750 <LoopCopyDataInit>

08005748 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005748:	4b0c      	ldr	r3, [pc, #48]	; (800577c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800574a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800574c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800574e:	3104      	adds	r1, #4

08005750 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005750:	480b      	ldr	r0, [pc, #44]	; (8005780 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005754:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005756:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005758:	d3f6      	bcc.n	8005748 <CopyDataInit>
  ldr  r2, =_sbss
 800575a:	4a0b      	ldr	r2, [pc, #44]	; (8005788 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800575c:	e002      	b.n	8005764 <LoopFillZerobss>

0800575e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800575e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005760:	f842 3b04 	str.w	r3, [r2], #4

08005764 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005764:	4b09      	ldr	r3, [pc, #36]	; (800578c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005766:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005768:	d3f9      	bcc.n	800575e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800576a:	f7ff ffb3 	bl	80056d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800576e:	f000 f811 	bl	8005794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005772:	f7ff fedd 	bl	8005530 <main>
  bx  lr    
 8005776:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005778:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800577c:	08005a38 	.word	0x08005a38
  ldr  r0, =_sdata
 8005780:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005784:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8005788:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800578c:	2000cdc0 	.word	0x2000cdc0

08005790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005790:	e7fe      	b.n	8005790 <ADC_IRQHandler>
	...

08005794 <__libc_init_array>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	4e0d      	ldr	r6, [pc, #52]	; (80057cc <__libc_init_array+0x38>)
 8005798:	4c0d      	ldr	r4, [pc, #52]	; (80057d0 <__libc_init_array+0x3c>)
 800579a:	1ba4      	subs	r4, r4, r6
 800579c:	10a4      	asrs	r4, r4, #2
 800579e:	2500      	movs	r5, #0
 80057a0:	42a5      	cmp	r5, r4
 80057a2:	d109      	bne.n	80057b8 <__libc_init_array+0x24>
 80057a4:	4e0b      	ldr	r6, [pc, #44]	; (80057d4 <__libc_init_array+0x40>)
 80057a6:	4c0c      	ldr	r4, [pc, #48]	; (80057d8 <__libc_init_array+0x44>)
 80057a8:	f000 f83a 	bl	8005820 <_init>
 80057ac:	1ba4      	subs	r4, r4, r6
 80057ae:	10a4      	asrs	r4, r4, #2
 80057b0:	2500      	movs	r5, #0
 80057b2:	42a5      	cmp	r5, r4
 80057b4:	d105      	bne.n	80057c2 <__libc_init_array+0x2e>
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057bc:	4798      	blx	r3
 80057be:	3501      	adds	r5, #1
 80057c0:	e7ee      	b.n	80057a0 <__libc_init_array+0xc>
 80057c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057c6:	4798      	blx	r3
 80057c8:	3501      	adds	r5, #1
 80057ca:	e7f2      	b.n	80057b2 <__libc_init_array+0x1e>
 80057cc:	08005a30 	.word	0x08005a30
 80057d0:	08005a30 	.word	0x08005a30
 80057d4:	08005a30 	.word	0x08005a30
 80057d8:	08005a34 	.word	0x08005a34

080057dc <memcmp>:
 80057dc:	b530      	push	{r4, r5, lr}
 80057de:	2400      	movs	r4, #0
 80057e0:	42a2      	cmp	r2, r4
 80057e2:	d101      	bne.n	80057e8 <memcmp+0xc>
 80057e4:	2000      	movs	r0, #0
 80057e6:	e007      	b.n	80057f8 <memcmp+0x1c>
 80057e8:	5d03      	ldrb	r3, [r0, r4]
 80057ea:	3401      	adds	r4, #1
 80057ec:	190d      	adds	r5, r1, r4
 80057ee:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80057f2:	42ab      	cmp	r3, r5
 80057f4:	d0f4      	beq.n	80057e0 <memcmp+0x4>
 80057f6:	1b58      	subs	r0, r3, r5
 80057f8:	bd30      	pop	{r4, r5, pc}

080057fa <memcpy>:
 80057fa:	b510      	push	{r4, lr}
 80057fc:	1e43      	subs	r3, r0, #1
 80057fe:	440a      	add	r2, r1
 8005800:	4291      	cmp	r1, r2
 8005802:	d100      	bne.n	8005806 <memcpy+0xc>
 8005804:	bd10      	pop	{r4, pc}
 8005806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800580a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800580e:	e7f7      	b.n	8005800 <memcpy+0x6>

08005810 <memset>:
 8005810:	4402      	add	r2, r0
 8005812:	4603      	mov	r3, r0
 8005814:	4293      	cmp	r3, r2
 8005816:	d100      	bne.n	800581a <memset+0xa>
 8005818:	4770      	bx	lr
 800581a:	f803 1b01 	strb.w	r1, [r3], #1
 800581e:	e7f9      	b.n	8005814 <memset+0x4>

08005820 <_init>:
 8005820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005822:	bf00      	nop
 8005824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005826:	bc08      	pop	{r3}
 8005828:	469e      	mov	lr, r3
 800582a:	4770      	bx	lr

0800582c <_fini>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr
